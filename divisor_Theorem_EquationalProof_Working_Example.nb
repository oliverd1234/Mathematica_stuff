(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    642807,      14349]
NotebookOptionsPosition[    636105,      14246]
NotebookOutlinePosition[    636553,      14263]
CellTagsIndexPosition[    636510,      14260]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{"ClearAll", "[", "\"\<Global`*\>\"", "]"}]}]], "Input",
 CellChangeTimes->{{3.8794254699166155`*^9, 3.8794254702868257`*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"86292cdd-96fb-442f-b31e-612439db25bb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"axiom1", "=", 
    RowBox[{"{", 
     RowBox[{"ForAll", "[", 
      RowBox[{
       RowBox[{"{", "a", "}"}], ",", 
       RowBox[{
        RowBox[{"GCD", "[", 
         RowBox[{"a", ",", "a"}], "]"}], "==", "a"}]}], "]"}], "}"}]}], "\n", 
   RowBox[{"axiom2", "=", 
    RowBox[{"{", 
     RowBox[{"ForAll", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"a", ",", "b"}], "}"}], ",", 
       RowBox[{
        RowBox[{"GCD", "[", 
         RowBox[{"a", ",", "b"}], "]"}], "==", 
        RowBox[{"GCD", "[", 
         RowBox[{"b", ",", "a"}], "]"}]}]}], "]"}], "}"}]}], "\n", 
   RowBox[{"axiom3", "=", 
    RowBox[{"{", 
     RowBox[{"ForAll", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"a", ",", "b", ",", "c"}], "}"}], ",", 
       RowBox[{
        RowBox[{"GCD", "[", 
         RowBox[{"a", ",", 
          RowBox[{"gcd", "[", 
           RowBox[{"b", ",", "c"}], "]"}]}], "]"}], "==", 
        RowBox[{"GCD", "[", 
         RowBox[{
          RowBox[{"gcd", "[", 
           RowBox[{"a", ",", "b"}], "]"}], ",", "c"}], "]"}]}]}], "]"}], 
     "}"}]}], "\n", 
   RowBox[{"hyp1", "=", 
    RowBox[{"{", 
     RowBox[{"d", "==", 
      RowBox[{"GCD", "[", 
       RowBox[{"a", ",", "b"}], "]"}]}], "}"}]}], "\n", 
   RowBox[{"hyp2", "=", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"GCD", "[", 
       RowBox[{"a", ",", "t"}], "]"}], "==", "t"}], "}"}]}], "\n", 
   RowBox[{"hyp3", "=", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"GCD", "[", 
       RowBox[{"b", ",", "t"}], "]"}], "==", "t"}], "}"}]}], "\n", 
   RowBox[{"axioms", "=", 
    RowBox[{"Union", "[", 
     RowBox[{"axiom1", ",", "axiom2", ",", "axiom3"}], "]"}]}], "\n", 
   RowBox[{"hypotheses", "=", 
    RowBox[{"Union", "[", 
     RowBox[{"hyp1", ",", "hyp2", ",", "hyp3"}], "]"}]}], "\n", 
   RowBox[{"FindEquationalProof", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"GCD", "[", 
       RowBox[{"d", ",", "t"}], "]"}], "==", "t"}], ",", 
     RowBox[{"Union", "[", 
      RowBox[{"axioms", ",", "hypotheses"}], "]"}]}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.879374158959859*^9, 3.8793741589688463`*^9}, {
  3.8793743040158443`*^9, 3.8793743238155413`*^9}, {3.879425468742971*^9, 
  3.879425468922585*^9}},ExpressionUUID->"12b053ed-1618-4367-ba48-\
2a9fb7039008"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   SubscriptBox["\[ForAll]", 
    RowBox[{"{", "a", "}"}]], 
   RowBox[{
    RowBox[{"GCD", "[", 
     RowBox[{"a", ",", "a"}], "]"}], "\[Equal]", "a"}]}], "}"}]], "Output",
 CellChangeTimes->{3.8793741616968875`*^9, 3.879374324995525*^9},
 CellLabel->"Out[10]=",ExpressionUUID->"c7af72a4-a126-4b71-96a5-93d5c67191a7"],

Cell[BoxData[
 RowBox[{"{", "True", "}"}]], "Output",
 CellChangeTimes->{3.8793741616968875`*^9, 3.879374324998513*^9},
 CellLabel->"Out[11]=",ExpressionUUID->"04256927-37c8-41cc-ace9-c5e3b85ccb06"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   SubscriptBox["\[ForAll]", 
    RowBox[{"{", 
     RowBox[{"a", ",", "b", ",", "c"}], "}"}]], 
   RowBox[{
    RowBox[{"GCD", "[", 
     RowBox[{"a", ",", 
      RowBox[{"gcd", "[", 
       RowBox[{"b", ",", "c"}], "]"}]}], "]"}], "\[Equal]", 
    RowBox[{"GCD", "[", 
     RowBox[{"c", ",", 
      RowBox[{"gcd", "[", 
       RowBox[{"a", ",", "b"}], "]"}]}], "]"}]}]}], "}"}]], "Output",
 CellChangeTimes->{3.8793741616968875`*^9, 3.8793743250035133`*^9},
 CellLabel->"Out[12]=",ExpressionUUID->"63a0d4dc-5db3-458c-aa0b-e5dd3f94654f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"d", "\[Equal]", 
   RowBox[{"GCD", "[", 
    RowBox[{"a", ",", "b"}], "]"}]}], "}"}]], "Output",
 CellChangeTimes->{3.8793741616968875`*^9, 3.879374325007513*^9},
 CellLabel->"Out[13]=",ExpressionUUID->"63c10008-7aa1-4b43-91e9-b7ae7acef2f0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"GCD", "[", 
    RowBox[{"a", ",", "t"}], "]"}], "\[Equal]", "t"}], "}"}]], "Output",
 CellChangeTimes->{3.8793741616968875`*^9, 3.8793743250135803`*^9},
 CellLabel->"Out[14]=",ExpressionUUID->"ba694bbc-fa66-45d7-bd42-ba18ff5e6639"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"GCD", "[", 
    RowBox[{"b", ",", "t"}], "]"}], "\[Equal]", "t"}], "}"}]], "Output",
 CellChangeTimes->{3.8793741616968875`*^9, 3.8793743250155134`*^9},
 CellLabel->"Out[15]=",ExpressionUUID->"02f462e1-d128-4cd3-84b8-e149f69e97d5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"True", ",", 
   RowBox[{
    SubscriptBox["\[ForAll]", 
     RowBox[{"{", "a", "}"}]], 
    RowBox[{
     RowBox[{"GCD", "[", 
      RowBox[{"a", ",", "a"}], "]"}], "\[Equal]", "a"}]}], ",", 
   RowBox[{
    SubscriptBox["\[ForAll]", 
     RowBox[{"{", 
      RowBox[{"a", ",", "b", ",", "c"}], "}"}]], 
    RowBox[{
     RowBox[{"GCD", "[", 
      RowBox[{"a", ",", 
       RowBox[{"gcd", "[", 
        RowBox[{"b", ",", "c"}], "]"}]}], "]"}], "\[Equal]", 
     RowBox[{"GCD", "[", 
      RowBox[{"c", ",", 
       RowBox[{"gcd", "[", 
        RowBox[{"a", ",", "b"}], "]"}]}], "]"}]}]}]}], "}"}]], "Output",
 CellChangeTimes->{3.8793741616968875`*^9, 3.879374325019516*^9},
 CellLabel->"Out[16]=",ExpressionUUID->"1597f642-064a-430a-9f39-5245bb8b68a2"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"d", "\[Equal]", 
    RowBox[{"GCD", "[", 
     RowBox[{"a", ",", "b"}], "]"}]}], ",", 
   RowBox[{
    RowBox[{"GCD", "[", 
     RowBox[{"a", ",", "t"}], "]"}], "\[Equal]", "t"}], ",", 
   RowBox[{
    RowBox[{"GCD", "[", 
     RowBox[{"b", ",", "t"}], "]"}], "\[Equal]", "t"}]}], "}"}]], "Output",
 CellChangeTimes->{3.8793741616968875`*^9, 3.8793743250225143`*^9},
 CellLabel->"Out[17]=",ExpressionUUID->"8d301608-54d0-472a-8c57-19ac412bff7e"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["Failure",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            FrameBox[
             StyleBox["\"\[WarningSign]\"", 
              Directive["Message", 35], StripOnInput -> False], 
             ContentPadding -> False, FrameStyle -> None, 
             FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
            GridBox[{{
               TagBox[
                GridBox[{{
                   TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                   "\"The proposition could not be reduced to True.\"", 
                    "SummaryItem"]}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
               TagBox[
                GridBox[{{
                   TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"PropositionFalse\"", "SummaryItem"]}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            FrameBox[
             StyleBox["\"\[WarningSign]\"", 
              Directive["Message", 35], StripOnInput -> False], 
             ContentPadding -> False, FrameStyle -> None, 
             FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
            GridBox[{{
               TagBox[
                GridBox[{{
                   TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                   "\"The proposition could not be reduced to True.\"", 
                    "SummaryItem"]}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
               TagBox[
                GridBox[{{
                   TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"PropositionFalse\"", "SummaryItem"]}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  Failure["PropositionFalse", 
   Association[
   "MessageTemplate" -> 
    TemplateObject[{"The proposition could not be reduced to True."}, 
      CombinerFunction -> StringJoin, InsertionFunction -> TextString], 
    "MessageParameters" -> Association[]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.8793741616968875`*^9, 3.8793743282316713`*^9},
 CellLabel->"Out[18]=",ExpressionUUID->"4e76e8d3-1a70-4e7f-bca8-0781013357ac"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"axiom1", "=", 
  RowBox[{"{", 
   RowBox[{"ForAll", "[", 
    RowBox[{
     RowBox[{"{", "a", "}"}], ",", 
     RowBox[{
      RowBox[{"gccd", "[", 
       RowBox[{"a", ",", "a"}], "]"}], "==", "a"}]}], "]"}], "}"}]}], "\n", 
 RowBox[{"axiom2", "=", 
  RowBox[{"{", 
   RowBox[{"ForAll", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a", ",", "b"}], "}"}], ",", 
     RowBox[{
      RowBox[{"gccd", "[", 
       RowBox[{"a", ",", "b"}], "]"}], "==", 
      RowBox[{"gccd", "[", 
       RowBox[{"b", ",", "a"}], "]"}]}]}], "]"}], "}"}]}], "\n", 
 RowBox[{"axiom3", "=", 
  RowBox[{"{", 
   RowBox[{"ForAll", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a", ",", "b", ",", "c"}], "}"}], ",", 
     RowBox[{
      RowBox[{"gccd", "[", 
       RowBox[{"a", ",", 
        RowBox[{"gccd", "[", 
         RowBox[{"b", ",", "c"}], "]"}]}], "]"}], "==", 
      RowBox[{"gccd", "[", 
       RowBox[{
        RowBox[{"gccd", "[", 
         RowBox[{"a", ",", "b"}], "]"}], ",", "c"}], "]"}]}]}], "]"}], 
   "}"}]}], "\n", 
 RowBox[{"hyp1", "=", 
  RowBox[{"{", 
   RowBox[{"d", "==", 
    RowBox[{"gccd", "[", 
     RowBox[{"a", ",", "b"}], "]"}]}], "}"}]}], "\n", 
 RowBox[{"hyp2", "=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"gccd", "[", 
     RowBox[{"a", ",", "t"}], "]"}], "==", "t"}], "}"}]}], "\n", 
 RowBox[{"hyp3", "=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"gccd", "[", 
     RowBox[{"b", ",", "t"}], "]"}], "==", "t"}], "}"}]}], "\n", 
 RowBox[{"axioms", "=", 
  RowBox[{"Union", "[", 
   RowBox[{"axiom1", ",", "axiom2", ",", "axiom3"}], "]"}]}], "\n", 
 RowBox[{"hypotheses", "=", 
  RowBox[{"Union", "[", 
   RowBox[{"hyp1", ",", "hyp2", ",", "hyp3"}], "]"}]}], "\n", 
 RowBox[{"proof", "=", 
  RowBox[{"FindEquationalProof", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"gccd", "[", 
      RowBox[{"d", ",", "t"}], "]"}], "==", "t"}], ",", 
    RowBox[{"Union", "[", 
     RowBox[{"axioms", ",", "hypotheses"}], "]"}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.8793745643501673`*^9, 3.879374564359166*^9}, {
  3.879376151017308*^9, 3.8793761658195715`*^9}, {3.8793763146245213`*^9, 
  3.8793763153386*^9}},
 CellLabel->"In[83]:=",ExpressionUUID->"04bb74e9-e8a3-497a-ae73-efd806c27f8e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   SubscriptBox["\[ForAll]", 
    RowBox[{"{", "a", "}"}]], 
   RowBox[{
    RowBox[{"gccd", "[", 
     RowBox[{"a", ",", "a"}], "]"}], "\[Equal]", "a"}]}], "}"}]], "Output",
 CellChangeTimes->{3.879374565479628*^9, 3.879376167001627*^9, 
  3.8793763163102036`*^9, 3.879426124217702*^9},
 CellLabel->"Out[83]=",ExpressionUUID->"27ef4e92-8c49-48c8-a6fd-8b98f35f6a76"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   SubscriptBox["\[ForAll]", 
    RowBox[{"{", 
     RowBox[{"a", ",", "b"}], "}"}]], 
   RowBox[{
    RowBox[{"gccd", "[", 
     RowBox[{"a", ",", "b"}], "]"}], "\[Equal]", 
    RowBox[{"gccd", "[", 
     RowBox[{"b", ",", "a"}], "]"}]}]}], "}"}]], "Output",
 CellChangeTimes->{3.879374565479628*^9, 3.879376167001627*^9, 
  3.8793763163102036`*^9, 3.879426124221692*^9},
 CellLabel->"Out[84]=",ExpressionUUID->"c691a0df-5fa0-4995-855c-9e538350d5cf"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   SubscriptBox["\[ForAll]", 
    RowBox[{"{", 
     RowBox[{"a", ",", "b", ",", "c"}], "}"}]], 
   RowBox[{
    RowBox[{"gccd", "[", 
     RowBox[{"a", ",", 
      RowBox[{"gccd", "[", 
       RowBox[{"b", ",", "c"}], "]"}]}], "]"}], "\[Equal]", 
    RowBox[{"gccd", "[", 
     RowBox[{
      RowBox[{"gccd", "[", 
       RowBox[{"a", ",", "b"}], "]"}], ",", "c"}], "]"}]}]}], "}"}]], "Output",
 CellChangeTimes->{3.879374565479628*^9, 3.879376167001627*^9, 
  3.8793763163102036`*^9, 3.879426124225693*^9},
 CellLabel->"Out[85]=",ExpressionUUID->"2a174ed4-be21-4302-bc93-f47bbe0cba4e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"d", "\[Equal]", 
   RowBox[{"gccd", "[", 
    RowBox[{"a", ",", "b"}], "]"}]}], "}"}]], "Output",
 CellChangeTimes->{3.879374565479628*^9, 3.879376167001627*^9, 
  3.8793763163102036`*^9, 3.879426124228692*^9},
 CellLabel->"Out[86]=",ExpressionUUID->"f63b1f59-d115-4108-aab6-8e4a12e57a1f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"gccd", "[", 
    RowBox[{"a", ",", "t"}], "]"}], "\[Equal]", "t"}], "}"}]], "Output",
 CellChangeTimes->{3.879374565479628*^9, 3.879376167001627*^9, 
  3.8793763163102036`*^9, 3.879426124231696*^9},
 CellLabel->"Out[87]=",ExpressionUUID->"250f18a6-a18b-4dad-b669-0be510cc966c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"gccd", "[", 
    RowBox[{"b", ",", "t"}], "]"}], "\[Equal]", "t"}], "}"}]], "Output",
 CellChangeTimes->{3.879374565479628*^9, 3.879376167001627*^9, 
  3.8793763163102036`*^9, 3.879426124235704*^9},
 CellLabel->"Out[88]=",ExpressionUUID->"204aedc8-7ea9-4466-9caa-f6a92624f41b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    SubscriptBox["\[ForAll]", 
     RowBox[{"{", "a", "}"}]], 
    RowBox[{
     RowBox[{"gccd", "[", 
      RowBox[{"a", ",", "a"}], "]"}], "\[Equal]", "a"}]}], ",", 
   RowBox[{
    SubscriptBox["\[ForAll]", 
     RowBox[{"{", 
      RowBox[{"a", ",", "b"}], "}"}]], 
    RowBox[{
     RowBox[{"gccd", "[", 
      RowBox[{"a", ",", "b"}], "]"}], "\[Equal]", 
     RowBox[{"gccd", "[", 
      RowBox[{"b", ",", "a"}], "]"}]}]}], ",", 
   RowBox[{
    SubscriptBox["\[ForAll]", 
     RowBox[{"{", 
      RowBox[{"a", ",", "b", ",", "c"}], "}"}]], 
    RowBox[{
     RowBox[{"gccd", "[", 
      RowBox[{"a", ",", 
       RowBox[{"gccd", "[", 
        RowBox[{"b", ",", "c"}], "]"}]}], "]"}], "\[Equal]", 
     RowBox[{"gccd", "[", 
      RowBox[{
       RowBox[{"gccd", "[", 
        RowBox[{"a", ",", "b"}], "]"}], ",", "c"}], "]"}]}]}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.879374565479628*^9, 3.879376167001627*^9, 
  3.8793763163102036`*^9, 3.8794261242386937`*^9},
 CellLabel->"Out[89]=",ExpressionUUID->"0be9f3e4-6645-4a05-a330-049d1ca6c96a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"d", "\[Equal]", 
    RowBox[{"gccd", "[", 
     RowBox[{"a", ",", "b"}], "]"}]}], ",", 
   RowBox[{
    RowBox[{"gccd", "[", 
     RowBox[{"a", ",", "t"}], "]"}], "\[Equal]", "t"}], ",", 
   RowBox[{
    RowBox[{"gccd", "[", 
     RowBox[{"b", ",", "t"}], "]"}], "\[Equal]", "t"}]}], "}"}]], "Output",
 CellChangeTimes->{3.879374565479628*^9, 3.879376167001627*^9, 
  3.8793763163102036`*^9, 3.8794261242427015`*^9},
 CellLabel->"Out[90]=",ExpressionUUID->"a12ee356-1f58-47b2-bfcd-909a48c511ae"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ProofObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[
             
             GraphicsComplexBox[{{0., 4.}, {1., 5.}, {-1., 5.}, {-2., 1.}, {
              1., 4.}, {0., 3.}, {-1., 2.}, {0., 2.}, {-1., 1.}, {-1., 0.}}, {{
                GrayLevel[0.55], 
                LineBox[{1, 6}], 
                LineBox[{2, 5}], 
                LineBox[{3, 5}], 
                LineBox[{4, 10}], 
                LineBox[{5, 6}], 
                LineBox[{6, 7}], 
                LineBox[{6, 8}], 
                LineBox[{7, 9}], 
                LineBox[{8, 9}], 
                LineBox[{9, 10}], 
                LineBox[{3, 7}]}, {
                PointBox[1], 
                PointBox[2], 
                PointBox[3], 
                PointBox[4], 
                PointBox[5], 
                PointBox[6], 
                PointBox[7], 
                PointBox[8], 
                PointBox[9], 
                PointBox[10]}}], FrameTicks -> None, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], PlotRange -> All, PlotRangeClipping -> True, 
             PlotRangePadding -> Scaled[0.1], Background -> GrayLevel[0.93], 
             Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Logic: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"EquationalLogic\"", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Steps: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["22", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Theorem: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   RowBox[{
                    RowBox[{"gccd", "[", 
                    RowBox[{"d", ",", "t"}], "]"}], "\[Equal]", "t"}], 
                   Short[#, 1]& ], "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[
             
             GraphicsComplexBox[{{0., 4.}, {1., 5.}, {-1., 5.}, {-2., 1.}, {
              1., 4.}, {0., 3.}, {-1., 2.}, {0., 2.}, {-1., 1.}, {-1., 0.}}, {{
                GrayLevel[0.55], 
                LineBox[{1, 6}], 
                LineBox[{2, 5}], 
                LineBox[{3, 5}], 
                LineBox[{4, 10}], 
                LineBox[{5, 6}], 
                LineBox[{6, 7}], 
                LineBox[{6, 8}], 
                LineBox[{7, 9}], 
                LineBox[{8, 9}], 
                LineBox[{9, 10}], 
                LineBox[{3, 7}]}, {
                PointBox[1], 
                PointBox[2], 
                PointBox[3], 
                PointBox[4], 
                PointBox[5], 
                PointBox[6], 
                PointBox[7], 
                PointBox[8], 
                PointBox[9], 
                PointBox[10]}}], FrameTicks -> None, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], PlotRange -> All, PlotRangeClipping -> True, 
             PlotRangePadding -> Scaled[0.1], Background -> GrayLevel[0.93], 
             Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Logic: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"EquationalLogic\"", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Steps: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["22", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Theorem: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   RowBox[{
                    RowBox[{"gccd", "[", 
                    RowBox[{"d", ",", "t"}], "]"}], "\[Equal]", "t"}], 
                   Short[#, 1]& ], "SummaryItem"]}], "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Axioms: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   RowBox[{
                    RowBox[{"d", "\[Equal]", 
                    RowBox[{"gccd", "[", 
                    RowBox[{"a", ",", "b"}], "]"}]}], "&&", 
                    RowBox[{
                    RowBox[{"gccd", "[", 
                    RowBox[{"a", ",", "t"}], "]"}], "\[Equal]", "t"}], "&&", 
                    RowBox[{
                    RowBox[{"gccd", "[", 
                    RowBox[{"b", ",", "t"}], "]"}], "\[Equal]", "t"}], "&&", 
                    RowBox[{
                    SubscriptBox["\[ForAll]", 
                    RowBox[{"{", "a", "}"}]], 
                    RowBox[{
                    RowBox[{"gccd", "[", 
                    RowBox[{"a", ",", "a"}], "]"}], "\[Equal]", "a"}]}], "&&", 
                    RowBox[{
                    SubscriptBox["\[ForAll]", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b"}], "}"}]], 
                    RowBox[{
                    RowBox[{"gccd", "[", 
                    RowBox[{"a", ",", "b"}], "]"}], "\[Equal]", 
                    RowBox[{"gccd", "[", 
                    RowBox[{"b", ",", "a"}], "]"}]}]}], "&&", 
                    RowBox[{
                    SubscriptBox["\[ForAll]", 
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c"}], "}"}]], 
                    RowBox[{
                    RowBox[{"gccd", "[", 
                    RowBox[{"a", ",", 
                    RowBox[{"gccd", "[", 
                    RowBox[{"b", ",", "c"}], "]"}]}], "]"}], "\[Equal]", 
                    RowBox[{"gccd", "[", 
                    RowBox[{
                    RowBox[{"gccd", "[", 
                    RowBox[{"a", ",", "b"}], "]"}], ",", "c"}], "]"}]}]}]}], 
                   Short[#, 1]& ], "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ProofObject[
  "EquationalLogic", $CellContext`gccd[$CellContext`d, $CellContext`t] == \
$CellContext`t, 
   And[$CellContext`d == $CellContext`gccd[$CellContext`a, $CellContext`b], \
$CellContext`gccd[$CellContext`a, $CellContext`t] == $CellContext`t, \
$CellContext`gccd[$CellContext`b, $CellContext`t] == $CellContext`t, 
    ForAll[{$CellContext`a}, $CellContext`gccd[$CellContext`a, \
$CellContext`a] == $CellContext`a], 
    ForAll[{$CellContext`a, $CellContext`b}, \
$CellContext`gccd[$CellContext`a, $CellContext`b] == \
$CellContext`gccd[$CellContext`b, $CellContext`a]], 
    ForAll[{$CellContext`a, $CellContext`b, $CellContext`c}, \
$CellContext`gccd[$CellContext`a, 
       $CellContext`gccd[$CellContext`b, $CellContext`c]] == $CellContext`gccd[
       $CellContext`gccd[$CellContext`a, $CellContext`b], $CellContext`c]]], \
{{"Axiom", 1} -> 
    Association[
     "Statement" -> $CellContext`x1 == $CellContext`gccd[$CellContext`x1, \
$CellContext`x1], "Proof" -> Association[]], {"Axiom", 2} -> 
    Association[
     "Statement" -> $CellContext`gccd[$CellContext`x1, $CellContext`x2] == \
$CellContext`gccd[$CellContext`x2, $CellContext`x1], "Proof" -> 
      Association[]], {"Axiom", 3} -> 
    Association["Statement" -> $CellContext`gccd[$CellContext`x1, 
         $CellContext`gccd[$CellContext`x2, $CellContext`x3]] == \
$CellContext`gccd[
         $CellContext`gccd[$CellContext`x1, $CellContext`x2], \
$CellContext`x3], "Proof" -> Association[]], {"Axiom", 4} -> 
    Association[
     "Statement" -> $CellContext`gccd[$CellContext`a, $CellContext`t] == \
$CellContext`t, "Proof" -> Association[]], {"Axiom", 5} -> 
    Association[
     "Statement" -> $CellContext`gccd[$CellContext`a, $CellContext`b] == \
$CellContext`d, "Proof" -> Association[]], {"Axiom", 6} -> 
    Association[
     "Statement" -> $CellContext`gccd[$CellContext`b, $CellContext`t] == \
$CellContext`t, "Proof" -> Association[]], {"Hypothesis", 1} -> 
    Association[
     "Statement" -> $CellContext`gccd[$CellContext`d, $CellContext`t] == \
$CellContext`t, "Proof" -> Association[]], {"SubstitutionLemma", 1} -> 
    Association[
     "Statement" -> $CellContext`gccd[$CellContext`b, $CellContext`a] == \
$CellContext`d, "Proof" -> 
      Association[
       "Input" -> {"Axiom", 5}, "Position" -> 1, "Construct" -> {"Axiom", 2}, 
        "Orientation" -> {-1, 1}, "Rule" -> ($CellContext`gccd[
           Pattern[$CellContext`x1, 
            Blank[]], 
           Pattern[$CellContext`x2, 
            Blank[]]] -> $CellContext`gccd[$CellContext`x2, $CellContext`x1]),
         "OutputExpression" -> $CellContext`gccd[$CellContext`b, \
$CellContext`a] == $CellContext`d]], {"SubstitutionLemma", 2} -> 
    Association[
     "Statement" -> $CellContext`gccd[$CellContext`t, $CellContext`d] == \
$CellContext`t, "Proof" -> 
      Association[
       "Input" -> {"Hypothesis", 1}, "Position" -> 1, 
        "Construct" -> {"Axiom", 2}, "Orientation" -> {-1, 1}, 
        "Rule" -> ($CellContext`gccd[
           Pattern[$CellContext`x1, 
            Blank[]], 
           Pattern[$CellContext`x2, 
            Blank[]]] -> $CellContext`gccd[$CellContext`x2, $CellContext`x1]),
         "OutputExpression" -> $CellContext`gccd[$CellContext`t, \
$CellContext`d] == $CellContext`t]], {"SubstitutionLemma", 3} -> 
    Association["Statement" -> $CellContext`gccd[
         $CellContext`gccd[$CellContext`a, $CellContext`t], $CellContext`d] == \
$CellContext`t, "Proof" -> 
      Association[
       "Input" -> {"SubstitutionLemma", 2}, "Position" -> {1, 1}, 
        "Construct" -> {"Axiom", 4}, "Orientation" -> 1, 
        "Rule" -> ($CellContext`t -> $CellContext`gccd[$CellContext`a, \
$CellContext`t]), "OutputExpression" -> $CellContext`gccd[
           $CellContext`gccd[$CellContext`a, $CellContext`t], $CellContext`d] == \
$CellContext`t]], {"SubstitutionLemma", 4} -> 
    Association["Statement" -> $CellContext`gccd[
         $CellContext`gccd[$CellContext`t, $CellContext`a], $CellContext`d] == \
$CellContext`t, "Proof" -> 
      Association[
       "Input" -> {"SubstitutionLemma", 3}, "Position" -> {1, 1}, 
        "Construct" -> {"Axiom", 2}, "Orientation" -> {-1, 1}, 
        "Rule" -> ($CellContext`gccd[
           Pattern[$CellContext`x1, 
            Blank[]], 
           Pattern[$CellContext`x2, 
            Blank[]]] -> $CellContext`gccd[$CellContext`x2, $CellContext`x1]),
         "OutputExpression" -> $CellContext`gccd[
           $CellContext`gccd[$CellContext`t, $CellContext`a], $CellContext`d] == \
$CellContext`t]], {"SubstitutionLemma", 5} -> 
    Association["Statement" -> $CellContext`gccd[$CellContext`t, 
         $CellContext`gccd[$CellContext`a, $CellContext`d]] == $CellContext`t,
       "Proof" -> Association[
       "Input" -> {"SubstitutionLemma", 4}, "Position" -> 1, 
        "Construct" -> {"Axiom", 3}, "Orientation" -> -1, 
        "Rule" -> ($CellContext`gccd[
           $CellContext`gccd[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x2, 
             Blank[]]], 
           Pattern[$CellContext`x3, 
            Blank[]]] -> $CellContext`gccd[$CellContext`x1, 
           $CellContext`gccd[$CellContext`x2, $CellContext`x3]]), 
        "OutputExpression" -> $CellContext`gccd[$CellContext`t, 
           $CellContext`gccd[$CellContext`a, $CellContext`d]] == \
$CellContext`t]], {"SubstitutionLemma", 6} -> 
    Association["Statement" -> $CellContext`gccd[$CellContext`t, 
         $CellContext`gccd[$CellContext`d, $CellContext`a]] == $CellContext`t,
       "Proof" -> Association[
       "Input" -> {"SubstitutionLemma", 5}, "Position" -> {1, 2}, 
        "Construct" -> {"Axiom", 2}, "Orientation" -> {-1, 1}, 
        "Rule" -> ($CellContext`gccd[
           Pattern[$CellContext`x1, 
            Blank[]], 
           Pattern[$CellContext`x2, 
            Blank[]]] -> $CellContext`gccd[$CellContext`x2, $CellContext`x1]),
         "OutputExpression" -> $CellContext`gccd[$CellContext`t, 
           $CellContext`gccd[$CellContext`d, $CellContext`a]] == \
$CellContext`t]], {"SubstitutionLemma", 7} -> 
    Association["Statement" -> $CellContext`gccd[
         $CellContext`gccd[$CellContext`d, $CellContext`a], $CellContext`t] == \
$CellContext`t, "Proof" -> 
      Association[
       "Input" -> {"SubstitutionLemma", 6}, "Position" -> 1, 
        "Construct" -> {"Axiom", 2}, "Orientation" -> {-1, 1}, 
        "Rule" -> ($CellContext`gccd[
           Pattern[$CellContext`x1, 
            Blank[]], 
           Pattern[$CellContext`x2, 
            Blank[]]] -> $CellContext`gccd[$CellContext`x2, $CellContext`x1]),
         "OutputExpression" -> $CellContext`gccd[
           $CellContext`gccd[$CellContext`d, $CellContext`a], $CellContext`t] == \
$CellContext`t]], {"SubstitutionLemma", 8} -> 
    Association["Statement" -> $CellContext`gccd[
         $CellContext`gccd[
          $CellContext`gccd[$CellContext`b, $CellContext`a], $CellContext`a], \
$CellContext`t] == $CellContext`t, "Proof" -> 
      Association[
       "Input" -> {"SubstitutionLemma", 7}, "Position" -> {1, 1, 1}, 
        "Construct" -> {"SubstitutionLemma", 1}, "Orientation" -> 1, 
        "Rule" -> ($CellContext`d -> $CellContext`gccd[$CellContext`b, \
$CellContext`a]), "OutputExpression" -> $CellContext`gccd[
           $CellContext`gccd[
            $CellContext`gccd[$CellContext`b, $CellContext`a], \
$CellContext`a], $CellContext`t] == $CellContext`t]], {
     "SubstitutionLemma", 9} -> Association["Statement" -> $CellContext`gccd[
         $CellContext`gccd[$CellContext`b, 
          $CellContext`gccd[$CellContext`a, $CellContext`a]], $CellContext`t] == \
$CellContext`t, "Proof" -> 
      Association[
       "Input" -> {"SubstitutionLemma", 8}, "Position" -> {1, 1}, 
        "Construct" -> {"Axiom", 3}, "Orientation" -> -1, 
        "Rule" -> ($CellContext`gccd[
           $CellContext`gccd[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x2, 
             Blank[]]], 
           Pattern[$CellContext`x3, 
            Blank[]]] -> $CellContext`gccd[$CellContext`x1, 
           $CellContext`gccd[$CellContext`x2, $CellContext`x3]]), 
        "OutputExpression" -> $CellContext`gccd[
           $CellContext`gccd[$CellContext`b, 
            $CellContext`gccd[$CellContext`a, $CellContext`a]], \
$CellContext`t] == $CellContext`t]], {"SubstitutionLemma", 10} -> 
    Association["Statement" -> $CellContext`gccd[$CellContext`b, 
         $CellContext`gccd[
          $CellContext`gccd[$CellContext`a, $CellContext`a], $CellContext`t]] == \
$CellContext`t, "Proof" -> 
      Association[
       "Input" -> {"SubstitutionLemma", 9}, "Position" -> 1, 
        "Construct" -> {"Axiom", 3}, "Orientation" -> -1, 
        "Rule" -> ($CellContext`gccd[
           $CellContext`gccd[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x2, 
             Blank[]]], 
           Pattern[$CellContext`x3, 
            Blank[]]] -> $CellContext`gccd[$CellContext`x1, 
           $CellContext`gccd[$CellContext`x2, $CellContext`x3]]), 
        "OutputExpression" -> $CellContext`gccd[$CellContext`b, 
           $CellContext`gccd[
            $CellContext`gccd[$CellContext`a, $CellContext`a], \
$CellContext`t]] == $CellContext`t]], {"SubstitutionLemma", 11} -> 
    Association["Statement" -> $CellContext`gccd[
         $CellContext`gccd[
          $CellContext`gccd[$CellContext`a, $CellContext`a], $CellContext`t], \
$CellContext`b] == $CellContext`t, "Proof" -> 
      Association[
       "Input" -> {"SubstitutionLemma", 10}, "Position" -> 1, 
        "Construct" -> {"Axiom", 2}, "Orientation" -> {-1, 1}, 
        "Rule" -> ($CellContext`gccd[
           Pattern[$CellContext`x1, 
            Blank[]], 
           Pattern[$CellContext`x2, 
            Blank[]]] -> $CellContext`gccd[$CellContext`x2, $CellContext`x1]),
         "OutputExpression" -> $CellContext`gccd[
           $CellContext`gccd[
            $CellContext`gccd[$CellContext`a, $CellContext`a], \
$CellContext`t], $CellContext`b] == $CellContext`t]], {
     "SubstitutionLemma", 12} -> Association["Statement" -> $CellContext`gccd[
         $CellContext`gccd[$CellContext`a, $CellContext`t], $CellContext`b] == \
$CellContext`t, "Proof" -> 
      Association[
       "Input" -> {"SubstitutionLemma", 11}, "Position" -> {1, 1, 1}, 
        "Construct" -> {"Axiom", 1}, "Orientation" -> -1, 
        "Rule" -> ($CellContext`gccd[
           Pattern[$CellContext`x1, 
            Blank[]], 
           Pattern[$CellContext`x1, 
            Blank[]]] -> $CellContext`x1), 
        "OutputExpression" -> $CellContext`gccd[
           $CellContext`gccd[$CellContext`a, $CellContext`t], $CellContext`b] == \
$CellContext`t]], {"SubstitutionLemma", 13} -> 
    Association[
     "Statement" -> $CellContext`gccd[$CellContext`t, $CellContext`b] == \
$CellContext`t, "Proof" -> 
      Association[
       "Input" -> {"SubstitutionLemma", 12}, "Position" -> {1, 1}, 
        "Construct" -> {"Axiom", 4}, "Orientation" -> 1, 
        "Rule" -> ($CellContext`gccd[$CellContext`a, $CellContext`t] -> \
$CellContext`t), 
        "OutputExpression" -> $CellContext`gccd[$CellContext`t, \
$CellContext`b] == $CellContext`t]], {"SubstitutionLemma", 14} -> 
    Association[
     "Statement" -> $CellContext`gccd[$CellContext`b, $CellContext`t] == \
$CellContext`t, "Proof" -> 
      Association[
       "Input" -> {"SubstitutionLemma", 13}, "Position" -> 1, 
        "Construct" -> {"Axiom", 2}, "Orientation" -> {-1, 1}, 
        "Rule" -> ($CellContext`gccd[
           Pattern[$CellContext`x1, 
            Blank[]], 
           Pattern[$CellContext`x2, 
            Blank[]]] -> $CellContext`gccd[$CellContext`x2, $CellContext`x1]),
         "OutputExpression" -> $CellContext`gccd[$CellContext`b, \
$CellContext`t] == $CellContext`t]], {"Conclusion", 1} -> 
    Association[
     "Statement" -> True, "Proof" -> 
      Association[
       "Input" -> {"SubstitutionLemma", 14}, "Position" -> 2, 
        "Construct" -> {"Axiom", 6}, "Orientation" -> 1, 
        "Rule" -> ($CellContext`t -> $CellContext`gccd[$CellContext`b, \
$CellContext`t]), "OutputExpression" -> True]]}],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.879374565479628*^9, 3.879376167001627*^9, 
  3.8793763163102036`*^9, 3.879426126962702*^9},
 CellLabel->"Out[91]=",ExpressionUUID->"fd33337e-4745-4194-a114-efd54480ebe8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"proof", "[", "\"\<ProofDataset\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.879376293340543*^9, 3.8793762951996183`*^9}, {
  3.8793763273893175`*^9, 3.8793763514872055`*^9}},
 CellLabel->"In[49]:=",ExpressionUUID->"1ec0efb9-55d6-41a0-bf81-9581b0d74116"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
    Association[
    "InitialData" -> 
     Association[{"Axiom", 1} -> 
       Association[
        "Statement" -> $CellContext`x1 == $CellContext`gccd[$CellContext`x1, \
$CellContext`x1], "Proof" -> Association[]], {"Axiom", 2} -> 
       Association[
        "Statement" -> $CellContext`gccd[$CellContext`x1, $CellContext`x2] == \
$CellContext`gccd[$CellContext`x2, $CellContext`x1], "Proof" -> 
         Association[]], {"Axiom", 3} -> 
       Association["Statement" -> $CellContext`gccd[$CellContext`x1, 
            $CellContext`gccd[$CellContext`x2, $CellContext`x3]] == \
$CellContext`gccd[
            $CellContext`gccd[$CellContext`x1, $CellContext`x2], \
$CellContext`x3], "Proof" -> Association[]], {"Axiom", 4} -> 
       Association[
        "Statement" -> $CellContext`gccd[$CellContext`a, $CellContext`t] == \
$CellContext`t, "Proof" -> Association[]], {"Axiom", 5} -> 
       Association[
        "Statement" -> $CellContext`gccd[$CellContext`a, $CellContext`b] == \
$CellContext`d, "Proof" -> Association[]], {"Axiom", 6} -> 
       Association[
        "Statement" -> $CellContext`gccd[$CellContext`b, $CellContext`t] == \
$CellContext`t, "Proof" -> Association[]], {"Hypothesis", 1} -> 
       Association[
        "Statement" -> $CellContext`gccd[$CellContext`d, $CellContext`t] == \
$CellContext`t, "Proof" -> Association[]], {"SubstitutionLemma", 1} -> 
       Association[
        "Statement" -> $CellContext`gccd[$CellContext`b, $CellContext`a] == \
$CellContext`d, "Proof" -> 
         Association[
          "Input" -> {"Axiom", 5}, "Position" -> 1, 
           "Construct" -> {"Axiom", 2}, "Orientation" -> {-1, 1}, 
           "Rule" -> ($CellContext`gccd[
              Pattern[$CellContext`x1, 
               Blank[]], 
              Pattern[$CellContext`x2, 
               
               Blank[]]] -> $CellContext`gccd[$CellContext`x2, \
$CellContext`x1]), 
           "OutputExpression" -> $CellContext`gccd[$CellContext`b, \
$CellContext`a] == $CellContext`d]], {"SubstitutionLemma", 2} -> 
       Association[
        "Statement" -> $CellContext`gccd[$CellContext`t, $CellContext`d] == \
$CellContext`t, "Proof" -> 
         Association[
          "Input" -> {"Hypothesis", 1}, "Position" -> 1, 
           "Construct" -> {"Axiom", 2}, "Orientation" -> {-1, 1}, 
           "Rule" -> ($CellContext`gccd[
              Pattern[$CellContext`x1, 
               Blank[]], 
              Pattern[$CellContext`x2, 
               
               Blank[]]] -> $CellContext`gccd[$CellContext`x2, \
$CellContext`x1]), 
           "OutputExpression" -> $CellContext`gccd[$CellContext`t, \
$CellContext`d] == $CellContext`t]], {"SubstitutionLemma", 3} -> 
       Association["Statement" -> $CellContext`gccd[
            $CellContext`gccd[$CellContext`a, $CellContext`t], \
$CellContext`d] == $CellContext`t, "Proof" -> 
         Association[
          "Input" -> {"SubstitutionLemma", 2}, "Position" -> {1, 1}, 
           "Construct" -> {"Axiom", 4}, "Orientation" -> 1, 
           "Rule" -> ($CellContext`t -> $CellContext`gccd[$CellContext`a, \
$CellContext`t]), "OutputExpression" -> $CellContext`gccd[
              $CellContext`gccd[$CellContext`a, $CellContext`t], \
$CellContext`d] == $CellContext`t]], {"SubstitutionLemma", 4} -> 
       Association["Statement" -> $CellContext`gccd[
            $CellContext`gccd[$CellContext`t, $CellContext`a], \
$CellContext`d] == $CellContext`t, "Proof" -> 
         Association[
          "Input" -> {"SubstitutionLemma", 3}, "Position" -> {1, 1}, 
           "Construct" -> {"Axiom", 2}, "Orientation" -> {-1, 1}, 
           "Rule" -> ($CellContext`gccd[
              Pattern[$CellContext`x1, 
               Blank[]], 
              Pattern[$CellContext`x2, 
               
               Blank[]]] -> $CellContext`gccd[$CellContext`x2, \
$CellContext`x1]), "OutputExpression" -> $CellContext`gccd[
              $CellContext`gccd[$CellContext`t, $CellContext`a], \
$CellContext`d] == $CellContext`t]], {"SubstitutionLemma", 5} -> 
       Association["Statement" -> $CellContext`gccd[$CellContext`t, 
            $CellContext`gccd[$CellContext`a, $CellContext`d]] == \
$CellContext`t, "Proof" -> 
         Association[
          "Input" -> {"SubstitutionLemma", 4}, "Position" -> 1, 
           "Construct" -> {"Axiom", 3}, "Orientation" -> -1, 
           "Rule" -> ($CellContext`gccd[
              $CellContext`gccd[
               Pattern[$CellContext`x1, 
                Blank[]], 
               Pattern[$CellContext`x2, 
                Blank[]]], 
              Pattern[$CellContext`x3, 
               Blank[]]] -> $CellContext`gccd[$CellContext`x1, 
              $CellContext`gccd[$CellContext`x2, $CellContext`x3]]), 
           "OutputExpression" -> $CellContext`gccd[$CellContext`t, 
              $CellContext`gccd[$CellContext`a, $CellContext`d]] == \
$CellContext`t]], {"SubstitutionLemma", 6} -> 
       Association["Statement" -> $CellContext`gccd[$CellContext`t, 
            $CellContext`gccd[$CellContext`d, $CellContext`a]] == \
$CellContext`t, "Proof" -> 
         Association[
          "Input" -> {"SubstitutionLemma", 5}, "Position" -> {1, 2}, 
           "Construct" -> {"Axiom", 2}, "Orientation" -> {-1, 1}, 
           "Rule" -> ($CellContext`gccd[
              Pattern[$CellContext`x1, 
               Blank[]], 
              Pattern[$CellContext`x2, 
               
               Blank[]]] -> $CellContext`gccd[$CellContext`x2, \
$CellContext`x1]), "OutputExpression" -> $CellContext`gccd[$CellContext`t, 
              $CellContext`gccd[$CellContext`d, $CellContext`a]] == \
$CellContext`t]], {"SubstitutionLemma", 7} -> 
       Association["Statement" -> $CellContext`gccd[
            $CellContext`gccd[$CellContext`d, $CellContext`a], \
$CellContext`t] == $CellContext`t, "Proof" -> 
         Association[
          "Input" -> {"SubstitutionLemma", 6}, "Position" -> 1, 
           "Construct" -> {"Axiom", 2}, "Orientation" -> {-1, 1}, 
           "Rule" -> ($CellContext`gccd[
              Pattern[$CellContext`x1, 
               Blank[]], 
              Pattern[$CellContext`x2, 
               
               Blank[]]] -> $CellContext`gccd[$CellContext`x2, \
$CellContext`x1]), "OutputExpression" -> $CellContext`gccd[
              $CellContext`gccd[$CellContext`d, $CellContext`a], \
$CellContext`t] == $CellContext`t]], {"SubstitutionLemma", 8} -> 
       Association["Statement" -> $CellContext`gccd[
            $CellContext`gccd[
             $CellContext`gccd[$CellContext`b, $CellContext`a], \
$CellContext`a], $CellContext`t] == $CellContext`t, "Proof" -> 
         Association[
          "Input" -> {"SubstitutionLemma", 7}, "Position" -> {1, 1, 1}, 
           "Construct" -> {"SubstitutionLemma", 1}, "Orientation" -> 1, 
           "Rule" -> ($CellContext`d -> $CellContext`gccd[$CellContext`b, \
$CellContext`a]), "OutputExpression" -> $CellContext`gccd[
              $CellContext`gccd[
               $CellContext`gccd[$CellContext`b, $CellContext`a], \
$CellContext`a], $CellContext`t] == $CellContext`t]], {
        "SubstitutionLemma", 9} -> 
       Association["Statement" -> $CellContext`gccd[
            $CellContext`gccd[$CellContext`b, 
             $CellContext`gccd[$CellContext`a, $CellContext`a]], \
$CellContext`t] == $CellContext`t, "Proof" -> 
         Association[
          "Input" -> {"SubstitutionLemma", 8}, "Position" -> {1, 1}, 
           "Construct" -> {"Axiom", 3}, "Orientation" -> -1, 
           "Rule" -> ($CellContext`gccd[
              $CellContext`gccd[
               Pattern[$CellContext`x1, 
                Blank[]], 
               Pattern[$CellContext`x2, 
                Blank[]]], 
              Pattern[$CellContext`x3, 
               Blank[]]] -> $CellContext`gccd[$CellContext`x1, 
              $CellContext`gccd[$CellContext`x2, $CellContext`x3]]), 
           "OutputExpression" -> $CellContext`gccd[
              $CellContext`gccd[$CellContext`b, 
               $CellContext`gccd[$CellContext`a, $CellContext`a]], \
$CellContext`t] == $CellContext`t]], {"SubstitutionLemma", 10} -> 
       Association["Statement" -> $CellContext`gccd[$CellContext`b, 
            $CellContext`gccd[
             $CellContext`gccd[$CellContext`a, $CellContext`a], \
$CellContext`t]] == $CellContext`t, "Proof" -> 
         Association[
          "Input" -> {"SubstitutionLemma", 9}, "Position" -> 1, 
           "Construct" -> {"Axiom", 3}, "Orientation" -> -1, 
           "Rule" -> ($CellContext`gccd[
              $CellContext`gccd[
               Pattern[$CellContext`x1, 
                Blank[]], 
               Pattern[$CellContext`x2, 
                Blank[]]], 
              Pattern[$CellContext`x3, 
               Blank[]]] -> $CellContext`gccd[$CellContext`x1, 
              $CellContext`gccd[$CellContext`x2, $CellContext`x3]]), 
           "OutputExpression" -> $CellContext`gccd[$CellContext`b, 
              $CellContext`gccd[
               $CellContext`gccd[$CellContext`a, $CellContext`a], \
$CellContext`t]] == $CellContext`t]], {"SubstitutionLemma", 11} -> 
       Association["Statement" -> $CellContext`gccd[
            $CellContext`gccd[
             $CellContext`gccd[$CellContext`a, $CellContext`a], \
$CellContext`t], $CellContext`b] == $CellContext`t, "Proof" -> 
         Association[
          "Input" -> {"SubstitutionLemma", 10}, "Position" -> 1, 
           "Construct" -> {"Axiom", 2}, "Orientation" -> {-1, 1}, 
           "Rule" -> ($CellContext`gccd[
              Pattern[$CellContext`x1, 
               Blank[]], 
              Pattern[$CellContext`x2, 
               
               Blank[]]] -> $CellContext`gccd[$CellContext`x2, \
$CellContext`x1]), "OutputExpression" -> $CellContext`gccd[
              $CellContext`gccd[
               $CellContext`gccd[$CellContext`a, $CellContext`a], \
$CellContext`t], $CellContext`b] == $CellContext`t]], {
        "SubstitutionLemma", 12} -> 
       Association["Statement" -> $CellContext`gccd[
            $CellContext`gccd[$CellContext`a, $CellContext`t], \
$CellContext`b] == $CellContext`t, "Proof" -> 
         Association[
          "Input" -> {"SubstitutionLemma", 11}, "Position" -> {1, 1, 1}, 
           "Construct" -> {"Axiom", 1}, "Orientation" -> -1, 
           "Rule" -> ($CellContext`gccd[
              Pattern[$CellContext`x1, 
               Blank[]], 
              Pattern[$CellContext`x1, 
               Blank[]]] -> $CellContext`x1), 
           "OutputExpression" -> $CellContext`gccd[
              $CellContext`gccd[$CellContext`a, $CellContext`t], \
$CellContext`b] == $CellContext`t]], {"SubstitutionLemma", 13} -> 
       Association[
        "Statement" -> $CellContext`gccd[$CellContext`t, $CellContext`b] == \
$CellContext`t, "Proof" -> 
         Association[
          "Input" -> {"SubstitutionLemma", 12}, "Position" -> {1, 1}, 
           "Construct" -> {"Axiom", 4}, "Orientation" -> 1, 
           "Rule" -> ($CellContext`gccd[$CellContext`a, $CellContext`t] -> \
$CellContext`t), 
           "OutputExpression" -> $CellContext`gccd[$CellContext`t, \
$CellContext`b] == $CellContext`t]], {"SubstitutionLemma", 14} -> 
       Association[
        "Statement" -> $CellContext`gccd[$CellContext`b, $CellContext`t] == \
$CellContext`t, "Proof" -> 
         Association[
          "Input" -> {"SubstitutionLemma", 13}, "Position" -> 1, 
           "Construct" -> {"Axiom", 2}, "Orientation" -> {-1, 1}, 
           "Rule" -> ($CellContext`gccd[
              Pattern[$CellContext`x1, 
               Blank[]], 
              Pattern[$CellContext`x2, 
               
               Blank[]]] -> $CellContext`gccd[$CellContext`x2, \
$CellContext`x1]), 
           "OutputExpression" -> $CellContext`gccd[$CellContext`b, \
$CellContext`t] == $CellContext`t]], {"Conclusion", 1} -> 
       Association[
        "Statement" -> True, "Proof" -> 
         Association[
          "Input" -> {"SubstitutionLemma", 14}, "Position" -> 2, 
           "Construct" -> {"Axiom", 6}, "Orientation" -> 1, 
           "Rule" -> ($CellContext`t -> $CellContext`gccd[$CellContext`b, \
$CellContext`t]), "OutputExpression" -> True]]], "AllowEmbedding" -> True, 
     "InitialShape" -> TypeSystem`PackageScope`HeaderShape[
       Association[{All, 
          TypeSystem`PackageScope`KeyDummy[1]} -> 2, {All, "Statement"} -> 
        1, {All, "Proof"} -> 2], 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`KeyValueShape[
          TypeSystem`PackageScope`Limited[
           TypeSystem`PackageScope`RowShape[{
             TypeSystem`PackageScope`AtomShape[178.5], 
             TypeSystem`PackageScope`AtomShape[34]}], 
           DirectedInfinity[1], 2, {All}], 
          TypeSystem`PackageScope`Limited[
           TypeSystem`PackageScope`RowShape[
            Association[
            "Statement" -> TypeSystem`PackageScope`UnknownShape[False], 
             "Proof" -> TypeSystem`PackageScope`Limited[
               TypeSystem`PackageScope`ColumnShape[
                TypeSystem`PackageScope`KeyValueShape[
                 TypeSystem`PackageScope`AtomShape[179.20000000000002`], 
                 TypeSystem`PackageScope`UnknownShape[False]]], 2, 
               DirectedInfinity[1], {All, "Proof"}]]], 
           DirectedInfinity[1], 2, {All}]]], 10, 
        DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Assoc[
       TypeSystem`Tuple[{
         TypeSystem`Atom[
          TypeSystem`Enumeration[
          "Axiom", "Conclusion", "Hypothesis", "SubstitutionLemma"]], 
         TypeSystem`Atom[Integer]}], 
       TypeSystem`Struct[{"Statement", "Proof"}, {TypeSystem`AnyType, 
         TypeSystem`Assoc[
          TypeSystem`Atom[String], TypeSystem`AnyType, 
          TypeSystem`AnyLength]}], 22], "Meta" -> Association[], "RowTarget" -> 
     20, "ColumnTarget" -> 10, "Shape" -> TypeSystem`PackageScope`HeaderShape[
       Association[{All, 
          TypeSystem`PackageScope`KeyDummy[15]} -> 2, {All, "Statement"} -> 
        1, {All, "Proof"} -> 2], 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`KeyValueShape[
          TypeSystem`PackageScope`Limited[
           TypeSystem`PackageScope`RowShape[{
             TypeSystem`PackageScope`AtomShape[178.5], 
             TypeSystem`PackageScope`AtomShape[34]}], 
           DirectedInfinity[1], 2, {All}], 
          TypeSystem`PackageScope`Limited[
           TypeSystem`PackageScope`RowShape[
            Association[
            "Statement" -> TypeSystem`PackageScope`UnknownShape[False], 
             "Proof" -> TypeSystem`PackageScope`Limited[
               TypeSystem`PackageScope`ColumnShape[
                TypeSystem`PackageScope`KeyValueShape[
                 TypeSystem`PackageScope`AtomShape[179.20000000000002`], 
                 TypeSystem`PackageScope`UnknownShape[False]]], 2, 
               DirectedInfinity[1], {All, "Proof"}]]], 
           DirectedInfinity[1], 2, {All}]]], 10, 
        DirectedInfinity[1], {}]], "Type" -> TypeSystem`Assoc[
       TypeSystem`Tuple[{
         TypeSystem`Atom[
          TypeSystem`Enumeration[
          "Axiom", "Conclusion", "Hypothesis", "SubstitutionLemma"]], 
         TypeSystem`Atom[Integer]}], 
       TypeSystem`Struct[{"Statement", "Proof"}, {TypeSystem`AnyType, 
         TypeSystem`Assoc[
          TypeSystem`Atom[String], TypeSystem`AnyType, 
          TypeSystem`AnyLength]}], 22], "Path" -> {}, "DisplayedRowCount" -> 
     10, "DisplayedColumnCount" -> 2, "DataRowCount" -> 22, "DataColumnCount" -> 
     2, "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null, 
     "UpdateType" -> 1], TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 13, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               Mouseover[
                
                Graphics[{}, ImageSize -> 6, BaselinePosition -> 
                 Scaled[-0.15]], 
                Graphics[{
                  GrayLevel[0.6], 
                  
                  Polygon[{{2^Rational[-1, 2], -2^Rational[-1, 2]}, {
                    2^Rational[-1, 2], 2^
                    Rational[-1, 2]}, {-2^Rational[-1, 2], 2^
                    Rational[-1, 2]}, {-2^Rational[-1, 2], -2^
                    Rational[-1, 2]}}]}, ImageSize -> 6, BaselinePosition -> 
                 Scaled[-0.15]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "18a7c0d3-8c16-4d27-9912-2fe83066afb3"][{All, Keys}, 
                "KeyDummy", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Center, Baseline}], SpanFromLeft, 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Statement", 
                  Style[
                  "Statement", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   "18a7c0d3-8c16-4d27-9912-2fe83066afb3"]][{
                   All, "Statement"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "18a7c0d3-8c16-4d27-9912-2fe83066afb3"][{All, "Statement"}, 
                "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Proof", 
                  Style[
                  "Proof", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   "18a7c0d3-8c16-4d27-9912-2fe83066afb3"]][{All, "Proof"}, 
                   1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "18a7c0d3-8c16-4d27-9912-2fe83066afb3"][{All, "Proof"}, 
                "ColumnHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Center, Baseline}], 
            SpanFromLeft}, {
            Item[
             Pane[
              Annotation["SubstitutionLemma", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "18a7c0d3-8c16-4d27-9912-2fe83066afb3"][{
                 Key[{"SubstitutionLemma", 6}], 1}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["6"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "18a7c0d3-8c16-4d27-9912-2fe83066afb3"][{
                 Key[{"SubstitutionLemma", 6}], 2}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{
                   RowBox[{"gccd", "[", 
                    RowBox[{"t", ",", 
                    RowBox[{"gccd", "[", 
                    RowBox[{"d", ",", "a"}], "]"}]}], "]"}], "\[Equal]", 
                   "t"}], FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "18a7c0d3-8c16-4d27-9912-2fe83066afb3"][{
                 Key[{"SubstitutionLemma", 6}], 
                 Key["Statement"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Input", 
                  Style[
                  "Input", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   "18a7c0d3-8c16-4d27-9912-2fe83066afb3"]][{
                    Key[{"SubstitutionLemma", 6}], 
                    Key["Proof"], 
                    Key["Input"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "18a7c0d3-8c16-4d27-9912-2fe83066afb3"][{
                 Key[{"SubstitutionLemma", 6}], 
                 Key["Proof"], 
                 Key["Input"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{179.20000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"SubstitutionLemma", 5}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{"SubstitutionLemma", 5}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   "18a7c0d3-8c16-4d27-9912-2fe83066afb3"]][{
                    Key[{"SubstitutionLemma", 6}], 
                    Key["Proof"], 
                    Key["Input"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "18a7c0d3-8c16-4d27-9912-2fe83066afb3"][{
                 Key[{"SubstitutionLemma", 6}], 
                 Key["Proof"], 
                 Key["Input"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
           SpanFromAbove, SpanFromAbove, SpanFromAbove, 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Position", 
                  Style[
                  "Position", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   "18a7c0d3-8c16-4d27-9912-2fe83066afb3"]][{
                    Key[{"SubstitutionLemma", 6}], 
                    Key["Proof"], 
                    Key["Position"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "18a7c0d3-8c16-4d27-9912-2fe83066afb3"][{
                 Key[{"SubstitutionLemma", 6}], 
                 Key["Proof"], 
                 Key["Position"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{179.20000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{1, 2}, ShowStringCharacters -> False], 
                  Style[
                   Style[{1, 2}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   "18a7c0d3-8c16-4d27-9912-2fe83066afb3"]][{
                    Key[{"SubstitutionLemma", 6}], 
                    Key["Proof"], 
                    Key["Position"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "18a7c0d3-8c16-4d27-9912-2fe83066afb3"][{
                 Key[{"SubstitutionLemma", 6}], 
                 Key["Proof"], 
                 Key["Position"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
           SpanFromAbove, SpanFromAbove, SpanFromAbove, 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Superscript["6 total \:203a ", ""], 
                  Style[
                   Superscript["6 total \:203a ", ""], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   "18a7c0d3-8c16-4d27-9912-2fe83066afb3"]][{
                    Key[{"SubstitutionLemma", 6}], 
                    Key["Proof"]}, 2]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "18a7c0d3-8c16-4d27-9912-2fe83066afb3"][{
                 Key[{"SubstitutionLemma", 6}], 
                 Key["Proof"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {{
                RGBColor[
                0.5098039215686274, 0.5098039215686274, 0.5098039215686274], 
                8}, ContextMenu -> {
                 MenuItem["Show 1 More Row at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    "18a7c0d3-8c16-4d27-9912-2fe83066afb3"}, "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    1]& , {All, "Proof"}]], MenuEvaluator -> Automatic], 
                 MenuItem["Show 5 More Rows at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    "18a7c0d3-8c16-4d27-9912-2fe83066afb3"}, "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    5]& , {All, "Proof"}]], MenuEvaluator -> Automatic], 
                 Delimiter, 
                 MenuItem["Show 1 Fewer Row at This Level", 
                  KernelExecute[
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    "18a7c0d3-8c16-4d27-9912-2fe83066afb3"}, "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, -1]& \
, {All, "Proof"}]], MenuEvaluator -> Automatic], 
                 MenuItem["Show 5 Fewer Rows at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    "18a7c0d3-8c16-4d27-9912-2fe83066afb3"}, "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, -5]& \
, {All, "Proof"}]], MenuEvaluator -> Automatic]}}, 
             Alignment -> {Left, Baseline}, Background -> GrayLevel[0.98]], 
            SpanFromLeft}, {
            Item[
             Pane[
              Annotation["SubstitutionLemma", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "18a7c0d3-8c16-4d27-9912-2fe83066afb3"][{
                 Key[{"SubstitutionLemma", 7}], 1}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["7"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "18a7c0d3-8c16-4d27-9912-2fe83066afb3"][{
                 Key[{"SubstitutionLemma", 7}], 2}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{
                   RowBox[{"gccd", "[", 
                    RowBox[{
                    RowBox[{"gccd", "[", 
                    RowBox[{"d", ",", "a"}], "]"}], ",", "t"}], "]"}], 
                   "\[Equal]", "t"}], FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "18a7c0d3-8c16-4d27-9912-2fe83066afb3"][{
                 Key[{"SubstitutionLemma", 7}], 
                 Key["Statement"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Input", 
                  Style[
                  "Input", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   "18a7c0d3-8c16-4d27-9912-2fe83066afb3"]][{
                    Key[{"SubstitutionLemma", 7}], 
                    Key["Proof"], 
                    Key["Input"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "18a7c0d3-8c16-4d27-9912-2fe83066afb3"][{
                 Key[{"SubstitutionLemma", 7}], 
                 Key["Proof"], 
                 Key["Input"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{179.20000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"SubstitutionLemma", 6}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{"SubstitutionLemma", 6}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   "18a7c0d3-8c16-4d27-9912-2fe83066afb3"]][{
                    Key[{"SubstitutionLemma", 7}], 
                    Key["Proof"], 
                    Key["Input"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "18a7c0d3-8c16-4d27-9912-2fe83066afb3"][{
                 Key[{"SubstitutionLemma", 7}], 
                 Key["Proof"], 
                 Key["Input"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
           SpanFromAbove, SpanFromAbove, SpanFromAbove, 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Position", 
                  Style[
                  "Position", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   "18a7c0d3-8c16-4d27-9912-2fe83066afb3"]][{
                    Key[{"SubstitutionLemma", 7}], 
                    Key["Proof"], 
                    Key["Position"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "18a7c0d3-8c16-4d27-9912-2fe83066afb3"][{
                 Key[{"SubstitutionLemma", 7}], 
                 Key["Proof"], 
                 Key["Position"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{179.20000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["1"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "18a7c0d3-8c16-4d27-9912-2fe83066afb3"][{
                 Key[{"SubstitutionLemma", 7}], 
                 Key["Proof"], 
                 Key["Position"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
           SpanFromAbove, SpanFromAbove, SpanFromAbove, 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Superscript["6 total \:203a ", ""], 
                  Style[
                   Superscript["6 total \:203a ", ""], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   "18a7c0d3-8c16-4d27-9912-2fe83066afb3"]][{
                    Key[{"SubstitutionLemma", 7}], 
                    Key["Proof"]}, 2]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "18a7c0d3-8c16-4d27-9912-2fe83066afb3"][{
                 Key[{"SubstitutionLemma", 7}], 
                 Key["Proof"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {{
                RGBColor[
                0.5098039215686274, 0.5098039215686274, 0.5098039215686274], 
                8}, ContextMenu -> {
                 MenuItem["Show 1 More Row at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    "18a7c0d3-8c16-4d27-9912-2fe83066afb3"}, "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    1]& , {All, "Proof"}]], MenuEvaluator -> Automatic], 
                 MenuItem["Show 5 More Rows at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    "18a7c0d3-8c16-4d27-9912-2fe83066afb3"}, "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    5]& , {All, "Proof"}]], MenuEvaluator -> Automatic], 
                 Delimiter, 
                 MenuItem["Show 1 Fewer Row at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    "18a7c0d3-8c16-4d27-9912-2fe83066afb3"}, "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, -1]& \
, {All, "Proof"}]], MenuEvaluator -> Automatic], 
                 MenuItem["Show 5 Fewer Rows at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    "18a7c0d3-8c16-4d27-9912-2fe83066afb3"}, "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, -5]& \
, {All, "Proof"}]], MenuEvaluator -> Automatic]}}, 
             Alignment -> {Left, Baseline}, Background -> GrayLevel[0.98]], 
            SpanFromLeft}, {
            Item[
             Pane[
              Annotation["SubstitutionLemma", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "18a7c0d3-8c16-4d27-9912-2fe83066afb3"][{
                 Key[{"SubstitutionLemma", 8}], 1}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["8"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "18a7c0d3-8c16-4d27-9912-2fe83066afb3"][{
                 Key[{"SubstitutionLemma", 8}], 2}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{
                   RowBox[{"gccd", "[", 
                    RowBox[{
                    RowBox[{"gccd", "[", 
                    RowBox[{
                    RowBox[{"gccd", "[", 
                    RowBox[{"b", ",", "a"}], "]"}], ",", "a"}], "]"}], ",", 
                    "t"}], "]"}], "\[Equal]", "t"}], FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "18a7c0d3-8c16-4d27-9912-2fe83066afb3"][{
                 Key[{"SubstitutionLemma", 8}], 
                 Key["Statement"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Input", 
                  Style[
                  "Input", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   "18a7c0d3-8c16-4d27-9912-2fe83066afb3"]][{
                    Key[{"SubstitutionLemma", 8}], 
                    Key["Proof"], 
                    Key["Input"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "18a7c0d3-8c16-4d27-9912-2fe83066afb3"][{
                 Key[{"SubstitutionLemma", 8}], 
                 Key["Proof"], 
                 Key["Input"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{179.20000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"SubstitutionLemma", 7}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{"SubstitutionLemma", 7}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   "18a7c0d3-8c16-4d27-9912-2fe83066afb3"]][{
                    Key[{"SubstitutionLemma", 8}], 
                    Key["Proof"], 
                    Key["Input"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "18a7c0d3-8c16-4d27-9912-2fe83066afb3"][{
                 Key[{"SubstitutionLemma", 8}], 
                 Key["Proof"], 
                 Key["Input"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
           SpanFromAbove, SpanFromAbove, SpanFromAbove, 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Position", 
                  Style[
                  "Position", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   "18a7c0d3-8c16-4d27-9912-2fe83066afb3"]][{
                    Key[{"SubstitutionLemma", 8}], 
                    Key["Proof"], 
                    Key["Position"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "18a7c0d3-8c16-4d27-9912-2fe83066afb3"][{
                 Key[{"SubstitutionLemma", 8}], 
                 Key["Proof"], 
                 Key["Position"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{179.20000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{1, 1, 1}, ShowStringCharacters -> False], 
                  Style[
                   Style[{1, 1, 1}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   "18a7c0d3-8c16-4d27-9912-2fe83066afb3"]][{
                    Key[{"SubstitutionLemma", 8}], 
                    Key["Proof"], 
                    Key["Position"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "18a7c0d3-8c16-4d27-9912-2fe83066afb3"][{
                 Key[{"SubstitutionLemma", 8}], 
                 Key["Proof"], 
                 Key["Position"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
           SpanFromAbove, SpanFromAbove, SpanFromAbove, 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Superscript["6 total \:203a ", ""], 
                  Style[
                   Superscript["6 total \:203a ", ""], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   "18a7c0d3-8c16-4d27-9912-2fe83066afb3"]][{
                    Key[{"SubstitutionLemma", 8}], 
                    Key["Proof"]}, 2]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "18a7c0d3-8c16-4d27-9912-2fe83066afb3"][{
                 Key[{"SubstitutionLemma", 8}], 
                 Key["Proof"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {{
                RGBColor[
                0.5098039215686274, 0.5098039215686274, 0.5098039215686274], 
                8}, ContextMenu -> {
                 MenuItem["Show 1 More Row at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    "18a7c0d3-8c16-4d27-9912-2fe83066afb3"}, "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    1]& , {All, "Proof"}]], MenuEvaluator -> Automatic], 
                 MenuItem["Show 5 More Rows at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    "18a7c0d3-8c16-4d27-9912-2fe83066afb3"}, "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    5]& , {All, "Proof"}]], MenuEvaluator -> Automatic], 
                 Delimiter, 
                 MenuItem["Show 1 Fewer Row at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    "18a7c0d3-8c16-4d27-9912-2fe83066afb3"}, "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, -1]& \
, {All, "Proof"}]], MenuEvaluator -> Automatic], 
                 MenuItem["Show 5 Fewer Rows at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    "18a7c0d3-8c16-4d27-9912-2fe83066afb3"}, "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, -5]& \
, {All, "Proof"}]], MenuEvaluator -> Automatic]}}, 
             Alignment -> {Left, Baseline}, Background -> GrayLevel[0.98]], 
            SpanFromLeft}, {
            Item[
             Pane[
              Annotation["SubstitutionLemma", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "18a7c0d3-8c16-4d27-9912-2fe83066afb3"][{
                 Key[{"SubstitutionLemma", 9}], 1}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["9"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "18a7c0d3-8c16-4d27-9912-2fe83066afb3"][{
                 Key[{"SubstitutionLemma", 9}], 2}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{
                   RowBox[{"gccd", "[", 
                    RowBox[{
                    RowBox[{"gccd", "[", 
                    RowBox[{"b", ",", 
                    RowBox[{"gccd", "[", 
                    RowBox[{"a", ",", "a"}], "]"}]}], "]"}], ",", "t"}], 
                    "]"}], "\[Equal]", "t"}], FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "18a7c0d3-8c16-4d27-9912-2fe83066afb3"][{
                 Key[{"SubstitutionLemma", 9}], 
                 Key["Statement"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Input", 
                  Style[
                  "Input", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   "18a7c0d3-8c16-4d27-9912-2fe83066afb3"]][{
                    Key[{"SubstitutionLemma", 9}], 
                    Key["Proof"], 
                    Key["Input"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "18a7c0d3-8c16-4d27-9912-2fe83066afb3"][{
                 Key[{"SubstitutionLemma", 9}], 
                 Key["Proof"], 
                 Key["Input"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{179.20000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"SubstitutionLemma", 8}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{"SubstitutionLemma", 8}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   "18a7c0d3-8c16-4d27-9912-2fe83066afb3"]][{
                    Key[{"SubstitutionLemma", 9}], 
                    Key["Proof"], 
                    Key["Input"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "18a7c0d3-8c16-4d27-9912-2fe83066afb3"][{
                 Key[{"SubstitutionLemma", 9}], 
                 Key["Proof"], 
                 Key["Input"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
           SpanFromAbove, SpanFromAbove, SpanFromAbove, 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Position", 
                  Style[
                  "Position", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   "18a7c0d3-8c16-4d27-9912-2fe83066afb3"]][{
                    Key[{"SubstitutionLemma", 9}], 
                    Key["Proof"], 
                    Key["Position"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "18a7c0d3-8c16-4d27-9912-2fe83066afb3"][{
                 Key[{"SubstitutionLemma", 9}], 
                 Key["Proof"], 
                 Key["Position"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{179.20000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{1, 1}, ShowStringCharacters -> False], 
                  Style[
                   Style[{1, 1}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   "18a7c0d3-8c16-4d27-9912-2fe83066afb3"]][{
                    Key[{"SubstitutionLemma", 9}], 
                    Key["Proof"], 
                    Key["Position"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "18a7c0d3-8c16-4d27-9912-2fe83066afb3"][{
                 Key[{"SubstitutionLemma", 9}], 
                 Key["Proof"], 
                 Key["Position"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
           SpanFromAbove, SpanFromAbove, SpanFromAbove, 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Superscript["6 total \:203a ", ""], 
                  Style[
                   Superscript["6 total \:203a ", ""], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   "18a7c0d3-8c16-4d27-9912-2fe83066afb3"]][{
                    Key[{"SubstitutionLemma", 9}], 
                    Key["Proof"]}, 2]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "18a7c0d3-8c16-4d27-9912-2fe83066afb3"][{
                 Key[{"SubstitutionLemma", 9}], 
                 Key["Proof"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {{
                RGBColor[
                0.5098039215686274, 0.5098039215686274, 0.5098039215686274], 
                8}, ContextMenu -> {
                 MenuItem["Show 1 More Row at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    "18a7c0d3-8c16-4d27-9912-2fe83066afb3"}, "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    1]& , {All, "Proof"}]], MenuEvaluator -> Automatic], 
                 MenuItem["Show 5 More Rows at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    "18a7c0d3-8c16-4d27-9912-2fe83066afb3"}, "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    5]& , {All, "Proof"}]], MenuEvaluator -> Automatic], 
                 Delimiter, 
                 MenuItem["Show 1 Fewer Row at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    "18a7c0d3-8c16-4d27-9912-2fe83066afb3"}, "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, -1]& \
, {All, "Proof"}]], MenuEvaluator -> Automatic], 
                 MenuItem["Show 5 Fewer Rows at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    "18a7c0d3-8c16-4d27-9912-2fe83066afb3"}, "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, -5]& \
, {All, "Proof"}]], MenuEvaluator -> Automatic]}}, 
             Alignment -> {Left, Baseline}, Background -> GrayLevel[0.98]], 
            SpanFromLeft}, {
            Item[
             Pane[
              Annotation["SubstitutionLemma", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "18a7c0d3-8c16-4d27-9912-2fe83066afb3"][{
                 Key[{"SubstitutionLemma", 10}], 1}, "Item", False], "Mouse"],
               ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["10"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "18a7c0d3-8c16-4d27-9912-2fe83066afb3"][{
                 Key[{"SubstitutionLemma", 10}], 2}, "Item", False], "Mouse"],
               ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{
                   RowBox[{"gccd", "[", 
                    RowBox[{"b", ",", 
                    RowBox[{"gccd", "[", 
                    RowBox[{
                    RowBox[{"gccd", "[", 
                    RowBox[{"a", ",", "a"}], "]"}], ",", "t"}], "]"}]}], 
                    "]"}], "\[Equal]", "t"}], FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "18a7c0d3-8c16-4d27-9912-2fe83066afb3"][{
                 Key[{"SubstitutionLemma", 10}], 
                 Key["Statement"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Input", 
                  Style[
                  "Input", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   "18a7c0d3-8c16-4d27-9912-2fe83066afb3"]][{
                    Key[{"SubstitutionLemma", 10}], 
                    Key["Proof"], 
                    Key["Input"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "18a7c0d3-8c16-4d27-9912-2fe83066afb3"][{
                 Key[{"SubstitutionLemma", 10}], 
                 Key["Proof"], 
                 Key["Input"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{179.20000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"SubstitutionLemma", 9}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{"SubstitutionLemma", 9}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   "18a7c0d3-8c16-4d27-9912-2fe83066afb3"]][{
                    Key[{"SubstitutionLemma", 10}], 
                    Key["Proof"], 
                    Key["Input"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "18a7c0d3-8c16-4d27-9912-2fe83066afb3"][{
                 Key[{"SubstitutionLemma", 10}], 
                 Key["Proof"], 
                 Key["Input"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
           SpanFromAbove, SpanFromAbove, SpanFromAbove, 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Position", 
                  Style[
                  "Position", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   "18a7c0d3-8c16-4d27-9912-2fe83066afb3"]][{
                    Key[{"SubstitutionLemma", 10}], 
                    Key["Proof"], 
                    Key["Position"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "18a7c0d3-8c16-4d27-9912-2fe83066afb3"][{
                 Key[{"SubstitutionLemma", 10}], 
                 Key["Proof"], 
                 Key["Position"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{179.20000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["1"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "18a7c0d3-8c16-4d27-9912-2fe83066afb3"][{
                 Key[{"SubstitutionLemma", 10}], 
                 Key["Proof"], 
                 Key["Position"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
           SpanFromAbove, SpanFromAbove, SpanFromAbove, 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Superscript["6 total \:203a ", ""], 
                  Style[
                   Superscript["6 total \:203a ", ""], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   "18a7c0d3-8c16-4d27-9912-2fe83066afb3"]][{
                    Key[{"SubstitutionLemma", 10}], 
                    Key["Proof"]}, 2]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "18a7c0d3-8c16-4d27-9912-2fe83066afb3"][{
                 Key[{"SubstitutionLemma", 10}], 
                 Key["Proof"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {{
                RGBColor[
                0.5098039215686274, 0.5098039215686274, 0.5098039215686274], 
                8}, ContextMenu -> {
                 MenuItem["Show 1 More Row at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    "18a7c0d3-8c16-4d27-9912-2fe83066afb3"}, "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    1]& , {All, "Proof"}]], MenuEvaluator -> Automatic], 
                 MenuItem["Show 5 More Rows at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    "18a7c0d3-8c16-4d27-9912-2fe83066afb3"}, "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    5]& , {All, "Proof"}]], MenuEvaluator -> Automatic], 
                 Delimiter, 
                 MenuItem["Show 1 Fewer Row at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    "18a7c0d3-8c16-4d27-9912-2fe83066afb3"}, "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, -1]& \
, {All, "Proof"}]], MenuEvaluator -> Automatic], 
                 MenuItem["Show 5 Fewer Rows at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    "18a7c0d3-8c16-4d27-9912-2fe83066afb3"}, "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, -5]& \
, {All, "Proof"}]], MenuEvaluator -> Automatic]}}, 
             Alignment -> {Left, Baseline}, Background -> GrayLevel[0.98]], 
            SpanFromLeft}, {
            Item[
             Pane[
              Annotation["SubstitutionLemma", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "18a7c0d3-8c16-4d27-9912-2fe83066afb3"][{
                 Key[{"SubstitutionLemma", 11}], 1}, "Item", False], "Mouse"],
               ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["11"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "18a7c0d3-8c16-4d27-9912-2fe83066afb3"][{
                 Key[{"SubstitutionLemma", 11}], 2}, "Item", False], "Mouse"],
               ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{
                   RowBox[{"gccd", "[", 
                    RowBox[{
                    RowBox[{"gccd", "[", 
                    RowBox[{
                    RowBox[{"gccd", "[", 
                    RowBox[{"a", ",", "a"}], "]"}], ",", "t"}], "]"}], ",", 
                    "b"}], "]"}], "\[Equal]", "t"}], FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "18a7c0d3-8c16-4d27-9912-2fe83066afb3"][{
                 Key[{"SubstitutionLemma", 11}], 
                 Key["Statement"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Input", 
                  Style[
                  "Input", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   "18a7c0d3-8c16-4d27-9912-2fe83066afb3"]][{
                    Key[{"SubstitutionLemma", 11}], 
                    Key["Proof"], 
                    Key["Input"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "18a7c0d3-8c16-4d27-9912-2fe83066afb3"][{
                 Key[{"SubstitutionLemma", 11}], 
                 Key["Proof"], 
                 Key["Input"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{179.20000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"SubstitutionLemma", 10}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{"SubstitutionLemma", 10}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   "18a7c0d3-8c16-4d27-9912-2fe83066afb3"]][{
                    Key[{"SubstitutionLemma", 11}], 
                    Key["Proof"], 
                    Key["Input"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "18a7c0d3-8c16-4d27-9912-2fe83066afb3"][{
                 Key[{"SubstitutionLemma", 11}], 
                 Key["Proof"], 
                 Key["Input"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
           SpanFromAbove, SpanFromAbove, SpanFromAbove, 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Position", 
                  Style[
                  "Position", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   "18a7c0d3-8c16-4d27-9912-2fe83066afb3"]][{
                    Key[{"SubstitutionLemma", 11}], 
                    Key["Proof"], 
                    Key["Position"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "18a7c0d3-8c16-4d27-9912-2fe83066afb3"][{
                 Key[{"SubstitutionLemma", 11}], 
                 Key["Proof"], 
                 Key["Position"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{179.20000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["1"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "18a7c0d3-8c16-4d27-9912-2fe83066afb3"][{
                 Key[{"SubstitutionLemma", 11}], 
                 Key["Proof"], 
                 Key["Position"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
           SpanFromAbove, SpanFromAbove, SpanFromAbove, 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Superscript["6 total \:203a ", ""], 
                  Style[
                   Superscript["6 total \:203a ", ""], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   "18a7c0d3-8c16-4d27-9912-2fe83066afb3"]][{
                    Key[{"SubstitutionLemma", 11}], 
                    Key["Proof"]}, 2]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "18a7c0d3-8c16-4d27-9912-2fe83066afb3"][{
                 Key[{"SubstitutionLemma", 11}], 
                 Key["Proof"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {{
                RGBColor[
                0.5098039215686274, 0.5098039215686274, 0.5098039215686274], 
                8}, ContextMenu -> {
                 MenuItem["Show 1 More Row at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    "18a7c0d3-8c16-4d27-9912-2fe83066afb3"}, "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    1]& , {All, "Proof"}]], MenuEvaluator -> Automatic], 
                 MenuItem["Show 5 More Rows at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    "18a7c0d3-8c16-4d27-9912-2fe83066afb3"}, "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    5]& , {All, "Proof"}]], MenuEvaluator -> Automatic], 
                 Delimiter, 
                 MenuItem["Show 1 Fewer Row at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    "18a7c0d3-8c16-4d27-9912-2fe83066afb3"}, "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, -1]& \
, {All, "Proof"}]], MenuEvaluator -> Automatic], 
                 MenuItem["Show 5 Fewer Rows at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    "18a7c0d3-8c16-4d27-9912-2fe83066afb3"}, "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, -5]& \
, {All, "Proof"}]], MenuEvaluator -> Automatic]}}, 
             Alignment -> {Left, Baseline}, Background -> GrayLevel[0.98]], 
            SpanFromLeft}, {
            Item[
             Pane[
              Annotation["SubstitutionLemma", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "18a7c0d3-8c16-4d27-9912-2fe83066afb3"][{
                 Key[{"SubstitutionLemma", 12}], 1}, "Item", False], "Mouse"],
               ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["12"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "18a7c0d3-8c16-4d27-9912-2fe83066afb3"][{
                 Key[{"SubstitutionLemma", 12}], 2}, "Item", False], "Mouse"],
               ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{
                   RowBox[{"gccd", "[", 
                    RowBox[{
                    RowBox[{"gccd", "[", 
                    RowBox[{"a", ",", "t"}], "]"}], ",", "b"}], "]"}], 
                   "\[Equal]", "t"}], FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "18a7c0d3-8c16-4d27-9912-2fe83066afb3"][{
                 Key[{"SubstitutionLemma", 12}], 
                 Key["Statement"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Input", 
                  Style[
                  "Input", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   "18a7c0d3-8c16-4d27-9912-2fe83066afb3"]][{
                    Key[{"SubstitutionLemma", 12}], 
                    Key["Proof"], 
                    Key["Input"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "18a7c0d3-8c16-4d27-9912-2fe83066afb3"][{
                 Key[{"SubstitutionLemma", 12}], 
                 Key["Proof"], 
                 Key["Input"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{179.20000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"SubstitutionLemma", 11}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{"SubstitutionLemma", 11}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   "18a7c0d3-8c16-4d27-9912-2fe83066afb3"]][{
                    Key[{"SubstitutionLemma", 12}], 
                    Key["Proof"], 
                    Key["Input"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "18a7c0d3-8c16-4d27-9912-2fe83066afb3"][{
                 Key[{"SubstitutionLemma", 12}], 
                 Key["Proof"], 
                 Key["Input"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
           SpanFromAbove, SpanFromAbove, SpanFromAbove, 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Position", 
                  Style[
                  "Position", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   "18a7c0d3-8c16-4d27-9912-2fe83066afb3"]][{
                    Key[{"SubstitutionLemma", 12}], 
                    Key["Proof"], 
                    Key["Position"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "18a7c0d3-8c16-4d27-9912-2fe83066afb3"][{
                 Key[{"SubstitutionLemma", 12}], 
                 Key["Proof"], 
                 Key["Position"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{179.20000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{1, 1, 1}, ShowStringCharacters -> False], 
                  Style[
                   Style[{1, 1, 1}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   "18a7c0d3-8c16-4d27-9912-2fe83066afb3"]][{
                    Key[{"SubstitutionLemma", 12}], 
                    Key["Proof"], 
                    Key["Position"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "18a7c0d3-8c16-4d27-9912-2fe83066afb3"][{
                 Key[{"SubstitutionLemma", 12}], 
                 Key["Proof"], 
                 Key["Position"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
           SpanFromAbove, SpanFromAbove, SpanFromAbove, 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Superscript["6 total \:203a ", ""], 
                  Style[
                   Superscript["6 total \:203a ", ""], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   "18a7c0d3-8c16-4d27-9912-2fe83066afb3"]][{
                    Key[{"SubstitutionLemma", 12}], 
                    Key["Proof"]}, 2]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "18a7c0d3-8c16-4d27-9912-2fe83066afb3"][{
                 Key[{"SubstitutionLemma", 12}], 
                 Key["Proof"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {{
                RGBColor[
                0.5098039215686274, 0.5098039215686274, 0.5098039215686274], 
                8}, ContextMenu -> {
                 MenuItem["Show 1 More Row at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    "18a7c0d3-8c16-4d27-9912-2fe83066afb3"}, "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    1]& , {All, "Proof"}]], MenuEvaluator -> Automatic], 
                 MenuItem["Show 5 More Rows at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    "18a7c0d3-8c16-4d27-9912-2fe83066afb3"}, "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    5]& , {All, "Proof"}]], MenuEvaluator -> Automatic], 
                 Delimiter, 
                 MenuItem["Show 1 Fewer Row at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    "18a7c0d3-8c16-4d27-9912-2fe83066afb3"}, "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, -1]& \
, {All, "Proof"}]], MenuEvaluator -> Automatic], 
                 MenuItem["Show 5 Fewer Rows at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    "18a7c0d3-8c16-4d27-9912-2fe83066afb3"}, "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, -5]& \
, {All, "Proof"}]], MenuEvaluator -> Automatic]}}, 
             Alignment -> {Left, Baseline}, Background -> GrayLevel[0.98]], 
            SpanFromLeft}, {
            Item[
             Pane[
              Annotation["SubstitutionLemma", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "18a7c0d3-8c16-4d27-9912-2fe83066afb3"][{
                 Key[{"SubstitutionLemma", 13}], 1}, "Item", False], "Mouse"],
               ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["13"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "18a7c0d3-8c16-4d27-9912-2fe83066afb3"][{
                 Key[{"SubstitutionLemma", 13}], 2}, "Item", False], "Mouse"],
               ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{
                   RowBox[{"gccd", "[", 
                    RowBox[{"t", ",", "b"}], "]"}], "\[Equal]", "t"}], 
                 FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "18a7c0d3-8c16-4d27-9912-2fe83066afb3"][{
                 Key[{"SubstitutionLemma", 13}], 
                 Key["Statement"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Input", 
                  Style[
                  "Input", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   "18a7c0d3-8c16-4d27-9912-2fe83066afb3"]][{
                    Key[{"SubstitutionLemma", 13}], 
                    Key["Proof"], 
                    Key["Input"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "18a7c0d3-8c16-4d27-9912-2fe83066afb3"][{
                 Key[{"SubstitutionLemma", 13}], 
                 Key["Proof"], 
                 Key["Input"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{179.20000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"SubstitutionLemma", 12}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{"SubstitutionLemma", 12}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   "18a7c0d3-8c16-4d27-9912-2fe83066afb3"]][{
                    Key[{"SubstitutionLemma", 13}], 
                    Key["Proof"], 
                    Key["Input"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "18a7c0d3-8c16-4d27-9912-2fe83066afb3"][{
                 Key[{"SubstitutionLemma", 13}], 
                 Key["Proof"], 
                 Key["Input"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
           SpanFromAbove, SpanFromAbove, SpanFromAbove, 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Position", 
                  Style[
                  "Position", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   "18a7c0d3-8c16-4d27-9912-2fe83066afb3"]][{
                    Key[{"SubstitutionLemma", 13}], 
                    Key["Proof"], 
                    Key["Position"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "18a7c0d3-8c16-4d27-9912-2fe83066afb3"][{
                 Key[{"SubstitutionLemma", 13}], 
                 Key["Proof"], 
                 Key["Position"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{179.20000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{1, 1}, ShowStringCharacters -> False], 
                  Style[
                   Style[{1, 1}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   "18a7c0d3-8c16-4d27-9912-2fe83066afb3"]][{
                    Key[{"SubstitutionLemma", 13}], 
                    Key["Proof"], 
                    Key["Position"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "18a7c0d3-8c16-4d27-9912-2fe83066afb3"][{
                 Key[{"SubstitutionLemma", 13}], 
                 Key["Proof"], 
                 Key["Position"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
           SpanFromAbove, SpanFromAbove, SpanFromAbove, 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Superscript["6 total \:203a ", ""], 
                  Style[
                   Superscript["6 total \:203a ", ""], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   "18a7c0d3-8c16-4d27-9912-2fe83066afb3"]][{
                    Key[{"SubstitutionLemma", 13}], 
                    Key["Proof"]}, 2]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "18a7c0d3-8c16-4d27-9912-2fe83066afb3"][{
                 Key[{"SubstitutionLemma", 13}], 
                 Key["Proof"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {{
                RGBColor[
                0.5098039215686274, 0.5098039215686274, 0.5098039215686274], 
                8}, ContextMenu -> {
                 MenuItem["Show 1 More Row at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    "18a7c0d3-8c16-4d27-9912-2fe83066afb3"}, "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    1]& , {All, "Proof"}]], MenuEvaluator -> Automatic], 
                 MenuItem["Show 5 More Rows at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    "18a7c0d3-8c16-4d27-9912-2fe83066afb3"}, "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    5]& , {All, "Proof"}]], MenuEvaluator -> Automatic], 
                 Delimiter, 
                 MenuItem["Show 1 Fewer Row at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    "18a7c0d3-8c16-4d27-9912-2fe83066afb3"}, "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, -1]& \
, {All, "Proof"}]], MenuEvaluator -> Automatic], 
                 MenuItem["Show 5 Fewer Rows at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    "18a7c0d3-8c16-4d27-9912-2fe83066afb3"}, "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, -5]& \
, {All, "Proof"}]], MenuEvaluator -> Automatic]}}, 
             Alignment -> {Left, Baseline}, Background -> GrayLevel[0.98]], 
            SpanFromLeft}, {
            Item[
             Pane[
              Annotation["SubstitutionLemma", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "18a7c0d3-8c16-4d27-9912-2fe83066afb3"][{
                 Key[{"SubstitutionLemma", 14}], 1}, "Item", False], "Mouse"],
               ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["14"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "18a7c0d3-8c16-4d27-9912-2fe83066afb3"][{
                 Key[{"SubstitutionLemma", 14}], 2}, "Item", False], "Mouse"],
               ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{
                   RowBox[{"gccd", "[", 
                    RowBox[{"b", ",", "t"}], "]"}], "\[Equal]", "t"}], 
                 FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "18a7c0d3-8c16-4d27-9912-2fe83066afb3"][{
                 Key[{"SubstitutionLemma", 14}], 
                 Key["Statement"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Input", 
                  Style[
                  "Input", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   "18a7c0d3-8c16-4d27-9912-2fe83066afb3"]][{
                    Key[{"SubstitutionLemma", 14}], 
                    Key["Proof"], 
                    Key["Input"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "18a7c0d3-8c16-4d27-9912-2fe83066afb3"][{
                 Key[{"SubstitutionLemma", 14}], 
                 Key["Proof"], 
                 Key["Input"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{179.20000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"SubstitutionLemma", 13}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{"SubstitutionLemma", 13}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   "18a7c0d3-8c16-4d27-9912-2fe83066afb3"]][{
                    Key[{"SubstitutionLemma", 14}], 
                    Key["Proof"], 
                    Key["Input"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "18a7c0d3-8c16-4d27-9912-2fe83066afb3"][{
                 Key[{"SubstitutionLemma", 14}], 
                 Key["Proof"], 
                 Key["Input"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
           SpanFromAbove, SpanFromAbove, SpanFromAbove, 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Position", 
                  Style[
                  "Position", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   "18a7c0d3-8c16-4d27-9912-2fe83066afb3"]][{
                    Key[{"SubstitutionLemma", 14}], 
                    Key["Proof"], 
                    Key["Position"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "18a7c0d3-8c16-4d27-9912-2fe83066afb3"][{
                 Key[{"SubstitutionLemma", 14}], 
                 Key["Proof"], 
                 Key["Position"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{179.20000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["1"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "18a7c0d3-8c16-4d27-9912-2fe83066afb3"][{
                 Key[{"SubstitutionLemma", 14}], 
                 Key["Proof"], 
                 Key["Position"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
           SpanFromAbove, SpanFromAbove, SpanFromAbove, 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Superscript["6 total \:203a ", ""], 
                  Style[
                   Superscript["6 total \:203a ", ""], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   "18a7c0d3-8c16-4d27-9912-2fe83066afb3"]][{
                    Key[{"SubstitutionLemma", 14}], 
                    Key["Proof"]}, 2]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "18a7c0d3-8c16-4d27-9912-2fe83066afb3"][{
                 Key[{"SubstitutionLemma", 14}], 
                 Key["Proof"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {{
                RGBColor[
                0.5098039215686274, 0.5098039215686274, 0.5098039215686274], 
                8}, ContextMenu -> {
                 MenuItem["Show 1 More Row at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    "18a7c0d3-8c16-4d27-9912-2fe83066afb3"}, "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    1]& , {All, "Proof"}]], MenuEvaluator -> Automatic], 
                 MenuItem["Show 5 More Rows at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    "18a7c0d3-8c16-4d27-9912-2fe83066afb3"}, "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    5]& , {All, "Proof"}]], MenuEvaluator -> Automatic], 
                 Delimiter, 
                 MenuItem["Show 1 Fewer Row at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    "18a7c0d3-8c16-4d27-9912-2fe83066afb3"}, "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, -1]& \
, {All, "Proof"}]], MenuEvaluator -> Automatic], 
                 MenuItem["Show 5 Fewer Rows at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    "18a7c0d3-8c16-4d27-9912-2fe83066afb3"}, "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, -5]& \
, {All, "Proof"}]], MenuEvaluator -> Automatic]}}, 
             Alignment -> {Left, Baseline}, Background -> GrayLevel[0.98]], 
            SpanFromLeft}, {
            Item[
             Pane[
              Annotation["Conclusion", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "18a7c0d3-8c16-4d27-9912-2fe83066afb3"][{
                 Key[{"Conclusion", 1}], 1}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["1"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "18a7c0d3-8c16-4d27-9912-2fe83066afb3"][{
                 Key[{"Conclusion", 1}], 2}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "18a7c0d3-8c16-4d27-9912-2fe83066afb3"][{
                 Key[{"Conclusion", 1}], 
                 Key["Statement"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Input", 
                  Style[
                  "Input", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   "18a7c0d3-8c16-4d27-9912-2fe83066afb3"]][{
                    Key[{"Conclusion", 1}], 
                    Key["Proof"], 
                    Key["Input"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "18a7c0d3-8c16-4d27-9912-2fe83066afb3"][{
                 Key[{"Conclusion", 1}], 
                 Key["Proof"], 
                 Key["Input"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{179.20000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"SubstitutionLemma", 14}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{"SubstitutionLemma", 14}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   "18a7c0d3-8c16-4d27-9912-2fe83066afb3"]][{
                    Key[{"Conclusion", 1}], 
                    Key["Proof"], 
                    Key["Input"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "18a7c0d3-8c16-4d27-9912-2fe83066afb3"][{
                 Key[{"Conclusion", 1}], 
                 Key["Proof"], 
                 Key["Input"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
           SpanFromAbove, SpanFromAbove, SpanFromAbove, 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Position", 
                  Style[
                  "Position", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   "18a7c0d3-8c16-4d27-9912-2fe83066afb3"]][{
                    Key[{"Conclusion", 1}], 
                    Key["Proof"], 
                    Key["Position"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "18a7c0d3-8c16-4d27-9912-2fe83066afb3"][{
                 Key[{"Conclusion", 1}], 
                 Key["Proof"], 
                 Key["Position"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{179.20000000000002`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "18a7c0d3-8c16-4d27-9912-2fe83066afb3"][{
                 Key[{"Conclusion", 1}], 
                 Key["Proof"], 
                 Key["Position"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
           SpanFromAbove, SpanFromAbove, SpanFromAbove, 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Superscript["6 total \:203a ", ""], 
                  Style[
                   Superscript["6 total \:203a ", ""], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                   "18a7c0d3-8c16-4d27-9912-2fe83066afb3"]][{
                    Key[{"Conclusion", 1}], 
                    Key["Proof"]}, 2]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "18a7c0d3-8c16-4d27-9912-2fe83066afb3"][{
                 Key[{"Conclusion", 1}], 
                 Key["Proof"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {{
                RGBColor[
                0.5098039215686274, 0.5098039215686274, 0.5098039215686274], 
                8}, ContextMenu -> {
                 MenuItem["Show 1 More Row at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    "18a7c0d3-8c16-4d27-9912-2fe83066afb3"}, "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    1]& , {All, "Proof"}]], MenuEvaluator -> Automatic], 
                 MenuItem["Show 5 More Rows at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    "18a7c0d3-8c16-4d27-9912-2fe83066afb3"}, "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, 
                    5]& , {All, "Proof"}]], MenuEvaluator -> Automatic], 
                 Delimiter, 
                 MenuItem["Show 1 Fewer Row at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    "18a7c0d3-8c16-4d27-9912-2fe83066afb3"}, "Rows", 
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, -1]& \
, {All, "Proof"}]], MenuEvaluator -> Automatic], 
                 MenuItem["Show 5 Fewer Rows at This Level", 
                  KernelExecute[
                   
                   TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    "18a7c0d3-8c16-4d27-9912-2fe83066afb3"}, "Rows", 
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimitBy[#, -5]& \
, {All, "Proof"}]], MenuEvaluator -> Automatic]}}, 
             Alignment -> {Left, Baseline}, Background -> GrayLevel[0.98]], 
            SpanFromLeft}, {
            Item[
             Deploy[
              Pane[
               Row[{
                 Spacer[2], 
                 Style[
                  Row[{
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + (-10) 
                    If[True, 22, 1], {1, 22 - -10 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    "18a7c0d3-8c16-4d27-9912-2fe83066afb3"], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + (-10) 
                    If[False, 22, 1], {1, 22 - -10 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    "18a7c0d3-8c16-4d27-9912-2fe83066afb3"], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], " ", 
                    Style[
                    Mouseover[
                    Style[
                    Row[{"rows ", 13, "\[Dash]", 22, " of ", 
                    Style[22, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]], 
                    Style[
                    Row[{"rows ", 13, "\[Dash]", 22, " of ", 
                    Style[22, FontWeight -> Bold]}], FontSize -> 
                    9.333333333333332, FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]]], ContextMenu -> {
                    MenuItem["Hide", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    "18a7c0d3-8c16-4d27-9912-2fe83066afb3"}, "Rows", 1, {}]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 10 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    "18a7c0d3-8c16-4d27-9912-2fe83066afb3"}, "Rows", 10, {}]],
                     MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 30 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    "18a7c0d3-8c16-4d27-9912-2fe83066afb3"}, "Rows", 30, {}]],
                     MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 100 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    "18a7c0d3-8c16-4d27-9912-2fe83066afb3"}, "Rows", 
                    100, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show All", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    "18a7c0d3-8c16-4d27-9912-2fe83066afb3"}, "Rows", 
                    100000000, {}]], MenuEvaluator -> Automatic]}], " ", 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    10 If[False, 22, 1], {1, 22 - 10 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    "18a7c0d3-8c16-4d27-9912-2fe83066afb3"], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35], BaseStyle -> 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    10 If[True, 22, 1], {1, 22 - 10 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    "18a7c0d3-8c16-4d27-9912-2fe83066afb3"], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$]], 
                    Appearance -> None]}], ContextMenu -> {}]}], 
               ImageMargins -> {{0, -1}, {-1, 1}}]], Background -> 
             RGBColor[
              0.9764705882352941, 0.9764705882352941, 0.9764705882352941], 
             Alignment -> {Left, Top}], SpanFromLeft, SpanFromLeft, 
            SpanFromLeft, SpanFromLeft}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                "18a7c0d3-8c16-4d27-9912-2fe83066afb3", {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{
                   TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = {
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Show ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    "18a7c0d3-8c16-4d27-9912-2fe83066afb3"]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Hide ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    "18a7c0d3-8c16-4d27-9912-2fe83066afb3"]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    "18a7c0d3-8c16-4d27-9912-2fe83066afb3"][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    "18a7c0d3-8c16-4d27-9912-2fe83066afb3"][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    "18a7c0d3-8c16-4d27-9912-2fe83066afb3"][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              "18a7c0d3-8c16-4d27-9912-2fe83066afb3"][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{801., {400.634033203125, 406.365966796875}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{801., {400.634033203125, 406.365966796875}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.8793763323960285`*^9, 3.87937635254206*^9}, 
   3.8793813519545326`*^9},
 CellLabel->"Out[49]=",ExpressionUUID->"eeae0081-c781-4011-b165-abe37b7c47a2"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{"axiom1", "=", 
  RowBox[{"{", 
   RowBox[{"ForAll", "[", 
    RowBox[{
     RowBox[{"{", "a", "}"}], ",", 
     RowBox[{
      RowBox[{"gccd", "[", 
       RowBox[{"a", ",", "a"}], "]"}], "==", "a"}]}], "]"}], "}"}]}], "\n", 
 RowBox[{"axiom2", "=", 
  RowBox[{"{", 
   RowBox[{"ForAll", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a", ",", "b"}], "}"}], ",", 
     RowBox[{
      RowBox[{"gccd", "[", 
       RowBox[{"a", ",", "b"}], "]"}], "==", 
      RowBox[{"gccd", "[", 
       RowBox[{"b", ",", "a"}], "]"}]}]}], "]"}], "}"}]}], "\n", 
 RowBox[{"axiom3", "=", 
  RowBox[{"{", 
   RowBox[{"ForAll", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a", ",", "b", ",", "c"}], "}"}], ",", 
     RowBox[{
      RowBox[{"gccd", "[", 
       RowBox[{"a", ",", 
        RowBox[{"gccd", "[", 
         RowBox[{"b", ",", "c"}], "]"}]}], "]"}], "==", 
      RowBox[{"gccd", "[", 
       RowBox[{
        RowBox[{"gccd", "[", 
         RowBox[{"a", ",", "b"}], "]"}], ",", "c"}], "]"}]}]}], "]"}], 
   "}"}]}], "\n", 
 RowBox[{"hyp1", "=", 
  RowBox[{"{", 
   RowBox[{"d", "==", 
    RowBox[{"gccd", "[", 
     RowBox[{"a", ",", "b"}], "]"}]}], "}"}]}], "\n", 
 RowBox[{"hyp2", "=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"gccd", "[", 
     RowBox[{"a", ",", "t"}], "]"}], "==", "t"}], "}"}]}], "\n", 
 RowBox[{"hyp3", "=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"gccd", "[", 
     RowBox[{"b", ",", "t"}], "]"}], "==", "t"}], "}"}]}], "\n", 
 RowBox[{"axioms", "=", 
  RowBox[{"Union", "[", 
   RowBox[{"axiom1", ",", "axiom2", ",", "axiom3"}], "]"}]}], "\n", 
 RowBox[{"hypotheses", "=", 
  RowBox[{"Union", "[", 
   RowBox[{"hyp1", ",", "hyp2", ",", "hyp3"}], "]"}]}], "\n", 
 RowBox[{"proof", "=", 
  RowBox[{"FindEquationalProof", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"gccd", "[", 
      RowBox[{"d", ",", "t"}], "]"}], "==", "t"}], ",", 
    RowBox[{"Union", "[", 
     RowBox[{"axioms", ",", "hypotheses"}], "]"}]}], "]"}]}]}], "Input",Expres\
sionUUID->"42f12de3-c1a9-4e2c-9c80-949274107d03"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"axiomPythagoras", " ", "=", " ", 
    RowBox[{"{", 
     RowBox[{"ForAll", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"hyp", ",", "opp", ",", "adj"}], "}"}], ",", 
       RowBox[{
        SuperscriptBox["hyp", "2"], "==", 
        RowBox[{
         SuperscriptBox["opp", "2"], "+", 
         SuperscriptBox["adj", "2"]}]}]}], "]"}], "}"}]}], 
   "\[IndentingNewLine]", 
   RowBox[{"axiomSin", " ", "=", " ", 
    RowBox[{"{", 
     RowBox[{"ForAll", "[", 
      RowBox[{
       RowBox[{"{", "a", "}"}], ",", 
       RowBox[{
        RowBox[{"sin", "[", "a", "]"}], "==", 
        FractionBox["opp", "hyp"]}]}], "]"}], "}"}]}], "\[IndentingNewLine]", 
   RowBox[{"axiomSin2", "=", " ", 
    RowBox[{"{", 
     RowBox[{"ForAll", "[", 
      RowBox[{
       RowBox[{"{", "a", "}"}], ",", 
       RowBox[{
        SuperscriptBox[
         RowBox[{"sin", "[", "a", "]"}], "2"], "==", 
        FractionBox[
         SuperscriptBox["opp", "2"], 
         SuperscriptBox["hyp", "2"]]}]}], "]"}], "}"}]}], 
   "\[IndentingNewLine]", 
   RowBox[{"axiomCos", " ", "=", " ", 
    RowBox[{"{", 
     RowBox[{"ForAll", "[", 
      RowBox[{
       RowBox[{"{", "a", "}"}], ",", 
       RowBox[{
        RowBox[{"cos", "[", "a", "]"}], "==", 
        FractionBox["adj", "hyp"]}]}], "]"}], "}"}]}], "\[IndentingNewLine]", 
   RowBox[{"axiomCos2", " ", "=", " ", 
    RowBox[{"{", 
     RowBox[{"ForAll", "[", 
      RowBox[{
       RowBox[{"{", "a", "}"}], ",", 
       RowBox[{
        SuperscriptBox[
         RowBox[{"cos", "[", "a", "]"}], "2"], "==", 
        FractionBox[
         SuperscriptBox["adj", "2"], 
         SuperscriptBox["hyp", "2"]]}]}], "]"}], "}"}]}], 
   "\[IndentingNewLine]", 
   RowBox[{"axiomX", " ", "=", " ", 
    RowBox[{"{", 
     RowBox[{"ForAll", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"alpha", ",", "a"}], "}"}], ",", 
       RowBox[{"alpha", "==", 
        RowBox[{"cos", "[", "a", "]"}]}]}], "]"}], "}"}]}], 
   "\[IndentingNewLine]", 
   RowBox[{"axiomY", " ", "=", " ", 
    RowBox[{"{", 
     RowBox[{"ForAll", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"beta", ",", "a"}], "}"}], ",", 
       RowBox[{"beta", "==", 
        RowBox[{"sin", "[", "a", "]"}]}]}], "]"}], "}"}]}], 
   "\[IndentingNewLine]", 
   RowBox[{"axiomss", "=", 
    RowBox[{"Union", "[", 
     RowBox[{
     "axiomPythagoras", ",", "axiomSin", ",", "axiomCos", ",", "axiomSin2", 
      ",", "axiomCos2"}], "]"}]}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"proof2", "=", 
    RowBox[{"FindEquationalProof", "[", 
     RowBox[{
      RowBox[{
       RowBox[{
        SuperscriptBox[
         RowBox[{"sin", "[", "a", "]"}], "2"], "+", 
        SuperscriptBox[
         RowBox[{"cos", "[", "a", "]"}], "2"]}], "==", "1"}], ",", 
      "axiomss"}], "]"}]}]}]}]], "Input",
 CellChangeTimes->{{3.8794239009958196`*^9, 3.8794239218223004`*^9}, {
  3.879424005950575*^9, 3.87942404093099*^9}, {3.8794240714110775`*^9, 
  3.879424164004634*^9}, {3.879424219013962*^9, 3.879424309225727*^9}, {
  3.8794244695138507`*^9, 3.879424481665657*^9}, {3.8794250137064686`*^9, 
  3.879425095532874*^9}, {3.879425246847394*^9, 3.879425274095193*^9}, {
  3.8794256184480543`*^9, 3.879425657146802*^9}, {3.879425708979323*^9, 
  3.879425750267435*^9}, {3.879425791392913*^9, 3.8794257939978695`*^9}, {
  3.879425938431939*^9, 3.879426042217842*^9}, {3.879451959210679*^9, 
  3.8794519881504326`*^9}, {3.879452078569163*^9, 3.879452104747731*^9}, {
  3.8794522441691504`*^9, 3.879452254238965*^9}},
 CellLabel->"In[10]:=",ExpressionUUID->"e8717f3d-e445-4a82-91ae-a22c88f7b1e1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   SubscriptBox["\[ForAll]", 
    RowBox[{"{", 
     RowBox[{"hyp", ",", "opp", ",", "adj"}], "}"}]], 
   RowBox[{
    SuperscriptBox["hyp", "2"], "\[Equal]", 
    RowBox[{
     SuperscriptBox["adj", "2"], "+", 
     SuperscriptBox["opp", "2"]}]}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.87942424780591*^9, 3.8794243099380856`*^9, 3.8794250983363357`*^9, 
   3.8794252787297173`*^9, 3.8794254769436903`*^9, {3.8794256300711145`*^9, 
   3.8794256579393225`*^9}, {3.8794257100905185`*^9, 3.8794257187683344`*^9}, 
   3.8794257511958675`*^9, 3.8794257941717157`*^9, {3.8794260011561165`*^9, 
   3.879426042713584*^9}, 3.8794520853991814`*^9, 3.8794521168846064`*^9, 
   3.87945225485697*^9},
 CellLabel->"Out[10]=",ExpressionUUID->"a5b86576-327d-4f23-88de-a50956c0bf0e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   SubscriptBox["\[ForAll]", 
    RowBox[{"{", "a", "}"}]], 
   RowBox[{
    RowBox[{"sin", "[", "a", "]"}], "\[Equal]", 
    FractionBox["opp", "hyp"]}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.87942424780591*^9, 3.8794243099380856`*^9, 3.8794250983363357`*^9, 
   3.8794252787297173`*^9, 3.8794254769436903`*^9, {3.8794256300711145`*^9, 
   3.8794256579393225`*^9}, {3.8794257100905185`*^9, 3.8794257187683344`*^9}, 
   3.8794257511958675`*^9, 3.8794257941717157`*^9, {3.8794260011561165`*^9, 
   3.879426042713584*^9}, 3.8794520853991814`*^9, 3.8794521168846064`*^9, 
   3.8794522548649683`*^9},
 CellLabel->"Out[11]=",ExpressionUUID->"6c300813-b0ba-40fb-ba36-efae455508d8"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   SubscriptBox["\[ForAll]", 
    RowBox[{"{", "a", "}"}]], 
   RowBox[{
    SuperscriptBox[
     RowBox[{"sin", "[", "a", "]"}], "2"], "\[Equal]", 
    FractionBox[
     SuperscriptBox["opp", "2"], 
     SuperscriptBox["hyp", "2"]]}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.87942424780591*^9, 3.8794243099380856`*^9, 3.8794250983363357`*^9, 
   3.8794252787297173`*^9, 3.8794254769436903`*^9, {3.8794256300711145`*^9, 
   3.8794256579393225`*^9}, {3.8794257100905185`*^9, 3.8794257187683344`*^9}, 
   3.8794257511958675`*^9, 3.8794257941717157`*^9, {3.8794260011561165`*^9, 
   3.879426042713584*^9}, 3.8794520853991814`*^9, 3.8794521168846064`*^9, 
   3.879452254870967*^9},
 CellLabel->"Out[12]=",ExpressionUUID->"5b8231ef-a921-4953-961e-eca2f0b6e1e2"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   SubscriptBox["\[ForAll]", 
    RowBox[{"{", "a", "}"}]], 
   RowBox[{
    RowBox[{"cos", "[", "a", "]"}], "\[Equal]", 
    FractionBox["adj", "hyp"]}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.87942424780591*^9, 3.8794243099380856`*^9, 3.8794250983363357`*^9, 
   3.8794252787297173`*^9, 3.8794254769436903`*^9, {3.8794256300711145`*^9, 
   3.8794256579393225`*^9}, {3.8794257100905185`*^9, 3.8794257187683344`*^9}, 
   3.8794257511958675`*^9, 3.8794257941717157`*^9, {3.8794260011561165`*^9, 
   3.879426042713584*^9}, 3.8794520853991814`*^9, 3.8794521168846064`*^9, 
   3.8794522548780603`*^9},
 CellLabel->"Out[13]=",ExpressionUUID->"09a51c81-9fab-49e7-bf5a-71a96f077b53"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   SubscriptBox["\[ForAll]", 
    RowBox[{"{", "a", "}"}]], 
   RowBox[{
    SuperscriptBox[
     RowBox[{"cos", "[", "a", "]"}], "2"], "\[Equal]", 
    FractionBox[
     SuperscriptBox["adj", "2"], 
     SuperscriptBox["hyp", "2"]]}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.87942424780591*^9, 3.8794243099380856`*^9, 3.8794250983363357`*^9, 
   3.8794252787297173`*^9, 3.8794254769436903`*^9, {3.8794256300711145`*^9, 
   3.8794256579393225`*^9}, {3.8794257100905185`*^9, 3.8794257187683344`*^9}, 
   3.8794257511958675`*^9, 3.8794257941717157`*^9, {3.8794260011561165`*^9, 
   3.879426042713584*^9}, 3.8794520853991814`*^9, 3.8794521168846064`*^9, 
   3.8794522548889785`*^9},
 CellLabel->"Out[14]=",ExpressionUUID->"cb88fd21-35ee-49d4-ab8e-daeb3ab404ef"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   SubscriptBox["\[ForAll]", 
    RowBox[{"{", 
     RowBox[{"alpha", ",", "a"}], "}"}]], 
   RowBox[{"alpha", "\[Equal]", 
    RowBox[{"cos", "[", "a", "]"}]}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.87942424780591*^9, 3.8794243099380856`*^9, 3.8794250983363357`*^9, 
   3.8794252787297173`*^9, 3.8794254769436903`*^9, {3.8794256300711145`*^9, 
   3.8794256579393225`*^9}, {3.8794257100905185`*^9, 3.8794257187683344`*^9}, 
   3.8794257511958675`*^9, 3.8794257941717157`*^9, {3.8794260011561165`*^9, 
   3.879426042713584*^9}, 3.8794520853991814`*^9, 3.8794521168846064`*^9, 
   3.8794522548959694`*^9},
 CellLabel->"Out[15]=",ExpressionUUID->"aee05851-99ae-4917-ab54-1085e3b89efe"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   SubscriptBox["\[ForAll]", 
    RowBox[{"{", 
     RowBox[{"beta", ",", "a"}], "}"}]], 
   RowBox[{"beta", "\[Equal]", 
    RowBox[{"sin", "[", "a", "]"}]}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.87942424780591*^9, 3.8794243099380856`*^9, 3.8794250983363357`*^9, 
   3.8794252787297173`*^9, 3.8794254769436903`*^9, {3.8794256300711145`*^9, 
   3.8794256579393225`*^9}, {3.8794257100905185`*^9, 3.8794257187683344`*^9}, 
   3.8794257511958675`*^9, 3.8794257941717157`*^9, {3.8794260011561165`*^9, 
   3.879426042713584*^9}, 3.8794520853991814`*^9, 3.8794521168846064`*^9, 
   3.87945225490197*^9},
 CellLabel->"Out[16]=",ExpressionUUID->"9ba6af6f-9981-48e5-97a2-17594a33bee0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    SubscriptBox["\[ForAll]", 
     RowBox[{"{", "a", "}"}]], 
    RowBox[{
     RowBox[{"cos", "[", "a", "]"}], "\[Equal]", 
     FractionBox["adj", "hyp"]}]}], ",", 
   RowBox[{
    SubscriptBox["\[ForAll]", 
     RowBox[{"{", "a", "}"}]], 
    RowBox[{
     SuperscriptBox[
      RowBox[{"cos", "[", "a", "]"}], "2"], "\[Equal]", 
     FractionBox[
      SuperscriptBox["adj", "2"], 
      SuperscriptBox["hyp", "2"]]}]}], ",", 
   RowBox[{
    SubscriptBox["\[ForAll]", 
     RowBox[{"{", "a", "}"}]], 
    RowBox[{
     RowBox[{"sin", "[", "a", "]"}], "\[Equal]", 
     FractionBox["opp", "hyp"]}]}], ",", 
   RowBox[{
    SubscriptBox["\[ForAll]", 
     RowBox[{"{", "a", "}"}]], 
    RowBox[{
     SuperscriptBox[
      RowBox[{"sin", "[", "a", "]"}], "2"], "\[Equal]", 
     FractionBox[
      SuperscriptBox["opp", "2"], 
      SuperscriptBox["hyp", "2"]]}]}], ",", 
   RowBox[{
    SubscriptBox["\[ForAll]", 
     RowBox[{"{", 
      RowBox[{"hyp", ",", "opp", ",", "adj"}], "}"}]], 
    RowBox[{
     SuperscriptBox["hyp", "2"], "\[Equal]", 
     RowBox[{
      SuperscriptBox["adj", "2"], "+", 
      SuperscriptBox["opp", "2"]}]}]}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.87942424780591*^9, 3.8794243099380856`*^9, 3.8794250983363357`*^9, 
   3.8794252787297173`*^9, 3.8794254769436903`*^9, {3.8794256300711145`*^9, 
   3.8794256579393225`*^9}, {3.8794257100905185`*^9, 3.8794257187683344`*^9}, 
   3.8794257511958675`*^9, 3.8794257941717157`*^9, {3.8794260011561165`*^9, 
   3.879426042713584*^9}, 3.8794520853991814`*^9, 3.8794521168846064`*^9, 
   3.879452254907973*^9},
 CellLabel->"Out[17]=",ExpressionUUID->"60f27b27-7fa8-4f7b-833a-886e4d428498"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["Failure",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            FrameBox[
             StyleBox["\"\[WarningSign]\"", 
              Directive["Message", 35], StripOnInput -> False], 
             ContentPadding -> False, FrameStyle -> None, 
             FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
            GridBox[{{
               TagBox[
                GridBox[{{
                   TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                   "\"The proposition could not be reduced to True.\"", 
                    "SummaryItem"]}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
               TagBox[
                GridBox[{{
                   TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"PropositionFalse\"", "SummaryItem"]}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            FrameBox[
             StyleBox["\"\[WarningSign]\"", 
              Directive["Message", 35], StripOnInput -> False], 
             ContentPadding -> False, FrameStyle -> None, 
             FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
            GridBox[{{
               TagBox[
                GridBox[{{
                   TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                   "\"The proposition could not be reduced to True.\"", 
                    "SummaryItem"]}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
               TagBox[
                GridBox[{{
                   TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"PropositionFalse\"", "SummaryItem"]}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  Failure["PropositionFalse", 
   Association[
   "MessageTemplate" -> 
    TemplateObject[{"The proposition could not be reduced to True."}, 
      CombinerFunction -> StringJoin, InsertionFunction -> TextString], 
    "MessageParameters" -> Association[]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.87942424780591*^9, 3.8794243099380856`*^9, 3.8794250983363357`*^9, 
   3.8794252787297173`*^9, 3.8794254769436903`*^9, {3.8794256300711145`*^9, 
   3.8794256579393225`*^9}, {3.8794257100905185`*^9, 3.8794257187683344`*^9}, 
   3.8794257511958675`*^9, 3.8794257941717157`*^9, {3.8794260011561165`*^9, 
   3.879426042713584*^9}, 3.8794520853991814`*^9, 3.8794521168846064`*^9, 
   3.879452258808503*^9},
 CellLabel->"Out[18]=",ExpressionUUID->"2e47c13e-6495-4ce9-9e84-21b28fd0a704"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"proof2", "[", "\"\<ProofNotebook\>\"", "]"}]], "Input",
 CellChangeTimes->{
  3.8794251365767183`*^9, {3.8794253593435497`*^9, 3.8794253600600147`*^9}},
 CellLabel->"In[58]:=",ExpressionUUID->"72629a3d-cefb-4ead-b3bd-3f958ffe59b4"],

Cell[BoxData[
 InterpretationBox[
  PanelBox[GridBox[{
     {
      TooltipBox[
       ButtonBox[
        StyleBox[
         DynamicBox[FEPrivate`FrontEndResource[
          "FEBitmaps", "ManipulatePasteIcon"],
          ImageSizeCache->{13., {4., 9.}}],
         DynamicUpdating->True],
        Appearance->{Automatic, None, "Normal", Automatic},
        ButtonFunction:>FrontEndExecute[{
           FrontEnd`NotebookPut[
            Notebook[{
              Cell["Axiom 1", "Subsection"], 
              Cell["We are given that:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{"x1", "\[Equal]", 
                  RowBox[{"sin", "[", "x2", "]"}]}]], "Code"], 
              Cell["Hypothesis 1", "Subsection"], 
              Cell["We would like to show that:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{
                    SuperscriptBox[
                    RowBox[{"cos", "[", "c", "]"}], "2"], "+", 
                    SuperscriptBox[
                    RowBox[{"sin", "[", "c", "]"}], "2"]}], "\[Equal]", 
                  "1"}]], "Code"], 
              Cell["Substitution Lemma 1", "Subsection"], 
              Cell["It can be shown that:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{
                    SuperscriptBox[
                    RowBox[{"cos", "[", "c", "]"}], "2"], "+", 
                    SuperscriptBox[
                    RowBox[{"sin", "[", "c", "]"}], "2"]}], "\[Equal]", 
                  RowBox[{"sin", "[", "1", "]"}]}]], "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell[
                 "We start by taking Hypothesis 1, and apply the \
substitution:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{"x1_", "\[Rule]", 
                    RowBox[{"sin", "[", "1", "]"}]}], DisplayForm]], "Code"], 
                 Cell["which follows from Axiom 1.", "CodeText"]}, {1}]], 
              Cell["Conclusion 1", "Subsection"], 
              Cell["We obtain the conclusion:", "CodeText"], 
              Cell[
               BoxData["True"], "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell[
                 "Take Substitution Lemma 1, and apply the substitution:", 
                  "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{"x1_", "\[Rule]", 
                    RowBox[{"sin", "[", "1", "]"}]}], DisplayForm]], "Code"], 
                 Cell["which follows from Axiom 1.", "CodeText"]}, {1}]]}]]}],
        DefaultBaseStyle->{},
        Evaluator->None,
        Method->"Queued"],
       DynamicBox[
        ToBoxes[
         FEPrivate`FrontEndResource["FEStrings", "NotebookInNewWindow"]]]]},
     {
      ItemBox[GridBox[{
         {Cell[
          "Axiom 1", "Subsection",ExpressionUUID->
           "7c2eff51-241d-430c-9c9a-77a8860b398b"]},
         {Cell[
          "We are given that:", "CodeText",ExpressionUUID->
           "bba4e325-07e8-42b8-adf8-ca8931875623"]},
         {Cell[BoxData[
           RowBox[{"x1", "\[Equal]", 
            RowBox[{"sin", "[", "x2", "]"}]}]], "Code",ExpressionUUID->
           "d88d4bff-576f-4f36-bfbb-ad4a3089ce68"]},
         {Cell[
          "Hypothesis 1", "Subsection",ExpressionUUID->
           "dd7a5e2d-eb06-4e18-8f01-6ab79f5c0943"]},
         {Cell[
          "We would like to show that:", "CodeText",ExpressionUUID->
           "b220b51f-90fd-400f-b4bf-4c2b6d852fda"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{
             SuperscriptBox[
              RowBox[{"cos", "[", "c", "]"}], "2"], "+", 
             SuperscriptBox[
              RowBox[{"sin", "[", "c", "]"}], "2"]}], "\[Equal]", "1"}]], 
           "Code",ExpressionUUID->"b0dbedcc-dfa5-4bd2-90c5-ea4161bda2d1"]},
         {Cell[
          "Substitution Lemma 1", "Subsection",ExpressionUUID->
           "2177a406-b8f3-47dd-b5a8-f0dff47a440c"]},
         {Cell[
          "It can be shown that:", "CodeText",ExpressionUUID->
           "809fd8c2-d32b-46c7-8090-db09293340fe"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{
             SuperscriptBox[
              RowBox[{"cos", "[", "c", "]"}], "2"], "+", 
             SuperscriptBox[
              RowBox[{"sin", "[", "c", "]"}], "2"]}], "\[Equal]", 
            RowBox[{"sin", "[", "1", "]"}]}]], "Code",ExpressionUUID->
           "20d6151a-6a51-4dc2-be36-895eee004d0a"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "16d57098-34ba-4941-afcf-65cfe9fef14a"]},
         {Cell[
          "We start by taking Hypothesis 1, and apply the substitution:", 
           "CodeText",ExpressionUUID->"e7a60b98-41fa-496b-9a0b-3030df28787f"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{"x1_", "\[Rule]", 
             RowBox[{"sin", "[", "1", "]"}]}],
            DisplayForm]], "Code",ExpressionUUID->
           "aa4b691e-d3f0-4d8b-9f46-3782526122f4"]},
         {Cell[
          "which follows from Axiom 1.", "CodeText",ExpressionUUID->
           "97960b20-15e5-422f-9863-fae5ff9d577a"]},
         {Cell[
          "Conclusion 1", "Subsection",ExpressionUUID->
           "8659f310-4765-482e-8771-fb17482e7dfa"]},
         {Cell[
          "We obtain the conclusion:", "CodeText",ExpressionUUID->
           "7d41290b-d5c2-4248-b5cf-db1d8b3dd8b4"]},
         {Cell[BoxData[
          "True"], "Code",ExpressionUUID->
           "5d572ad5-f7d7-462a-9a79-b3e590bd3927"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "75bd0c7e-4ad7-44c1-91bd-2fbdb9d79733"]},
         {Cell[
          "Take Substitution Lemma 1, and apply the substitution:", 
           "CodeText",ExpressionUUID->"063a757f-1b6f-487e-9bf4-15578953b6d8"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{"x1_", "\[Rule]", 
             RowBox[{"sin", "[", "1", "]"}]}],
            DisplayForm]], "Code",ExpressionUUID->
           "2d03714a-9318-4c3e-b44a-bff2450d0a7b"]},
         {Cell[
          "which follows from Axiom 1.", "CodeText",ExpressionUUID->
           "c1848c53-e3b8-45b0-a038-1e44963822ea"]}
        },
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
       Background->GrayLevel[1],
       Frame->True,
       FrameStyle->GrayLevel[0, 0.2]]}
    },
    GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
   BaseStyle->{FontFamily -> "Times"},
   DefaultBaseStyle->{},
   FrameMargins->5],
  DocumentNotebook[{
    TextCell["Axiom 1", "Subsection"], 
    TextCell["We are given that:", "CodeText"], 
    ExpressionCell[$CellContext`x1 == $CellContext`sin[$CellContext`x2], 
     "Code"], 
    TextCell["Hypothesis 1", "Subsection"], 
    TextCell["We would like to show that:", "CodeText"], 
    ExpressionCell[$CellContext`cos[$CellContext`c]^2 + \
$CellContext`sin[$CellContext`c]^2 == 1, "Code"], 
    TextCell["Substitution Lemma 1", "Subsection"], 
    TextCell["It can be shown that:", "CodeText"], 
    ExpressionCell[$CellContext`cos[$CellContext`c]^2 + \
$CellContext`sin[$CellContext`c]^2 == $CellContext`sin[1], "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell[
      "We start by taking Hypothesis 1, and apply the substitution:", 
       "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{"x1_", "\[Rule]", 
          RowBox[{"sin", "[", "1", "]"}]}]], "Code"], 
      TextCell["which follows from Axiom 1.", "CodeText"]}, 1], 
    TextCell["Conclusion 1", "Subsection"], 
    TextCell["We obtain the conclusion:", "CodeText"], 
    ExpressionCell[True, "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell[
      "Take Substitution Lemma 1, and apply the substitution:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{"x1_", "\[Rule]", 
          RowBox[{"sin", "[", "1", "]"}]}]], "Code"], 
      TextCell["which follows from Axiom 1.", "CodeText"]}, 1]}]]], "Output",
 CellChangeTimes->{
  3.879425138210462*^9, {3.879425286635456*^9, 3.8794253094284763`*^9}, 
   3.8794253622351923`*^9, 3.879425483651073*^9, {3.879425636998378*^9, 
   3.879425662901087*^9}, 3.879425724270894*^9, 3.879425758936283*^9, 
   3.879425798506523*^9, 3.879426008802386*^9},
 CellLabel->"Out[58]=",ExpressionUUID->"4d89035c-0077-447b-a4c6-31881da05551"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"proof", "[", "\"\<ProofNotebook\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.879425177139358*^9, 3.879425191121358*^9}, {
  3.8794261306685853`*^9, 3.879426140922148*^9}},
 CellLabel->"In[93]:=",ExpressionUUID->"a5a61046-3c69-4755-9a74-c93b8286c220"],

Cell[BoxData[
 InterpretationBox[
  PanelBox[GridBox[{
     {
      TooltipBox[
       ButtonBox[
        StyleBox[
         DynamicBox[FEPrivate`FrontEndResource[
          "FEBitmaps", "ManipulatePasteIcon"],
          ImageSizeCache->{13., {4., 9.}}],
         DynamicUpdating->True],
        Appearance->{Automatic, None, "Normal", Automatic},
        ButtonFunction:>FrontEndExecute[{
           FrontEnd`NotebookPut[
            Notebook[{
              Cell["Axiom 1", "Subsection"], 
              Cell["We are given that:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{"x1", "\[Equal]", 
                  RowBox[{"gccd", "[", 
                    RowBox[{"x1", ",", "x1"}], "]"}]}]], "Code"], 
              Cell["Axiom 2", "Subsection"], 
              Cell["We are given that:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"gccd", "[", 
                    RowBox[{"x1", ",", "x2"}], "]"}], "\[Equal]", 
                  RowBox[{"gccd", "[", 
                    RowBox[{"x2", ",", "x1"}], "]"}]}]], "Code"], 
              Cell["Axiom 3", "Subsection"], 
              Cell["We are given that:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"gccd", "[", 
                    RowBox[{"x1", ",", 
                    RowBox[{"gccd", "[", 
                    RowBox[{"x2", ",", "x3"}], "]"}]}], "]"}], "\[Equal]", 
                  RowBox[{"gccd", "[", 
                    RowBox[{
                    RowBox[{"gccd", "[", 
                    RowBox[{"x1", ",", "x2"}], "]"}], ",", "x3"}], "]"}]}]], 
               "Code"], 
              Cell["Axiom 4", "Subsection"], 
              Cell["We are given that:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"gccd", "[", 
                    RowBox[{"a", ",", "t"}], "]"}], "\[Equal]", "t"}]], 
               "Code"], 
              Cell["Axiom 5", "Subsection"], 
              Cell["We are given that:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"gccd", "[", 
                    RowBox[{"a", ",", "b"}], "]"}], "\[Equal]", "d"}]], 
               "Code"], 
              Cell["Axiom 6", "Subsection"], 
              Cell["We are given that:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"gccd", "[", 
                    RowBox[{"b", ",", "t"}], "]"}], "\[Equal]", "t"}]], 
               "Code"], 
              Cell["Hypothesis 1", "Subsection"], 
              Cell["We would like to show that:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"gccd", "[", 
                    RowBox[{"d", ",", "t"}], "]"}], "\[Equal]", "t"}]], 
               "Code"], 
              Cell["Substitution Lemma 1", "Subsection"], 
              Cell["It can be shown that:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"gccd", "[", 
                    RowBox[{"b", ",", "a"}], "]"}], "\[Equal]", "d"}]], 
               "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell[
                 "We start by taking Axiom 5, and apply the substitution:", 
                  "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"gccd", "[", 
                    RowBox[{"x1_", ",", "x2_"}], "]"}], "\[Rule]", 
                    RowBox[{"gccd", "[", 
                    RowBox[{"x2", ",", "x1"}], "]"}]}], DisplayForm]], 
                  "Code"], 
                 Cell["which follows from Axiom 2.", "CodeText"]}, {1}]], 
              Cell["Substitution Lemma 2", "Subsection"], 
              Cell["It can be shown that:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"gccd", "[", 
                    RowBox[{"t", ",", "d"}], "]"}], "\[Equal]", "t"}]], 
               "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell[
                 "We start by taking Hypothesis 1, and apply the \
substitution:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"gccd", "[", 
                    RowBox[{"x1_", ",", "x2_"}], "]"}], "\[Rule]", 
                    RowBox[{"gccd", "[", 
                    RowBox[{"x2", ",", "x1"}], "]"}]}], DisplayForm]], 
                  "Code"], 
                 Cell["which follows from Axiom 2.", "CodeText"]}, {1}]], 
              Cell["Substitution Lemma 3", "Subsection"], 
              Cell["It can be shown that:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"gccd", "[", 
                    RowBox[{
                    RowBox[{"gccd", "[", 
                    RowBox[{"a", ",", "t"}], "]"}], ",", "d"}], "]"}], 
                  "\[Equal]", "t"}]], "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell[
                 "We start by taking Substitution Lemma 2, and apply the \
substitution:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{"t", "\[Rule]", 
                    RowBox[{"gccd", "[", 
                    RowBox[{"a", ",", "t"}], "]"}]}], DisplayForm]], "Code"], 
                 Cell["which follows from Axiom 4.", "CodeText"]}, {1}]], 
              Cell["Substitution Lemma 4", "Subsection"], 
              Cell["It can be shown that:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"gccd", "[", 
                    RowBox[{
                    RowBox[{"gccd", "[", 
                    RowBox[{"t", ",", "a"}], "]"}], ",", "d"}], "]"}], 
                  "\[Equal]", "t"}]], "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell[
                 "We start by taking Substitution Lemma 3, and apply the \
substitution:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"gccd", "[", 
                    RowBox[{"x1_", ",", "x2_"}], "]"}], "\[Rule]", 
                    RowBox[{"gccd", "[", 
                    RowBox[{"x2", ",", "x1"}], "]"}]}], DisplayForm]], 
                  "Code"], 
                 Cell["which follows from Axiom 2.", "CodeText"]}, {1}]], 
              Cell["Substitution Lemma 5", "Subsection"], 
              Cell["It can be shown that:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"gccd", "[", 
                    RowBox[{"t", ",", 
                    RowBox[{"gccd", "[", 
                    RowBox[{"a", ",", "d"}], "]"}]}], "]"}], "\[Equal]", 
                  "t"}]], "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell[
                 "We start by taking Substitution Lemma 4, and apply the \
substitution:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"gccd", "[", 
                    RowBox[{
                    RowBox[{"gccd", "[", 
                    RowBox[{"x1_", ",", "x2_"}], "]"}], ",", "x3_"}], "]"}], 
                    "\[Rule]", 
                    RowBox[{"gccd", "[", 
                    RowBox[{"x1", ",", 
                    RowBox[{"gccd", "[", 
                    RowBox[{"x2", ",", "x3"}], "]"}]}], "]"}]}], 
                    DisplayForm]], "Code"], 
                 Cell["which follows from Axiom 3.", "CodeText"]}, {1}]], 
              Cell["Substitution Lemma 6", "Subsection"], 
              Cell["It can be shown that:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"gccd", "[", 
                    RowBox[{"t", ",", 
                    RowBox[{"gccd", "[", 
                    RowBox[{"d", ",", "a"}], "]"}]}], "]"}], "\[Equal]", 
                  "t"}]], "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell[
                 "We start by taking Substitution Lemma 5, and apply the \
substitution:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"gccd", "[", 
                    RowBox[{"x1_", ",", "x2_"}], "]"}], "\[Rule]", 
                    RowBox[{"gccd", "[", 
                    RowBox[{"x2", ",", "x1"}], "]"}]}], DisplayForm]], 
                  "Code"], 
                 Cell["which follows from Axiom 2.", "CodeText"]}, {1}]], 
              Cell["Substitution Lemma 7", "Subsection"], 
              Cell["It can be shown that:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"gccd", "[", 
                    RowBox[{
                    RowBox[{"gccd", "[", 
                    RowBox[{"d", ",", "a"}], "]"}], ",", "t"}], "]"}], 
                  "\[Equal]", "t"}]], "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell[
                 "We start by taking Substitution Lemma 6, and apply the \
substitution:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"gccd", "[", 
                    RowBox[{"x1_", ",", "x2_"}], "]"}], "\[Rule]", 
                    RowBox[{"gccd", "[", 
                    RowBox[{"x2", ",", "x1"}], "]"}]}], DisplayForm]], 
                  "Code"], 
                 Cell["which follows from Axiom 2.", "CodeText"]}, {1}]], 
              Cell["Substitution Lemma 8", "Subsection"], 
              Cell["It can be shown that:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"gccd", "[", 
                    RowBox[{
                    RowBox[{"gccd", "[", 
                    RowBox[{
                    RowBox[{"gccd", "[", 
                    RowBox[{"b", ",", "a"}], "]"}], ",", "a"}], "]"}], ",", 
                    "t"}], "]"}], "\[Equal]", "t"}]], "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell[
                 "We start by taking Substitution Lemma 7, and apply the \
substitution:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{"d", "\[Rule]", 
                    RowBox[{"gccd", "[", 
                    RowBox[{"b", ",", "a"}], "]"}]}], DisplayForm]], "Code"], 
                 Cell[
                 "which follows from Substitution Lemma 1.", "CodeText"]}, {
                1}]], 
              Cell["Substitution Lemma 9", "Subsection"], 
              Cell["It can be shown that:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"gccd", "[", 
                    RowBox[{
                    RowBox[{"gccd", "[", 
                    RowBox[{"b", ",", 
                    RowBox[{"gccd", "[", 
                    RowBox[{"a", ",", "a"}], "]"}]}], "]"}], ",", "t"}], 
                    "]"}], "\[Equal]", "t"}]], "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell[
                 "We start by taking Substitution Lemma 8, and apply the \
substitution:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"gccd", "[", 
                    RowBox[{
                    RowBox[{"gccd", "[", 
                    RowBox[{"x1_", ",", "x2_"}], "]"}], ",", "x3_"}], "]"}], 
                    "\[Rule]", 
                    RowBox[{"gccd", "[", 
                    RowBox[{"x1", ",", 
                    RowBox[{"gccd", "[", 
                    RowBox[{"x2", ",", "x3"}], "]"}]}], "]"}]}], 
                    DisplayForm]], "Code"], 
                 Cell["which follows from Axiom 3.", "CodeText"]}, {1}]], 
              Cell["Substitution Lemma 10", "Subsection"], 
              Cell["It can be shown that:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"gccd", "[", 
                    RowBox[{"b", ",", 
                    RowBox[{"gccd", "[", 
                    RowBox[{
                    RowBox[{"gccd", "[", 
                    RowBox[{"a", ",", "a"}], "]"}], ",", "t"}], "]"}]}], 
                    "]"}], "\[Equal]", "t"}]], "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell[
                 "We start by taking Substitution Lemma 9, and apply the \
substitution:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"gccd", "[", 
                    RowBox[{
                    RowBox[{"gccd", "[", 
                    RowBox[{"x1_", ",", "x2_"}], "]"}], ",", "x3_"}], "]"}], 
                    "\[Rule]", 
                    RowBox[{"gccd", "[", 
                    RowBox[{"x1", ",", 
                    RowBox[{"gccd", "[", 
                    RowBox[{"x2", ",", "x3"}], "]"}]}], "]"}]}], 
                    DisplayForm]], "Code"], 
                 Cell["which follows from Axiom 3.", "CodeText"]}, {1}]], 
              Cell["Substitution Lemma 11", "Subsection"], 
              Cell["It can be shown that:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"gccd", "[", 
                    RowBox[{
                    RowBox[{"gccd", "[", 
                    RowBox[{
                    RowBox[{"gccd", "[", 
                    RowBox[{"a", ",", "a"}], "]"}], ",", "t"}], "]"}], ",", 
                    "b"}], "]"}], "\[Equal]", "t"}]], "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell[
                 "We start by taking Substitution Lemma 10, and apply the \
substitution:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"gccd", "[", 
                    RowBox[{"x1_", ",", "x2_"}], "]"}], "\[Rule]", 
                    RowBox[{"gccd", "[", 
                    RowBox[{"x2", ",", "x1"}], "]"}]}], DisplayForm]], 
                  "Code"], 
                 Cell["which follows from Axiom 2.", "CodeText"]}, {1}]], 
              Cell["Substitution Lemma 12", "Subsection"], 
              Cell["It can be shown that:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"gccd", "[", 
                    RowBox[{
                    RowBox[{"gccd", "[", 
                    RowBox[{"a", ",", "t"}], "]"}], ",", "b"}], "]"}], 
                  "\[Equal]", "t"}]], "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell[
                 "We start by taking Substitution Lemma 11, and apply the \
substitution:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"gccd", "[", 
                    RowBox[{"x1_", ",", "x1_"}], "]"}], "\[Rule]", "x1"}], 
                    DisplayForm]], "Code"], 
                 Cell["which follows from Axiom 1.", "CodeText"]}, {1}]], 
              Cell["Substitution Lemma 13", "Subsection"], 
              Cell["It can be shown that:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"gccd", "[", 
                    RowBox[{"t", ",", "b"}], "]"}], "\[Equal]", "t"}]], 
               "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell[
                 "We start by taking Substitution Lemma 12, and apply the \
substitution:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"gccd", "[", 
                    RowBox[{"a", ",", "t"}], "]"}], "\[Rule]", "t"}], 
                    DisplayForm]], "Code"], 
                 Cell["which follows from Axiom 4.", "CodeText"]}, {1}]], 
              Cell["Substitution Lemma 14", "Subsection"], 
              Cell["It can be shown that:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"gccd", "[", 
                    RowBox[{"b", ",", "t"}], "]"}], "\[Equal]", "t"}]], 
               "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell[
                 "We start by taking Substitution Lemma 13, and apply the \
substitution:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"gccd", "[", 
                    RowBox[{"x1_", ",", "x2_"}], "]"}], "\[Rule]", 
                    RowBox[{"gccd", "[", 
                    RowBox[{"x2", ",", "x1"}], "]"}]}], DisplayForm]], 
                  "Code"], 
                 Cell["which follows from Axiom 2.", "CodeText"]}, {1}]], 
              Cell["Conclusion 1", "Subsection"], 
              Cell["We obtain the conclusion:", "CodeText"], 
              Cell[
               BoxData["True"], "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell[
                 "Take Substitution Lemma 14, and apply the substitution:", 
                  "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{"t", "\[Rule]", 
                    RowBox[{"gccd", "[", 
                    RowBox[{"b", ",", "t"}], "]"}]}], DisplayForm]], "Code"], 
                 Cell["which follows from Axiom 6.", "CodeText"]}, {1}]]}]]}],
        DefaultBaseStyle->{},
        Evaluator->None,
        Method->"Queued"],
       DynamicBox[
        ToBoxes[
         FEPrivate`FrontEndResource["FEStrings", "NotebookInNewWindow"]]]]},
     {
      ItemBox[GridBox[{
         {Cell[
          "Axiom 1", "Subsection",ExpressionUUID->
           "0a9a8122-217f-4b17-915e-c14e7952d368"]},
         {Cell[
          "We are given that:", "CodeText",ExpressionUUID->
           "8dee2e6d-e3be-4980-8486-4cec3d3e9a73"]},
         {Cell[BoxData[
           RowBox[{"x1", "\[Equal]", 
            RowBox[{"gccd", "[", 
             RowBox[{"x1", ",", "x1"}], "]"}]}]], "Code",ExpressionUUID->
           "c91c8fbe-305e-47bd-a8a0-18bbc375b519"]},
         {Cell[
          "Axiom 2", "Subsection",ExpressionUUID->
           "eacd9708-d507-43b7-8689-56b1549ae683"]},
         {Cell[
          "We are given that:", "CodeText",ExpressionUUID->
           "ff99cca6-83d8-4191-a930-44f1988dcdde"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"gccd", "[", 
             RowBox[{"x1", ",", "x2"}], "]"}], "\[Equal]", 
            RowBox[{"gccd", "[", 
             RowBox[{"x2", ",", "x1"}], "]"}]}]], "Code",ExpressionUUID->
           "c5b4eb61-d80b-4428-bfdf-8beebde50b95"]},
         {Cell[
          "Axiom 3", "Subsection",ExpressionUUID->
           "1fc97d87-f4b1-491c-94ed-cf54d6d236b1"]},
         {Cell[
          "We are given that:", "CodeText",ExpressionUUID->
           "aacc7df6-697b-4485-94d3-fe5b9246134d"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"gccd", "[", 
             RowBox[{"x1", ",", 
              RowBox[{"gccd", "[", 
               RowBox[{"x2", ",", "x3"}], "]"}]}], "]"}], "\[Equal]", 
            RowBox[{"gccd", "[", 
             RowBox[{
              RowBox[{"gccd", "[", 
               RowBox[{"x1", ",", "x2"}], "]"}], ",", "x3"}], "]"}]}]], 
           "Code",ExpressionUUID->"14031eee-f35e-4de1-afe2-25e385907a54"]},
         {Cell[
          "Axiom 4", "Subsection",ExpressionUUID->
           "f04cfb20-d511-49bf-af85-6bbbc242d3a8"]},
         {Cell[
          "We are given that:", "CodeText",ExpressionUUID->
           "bc779eeb-86cc-4940-a12a-47c719c23c5d"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"gccd", "[", 
             RowBox[{"a", ",", "t"}], "]"}], "\[Equal]", "t"}]], "Code",
           ExpressionUUID->"b1cd6138-7190-4df3-87d8-1fc4e065d5b4"]},
         {Cell[
          "Axiom 5", "Subsection",ExpressionUUID->
           "240fce20-69c1-416a-a58f-937371cc51b4"]},
         {Cell[
          "We are given that:", "CodeText",ExpressionUUID->
           "a521e6b2-8671-4bf1-b69e-d2f384c3acd8"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"gccd", "[", 
             RowBox[{"a", ",", "b"}], "]"}], "\[Equal]", "d"}]], "Code",
           ExpressionUUID->"adbf18a7-d1c9-415d-bb0e-89ba9424bfd9"]},
         {Cell[
          "Axiom 6", "Subsection",ExpressionUUID->
           "0576c17b-2dd4-4584-9670-ed9f6f0ae4a8"]},
         {Cell[
          "We are given that:", "CodeText",ExpressionUUID->
           "d27217a5-dc8f-458a-9a92-470fa3f26255"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"gccd", "[", 
             RowBox[{"b", ",", "t"}], "]"}], "\[Equal]", "t"}]], "Code",
           ExpressionUUID->"c6e51079-3384-4d1a-967d-bc80f3363e7b"]},
         {Cell[
          "Hypothesis 1", "Subsection",ExpressionUUID->
           "a889ef15-d38c-4177-abd0-e4a856a0b433"]},
         {Cell[
          "We would like to show that:", "CodeText",ExpressionUUID->
           "f52c61e9-8da3-403e-bed9-0d32f99a329b"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"gccd", "[", 
             RowBox[{"d", ",", "t"}], "]"}], "\[Equal]", "t"}]], "Code",
           ExpressionUUID->"9ab25c5f-061e-444e-aac9-6ce58ad66fdd"]},
         {Cell[
          "Substitution Lemma 1", "Subsection",ExpressionUUID->
           "79b86c1b-1179-4b15-9f0c-0070c48986b9"]},
         {Cell[
          "It can be shown that:", "CodeText",ExpressionUUID->
           "d0acb2e9-8a64-4671-befd-afeb75981cc1"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"gccd", "[", 
             RowBox[{"b", ",", "a"}], "]"}], "\[Equal]", "d"}]], "Code",
           ExpressionUUID->"2ec0cdaa-4c0f-4b07-ab0d-94e53df36a84"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "00508f8e-b4c2-4df6-8ee8-61fa7524e5d1"]},
         {Cell[
          "We start by taking Axiom 5, and apply the substitution:", 
           "CodeText",ExpressionUUID->"200c6369-9ccc-4f9b-93f4-5951c12465d1"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"gccd", "[", 
              RowBox[{"x1_", ",", "x2_"}], "]"}], "\[Rule]", 
             RowBox[{"gccd", "[", 
              RowBox[{"x2", ",", "x1"}], "]"}]}],
            DisplayForm]], "Code",ExpressionUUID->
           "2497eb51-330a-4682-8acb-0336fe0a3883"]},
         {Cell[
          "which follows from Axiom 2.", "CodeText",ExpressionUUID->
           "99756033-4cef-476f-b28a-9c6a4c68639c"]},
         {Cell[
          "Substitution Lemma 2", "Subsection",ExpressionUUID->
           "dfb14ba4-cc5f-41a0-a5d3-7a7da44c7fde"]},
         {Cell[
          "It can be shown that:", "CodeText",ExpressionUUID->
           "cfa51bce-f4e8-4e17-bbd5-1187f65d29dc"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"gccd", "[", 
             RowBox[{"t", ",", "d"}], "]"}], "\[Equal]", "t"}]], "Code",
           ExpressionUUID->"475b981a-4792-44c2-99ed-198816d02378"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "ea2e5629-224a-41cc-b471-c7dfad1bd5d5"]},
         {Cell[
          "We start by taking Hypothesis 1, and apply the substitution:", 
           "CodeText",ExpressionUUID->"56bff2db-22be-48f3-9012-65e309c17981"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"gccd", "[", 
              RowBox[{"x1_", ",", "x2_"}], "]"}], "\[Rule]", 
             RowBox[{"gccd", "[", 
              RowBox[{"x2", ",", "x1"}], "]"}]}],
            DisplayForm]], "Code",ExpressionUUID->
           "19fc26de-91dc-4d37-aed8-61d8d9d3760c"]},
         {Cell[
          "which follows from Axiom 2.", "CodeText",ExpressionUUID->
           "4c18f3f9-0351-414f-a854-49ebf840a511"]},
         {Cell[
          "Substitution Lemma 3", "Subsection",ExpressionUUID->
           "156bfb4b-d596-41e9-bfca-5f8b2d69b6a2"]},
         {Cell[
          "It can be shown that:", "CodeText",ExpressionUUID->
           "c847dde2-c1c2-4de3-ba58-0d29ad84087b"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"gccd", "[", 
             RowBox[{
              RowBox[{"gccd", "[", 
               RowBox[{"a", ",", "t"}], "]"}], ",", "d"}], "]"}], "\[Equal]", 
            "t"}]], "Code",ExpressionUUID->
           "e3735ba2-4eaa-49da-a33e-525618b4a836"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "2aa1bc4d-42fa-4ee9-a826-05af71c68d0b"]},
         {Cell["\<\
We start by taking Substitution Lemma 2, and apply the substitution:\
\>", "CodeText",ExpressionUUID->"56bd8326-cb8e-4f5f-94a1-c2313dc4b2e5"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{"t", "\[Rule]", 
             RowBox[{"gccd", "[", 
              RowBox[{"a", ",", "t"}], "]"}]}],
            DisplayForm]], "Code",ExpressionUUID->
           "c19b35fe-0dd4-4b1c-b632-0483fc8c01da"]},
         {Cell[
          "which follows from Axiom 4.", "CodeText",ExpressionUUID->
           "164d8499-32a5-4c7b-9f1f-fbb9bfa6e51d"]},
         {Cell[
          "Substitution Lemma 4", "Subsection",ExpressionUUID->
           "bb9925d0-c683-4697-84c3-98900e5d859b"]},
         {Cell[
          "It can be shown that:", "CodeText",ExpressionUUID->
           "64c23420-eb91-4aeb-90fb-45d1b305bc98"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"gccd", "[", 
             RowBox[{
              RowBox[{"gccd", "[", 
               RowBox[{"t", ",", "a"}], "]"}], ",", "d"}], "]"}], "\[Equal]", 
            "t"}]], "Code",ExpressionUUID->
           "a55dbdf9-6e2c-4417-b8c2-a9ccb79e2fee"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "238aed6f-5a1c-4ba0-b1ec-8a3debc98dde"]},
         {Cell["\<\
We start by taking Substitution Lemma 3, and apply the substitution:\
\>", "CodeText",ExpressionUUID->"4bdf86b5-8c60-4295-9306-cd5730c46ff9"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"gccd", "[", 
              RowBox[{"x1_", ",", "x2_"}], "]"}], "\[Rule]", 
             RowBox[{"gccd", "[", 
              RowBox[{"x2", ",", "x1"}], "]"}]}],
            DisplayForm]], "Code",ExpressionUUID->
           "78276f93-44c9-4024-a76b-a86b134639dd"]},
         {Cell[
          "which follows from Axiom 2.", "CodeText",ExpressionUUID->
           "99d4b040-b76b-4c8b-b47d-677777057ee4"]},
         {Cell[
          "Substitution Lemma 5", "Subsection",ExpressionUUID->
           "8f182cc5-0b91-4ffc-a997-bed138ff10da"]},
         {Cell[
          "It can be shown that:", "CodeText",ExpressionUUID->
           "154ee2d4-43b0-4be1-977f-bf35577d564a"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"gccd", "[", 
             RowBox[{"t", ",", 
              RowBox[{"gccd", "[", 
               RowBox[{"a", ",", "d"}], "]"}]}], "]"}], "\[Equal]", "t"}]], 
           "Code",ExpressionUUID->"0d761fcd-cd42-4ee9-8d3f-605096ec7bf6"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "85481fec-f639-4b32-ac85-5e39c70f69b9"]},
         {Cell["\<\
We start by taking Substitution Lemma 4, and apply the substitution:\
\>", "CodeText",ExpressionUUID->"53e35fdb-e06a-465d-89ff-8d89cc69a466"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"gccd", "[", 
              RowBox[{
               RowBox[{"gccd", "[", 
                RowBox[{"x1_", ",", "x2_"}], "]"}], ",", "x3_"}], "]"}], 
             "\[Rule]", 
             RowBox[{"gccd", "[", 
              RowBox[{"x1", ",", 
               RowBox[{"gccd", "[", 
                RowBox[{"x2", ",", "x3"}], "]"}]}], "]"}]}],
            DisplayForm]], "Code",ExpressionUUID->
           "f6f2d18d-ac1a-4b6e-a7fd-5fed4fd07aa8"]},
         {Cell[
          "which follows from Axiom 3.", "CodeText",ExpressionUUID->
           "fb49ddd9-4cc0-463a-b4f0-91cd08759e30"]},
         {Cell[
          "Substitution Lemma 6", "Subsection",ExpressionUUID->
           "d5f397c0-9f3d-4a2d-bc42-d0add708fad6"]},
         {Cell[
          "It can be shown that:", "CodeText",ExpressionUUID->
           "66a014b8-d59c-4c2d-b3a7-16f5a4726bd7"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"gccd", "[", 
             RowBox[{"t", ",", 
              RowBox[{"gccd", "[", 
               RowBox[{"d", ",", "a"}], "]"}]}], "]"}], "\[Equal]", "t"}]], 
           "Code",ExpressionUUID->"7d5043ff-34e9-4abf-839c-9f80554a97ca"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "fdc8ac2f-7789-4a79-a3e4-7574683fc943"]},
         {Cell["\<\
We start by taking Substitution Lemma 5, and apply the substitution:\
\>", "CodeText",ExpressionUUID->"0cd2700e-8a27-4a1a-8958-71db3aadfdc8"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"gccd", "[", 
              RowBox[{"x1_", ",", "x2_"}], "]"}], "\[Rule]", 
             RowBox[{"gccd", "[", 
              RowBox[{"x2", ",", "x1"}], "]"}]}],
            DisplayForm]], "Code",ExpressionUUID->
           "09706a9c-fd49-4a98-956c-8d4add4404d8"]},
         {Cell[
          "which follows from Axiom 2.", "CodeText",ExpressionUUID->
           "96f89af4-c429-48c4-bb84-ca20824662b0"]},
         {Cell[
          "Substitution Lemma 7", "Subsection",ExpressionUUID->
           "af34de3c-0e50-4937-8428-d67868d3aeb3"]},
         {Cell[
          "It can be shown that:", "CodeText",ExpressionUUID->
           "5edb38ea-c92a-41a2-858e-efa33b3b4976"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"gccd", "[", 
             RowBox[{
              RowBox[{"gccd", "[", 
               RowBox[{"d", ",", "a"}], "]"}], ",", "t"}], "]"}], "\[Equal]", 
            "t"}]], "Code",ExpressionUUID->
           "47404493-0803-4180-bb7e-d89b3d3a4e5b"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "a872fd1c-b422-428f-bdb3-b57e344571b1"]},
         {Cell["\<\
We start by taking Substitution Lemma 6, and apply the substitution:\
\>", "CodeText",ExpressionUUID->"2b22e16d-7f84-4752-85b7-7e3c965ceb6c"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"gccd", "[", 
              RowBox[{"x1_", ",", "x2_"}], "]"}], "\[Rule]", 
             RowBox[{"gccd", "[", 
              RowBox[{"x2", ",", "x1"}], "]"}]}],
            DisplayForm]], "Code",ExpressionUUID->
           "32afb89c-50fe-4f39-90c9-b5ec487c01db"]},
         {Cell[
          "which follows from Axiom 2.", "CodeText",ExpressionUUID->
           "fb6d335b-237e-4914-98e4-c20a3d0d25c6"]},
         {Cell[
          "Substitution Lemma 8", "Subsection",ExpressionUUID->
           "bb72f054-20ee-4dae-970c-aac623bda507"]},
         {Cell[
          "It can be shown that:", "CodeText",ExpressionUUID->
           "975a132b-bbd8-4a42-b414-6db221534aa4"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"gccd", "[", 
             RowBox[{
              RowBox[{"gccd", "[", 
               RowBox[{
                RowBox[{"gccd", "[", 
                 RowBox[{"b", ",", "a"}], "]"}], ",", "a"}], "]"}], ",", 
              "t"}], "]"}], "\[Equal]", "t"}]], "Code",ExpressionUUID->
           "6e36d5f9-835b-4420-b26e-55c2ff3c2894"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "c5180c2f-f959-4c5b-906e-c07a973a06c0"]},
         {Cell["\<\
We start by taking Substitution Lemma 7, and apply the substitution:\
\>", "CodeText",ExpressionUUID->"134d33e9-243d-499f-a278-4040c39ee948"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{"d", "\[Rule]", 
             RowBox[{"gccd", "[", 
              RowBox[{"b", ",", "a"}], "]"}]}],
            DisplayForm]], "Code",ExpressionUUID->
           "dabe259f-0cd4-4dc5-ac00-fb23199a4c0d"]},
         {Cell[
          "which follows from Substitution Lemma 1.", "CodeText",
           ExpressionUUID->"7faf11d6-90c1-4c69-b747-b0590755aba9"]},
         {Cell[
          "Substitution Lemma 9", "Subsection",ExpressionUUID->
           "c74d6d4c-7b1f-4239-aac5-b755652cd557"]},
         {Cell[
          "It can be shown that:", "CodeText",ExpressionUUID->
           "c575b109-9567-4064-b5e2-9b18fbb49eef"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"gccd", "[", 
             RowBox[{
              RowBox[{"gccd", "[", 
               RowBox[{"b", ",", 
                RowBox[{"gccd", "[", 
                 RowBox[{"a", ",", "a"}], "]"}]}], "]"}], ",", "t"}], "]"}], 
            "\[Equal]", "t"}]], "Code",ExpressionUUID->
           "3b4f9753-2147-4865-aa2d-8471764d81e9"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "f5f2630b-f9f9-4fad-b84d-f8dac2e74024"]},
         {Cell["\<\
We start by taking Substitution Lemma 8, and apply the substitution:\
\>", "CodeText",ExpressionUUID->"6d995ae4-c715-4333-acda-303e79c8b499"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"gccd", "[", 
              RowBox[{
               RowBox[{"gccd", "[", 
                RowBox[{"x1_", ",", "x2_"}], "]"}], ",", "x3_"}], "]"}], 
             "\[Rule]", 
             RowBox[{"gccd", "[", 
              RowBox[{"x1", ",", 
               RowBox[{"gccd", "[", 
                RowBox[{"x2", ",", "x3"}], "]"}]}], "]"}]}],
            DisplayForm]], "Code",ExpressionUUID->
           "a33eafc7-0f6d-469f-a91e-20352c5ddea6"]},
         {Cell[
          "which follows from Axiom 3.", "CodeText",ExpressionUUID->
           "c6d9e919-43d9-4f74-8e9e-28c29c0e1df4"]},
         {Cell[
          "Substitution Lemma 10", "Subsection",ExpressionUUID->
           "4e053e1d-d811-4528-839a-eed4bd3e24a2"]},
         {Cell[
          "It can be shown that:", "CodeText",ExpressionUUID->
           "b22a6497-b253-410b-a110-834fe5d2091d"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"gccd", "[", 
             RowBox[{"b", ",", 
              RowBox[{"gccd", "[", 
               RowBox[{
                RowBox[{"gccd", "[", 
                 RowBox[{"a", ",", "a"}], "]"}], ",", "t"}], "]"}]}], "]"}], 
            "\[Equal]", "t"}]], "Code",ExpressionUUID->
           "f46c6f87-1977-4b1c-954e-f6d0c7ca166a"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "da4ec4da-7349-44ef-90d7-05959492fd4c"]},
         {Cell["\<\
We start by taking Substitution Lemma 9, and apply the substitution:\
\>", "CodeText",ExpressionUUID->"c3830a82-29d1-4444-a1b6-1e77d4f3bdba"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"gccd", "[", 
              RowBox[{
               RowBox[{"gccd", "[", 
                RowBox[{"x1_", ",", "x2_"}], "]"}], ",", "x3_"}], "]"}], 
             "\[Rule]", 
             RowBox[{"gccd", "[", 
              RowBox[{"x1", ",", 
               RowBox[{"gccd", "[", 
                RowBox[{"x2", ",", "x3"}], "]"}]}], "]"}]}],
            DisplayForm]], "Code",ExpressionUUID->
           "3e67e738-e44f-4655-b811-c053d2e6a219"]},
         {Cell[
          "which follows from Axiom 3.", "CodeText",ExpressionUUID->
           "82988462-b9d4-41c8-870e-aa3884966895"]},
         {Cell[
          "Substitution Lemma 11", "Subsection",ExpressionUUID->
           "028a6701-63f3-45ad-aaa4-1fc6fa4c8461"]},
         {Cell[
          "It can be shown that:", "CodeText",ExpressionUUID->
           "24490388-7927-47fd-9ebe-4220aa66ca03"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"gccd", "[", 
             RowBox[{
              RowBox[{"gccd", "[", 
               RowBox[{
                RowBox[{"gccd", "[", 
                 RowBox[{"a", ",", "a"}], "]"}], ",", "t"}], "]"}], ",", 
              "b"}], "]"}], "\[Equal]", "t"}]], "Code",ExpressionUUID->
           "16469d57-abb6-46ba-94a9-9031c148f1f5"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "8933331e-d9a6-4573-817a-fbb62b961da9"]},
         {Cell["\<\
We start by taking Substitution Lemma 10, and apply the substitution:\
\>", "CodeText",ExpressionUUID->"9b632617-67dd-47d3-928c-5d8707686c6f"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"gccd", "[", 
              RowBox[{"x1_", ",", "x2_"}], "]"}], "\[Rule]", 
             RowBox[{"gccd", "[", 
              RowBox[{"x2", ",", "x1"}], "]"}]}],
            DisplayForm]], "Code",ExpressionUUID->
           "9ffcdbb9-ffd5-4c4e-8999-8ae77c7914e1"]},
         {Cell[
          "which follows from Axiom 2.", "CodeText",ExpressionUUID->
           "17c4655e-7185-41dd-ad84-349aa2b02b88"]},
         {Cell[
          "Substitution Lemma 12", "Subsection",ExpressionUUID->
           "24cff679-1d8d-4fa0-8046-ad0fa6bed26f"]},
         {Cell[
          "It can be shown that:", "CodeText",ExpressionUUID->
           "b57ae490-36c3-4226-b7d4-c0eb2cd6ec04"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"gccd", "[", 
             RowBox[{
              RowBox[{"gccd", "[", 
               RowBox[{"a", ",", "t"}], "]"}], ",", "b"}], "]"}], "\[Equal]", 
            "t"}]], "Code",ExpressionUUID->
           "10510817-209c-43f0-a4ac-77f5896e08d3"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "e8f8e7a4-bfa2-46d8-b018-caf51b18feaf"]},
         {Cell["\<\
We start by taking Substitution Lemma 11, and apply the substitution:\
\>", "CodeText",ExpressionUUID->"11dd9ee9-ac79-495a-9da8-09f180115bec"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"gccd", "[", 
              RowBox[{"x1_", ",", "x1_"}], "]"}], "\[Rule]", "x1"}],
            DisplayForm]], "Code",ExpressionUUID->
           "15a34557-bb45-4dee-b13d-f6d3202e4fdb"]},
         {Cell[
          "which follows from Axiom 1.", "CodeText",ExpressionUUID->
           "e5755d11-8a94-4282-b327-9052a818fcd5"]},
         {Cell[
          "Substitution Lemma 13", "Subsection",ExpressionUUID->
           "6b3c84c7-374e-47a7-9d44-dc5761a09ead"]},
         {Cell[
          "It can be shown that:", "CodeText",ExpressionUUID->
           "ba7cb963-51f9-4ac0-a805-1c76f69985b2"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"gccd", "[", 
             RowBox[{"t", ",", "b"}], "]"}], "\[Equal]", "t"}]], "Code",
           ExpressionUUID->"d8204256-9ce1-43ec-a87c-2945ac06a21f"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "142f76bc-9cef-42cd-914a-58134a78ef49"]},
         {Cell["\<\
We start by taking Substitution Lemma 12, and apply the substitution:\
\>", "CodeText",ExpressionUUID->"49ea97ac-7a3c-49a5-b8ff-f23d30532051"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"gccd", "[", 
              RowBox[{"a", ",", "t"}], "]"}], "\[Rule]", "t"}],
            DisplayForm]], "Code",ExpressionUUID->
           "c86de8bd-7e0a-4066-a7d0-010098d737af"]},
         {Cell[
          "which follows from Axiom 4.", "CodeText",ExpressionUUID->
           "ae6206fa-4a99-4fe0-a7eb-3ce2f4beb4da"]},
         {Cell[
          "Substitution Lemma 14", "Subsection",ExpressionUUID->
           "bfce28cf-2094-4c90-8319-995f4d4acc02"]},
         {Cell[
          "It can be shown that:", "CodeText",ExpressionUUID->
           "b9f9c8cd-ead5-4dff-b373-6010065d05c8"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"gccd", "[", 
             RowBox[{"b", ",", "t"}], "]"}], "\[Equal]", "t"}]], "Code",
           ExpressionUUID->"b158eac0-243b-484f-bde2-2dde788d2480"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "deaee860-ddd1-479e-817d-91b5a399ded1"]},
         {Cell["\<\
We start by taking Substitution Lemma 13, and apply the substitution:\
\>", "CodeText",ExpressionUUID->"36fcada3-0197-463e-91d5-2d05d0cfa242"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"gccd", "[", 
              RowBox[{"x1_", ",", "x2_"}], "]"}], "\[Rule]", 
             RowBox[{"gccd", "[", 
              RowBox[{"x2", ",", "x1"}], "]"}]}],
            DisplayForm]], "Code",ExpressionUUID->
           "ef100f69-ec7b-4268-941c-0c070b2567e7"]},
         {Cell[
          "which follows from Axiom 2.", "CodeText",ExpressionUUID->
           "a38e2443-69cb-41a0-80b1-b3f7cad9eb89"]},
         {Cell[
          "Conclusion 1", "Subsection",ExpressionUUID->
           "4f2aea9a-045c-4d27-b033-8ec21b6d7c38"]},
         {Cell[
          "We obtain the conclusion:", "CodeText",ExpressionUUID->
           "6a7eca9a-2a24-4123-bafd-5f7a952362b0"]},
         {Cell[BoxData[
          "True"], "Code",ExpressionUUID->
           "e57639ad-d413-46b3-99fd-1e15efd578bd"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "06c53fd2-fc62-4b66-b03f-4b3dd7c75de0"]},
         {Cell[
          "Take Substitution Lemma 14, and apply the substitution:", 
           "CodeText",ExpressionUUID->"f01694bc-8bb1-443f-95c8-3f79300faf64"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{"t", "\[Rule]", 
             RowBox[{"gccd", "[", 
              RowBox[{"b", ",", "t"}], "]"}]}],
            DisplayForm]], "Code",ExpressionUUID->
           "a03fb0d5-8960-4d43-afa6-0bf63318df14"]},
         {Cell[
          "which follows from Axiom 6.", "CodeText",ExpressionUUID->
           "91991122-eea5-46f5-9b20-e5a714897422"]}
        },
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
       Background->GrayLevel[1],
       Frame->True,
       FrameStyle->GrayLevel[0, 0.2]]}
    },
    GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
   BaseStyle->{FontFamily -> "Times"},
   DefaultBaseStyle->{},
   FrameMargins->5],
  DocumentNotebook[{
    TextCell["Axiom 1", "Subsection"], 
    TextCell["We are given that:", "CodeText"], 
    ExpressionCell[$CellContext`x1 == $CellContext`gccd[$CellContext`x1, \
$CellContext`x1], "Code"], 
    TextCell["Axiom 2", "Subsection"], 
    TextCell["We are given that:", "CodeText"], 
    ExpressionCell[$CellContext`gccd[$CellContext`x1, $CellContext`x2] == \
$CellContext`gccd[$CellContext`x2, $CellContext`x1], "Code"], 
    TextCell["Axiom 3", "Subsection"], 
    TextCell["We are given that:", "CodeText"], 
    ExpressionCell[$CellContext`gccd[$CellContext`x1, 
       $CellContext`gccd[$CellContext`x2, $CellContext`x3]] == \
$CellContext`gccd[
       $CellContext`gccd[$CellContext`x1, $CellContext`x2], $CellContext`x3], 
     "Code"], 
    TextCell["Axiom 4", "Subsection"], 
    TextCell["We are given that:", "CodeText"], 
    ExpressionCell[$CellContext`gccd[$CellContext`a, $CellContext`t] == \
$CellContext`t, "Code"], 
    TextCell["Axiom 5", "Subsection"], 
    TextCell["We are given that:", "CodeText"], 
    ExpressionCell[$CellContext`gccd[$CellContext`a, $CellContext`b] == \
$CellContext`d, "Code"], 
    TextCell["Axiom 6", "Subsection"], 
    TextCell["We are given that:", "CodeText"], 
    ExpressionCell[$CellContext`gccd[$CellContext`b, $CellContext`t] == \
$CellContext`t, "Code"], 
    TextCell["Hypothesis 1", "Subsection"], 
    TextCell["We would like to show that:", "CodeText"], 
    ExpressionCell[$CellContext`gccd[$CellContext`d, $CellContext`t] == \
$CellContext`t, "Code"], 
    TextCell["Substitution Lemma 1", "Subsection"], 
    TextCell["It can be shown that:", "CodeText"], 
    ExpressionCell[$CellContext`gccd[$CellContext`b, $CellContext`a] == \
$CellContext`d, "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell[
      "We start by taking Axiom 5, and apply the substitution:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"gccd", "[", 
            RowBox[{"x1_", ",", "x2_"}], "]"}], "\[Rule]", 
          RowBox[{"gccd", "[", 
            RowBox[{"x2", ",", "x1"}], "]"}]}]], "Code"], 
      TextCell["which follows from Axiom 2.", "CodeText"]}, 1], 
    TextCell["Substitution Lemma 2", "Subsection"], 
    TextCell["It can be shown that:", "CodeText"], 
    ExpressionCell[$CellContext`gccd[$CellContext`t, $CellContext`d] == \
$CellContext`t, "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell[
      "We start by taking Hypothesis 1, and apply the substitution:", 
       "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"gccd", "[", 
            RowBox[{"x1_", ",", "x2_"}], "]"}], "\[Rule]", 
          RowBox[{"gccd", "[", 
            RowBox[{"x2", ",", "x1"}], "]"}]}]], "Code"], 
      TextCell["which follows from Axiom 2.", "CodeText"]}, 1], 
    TextCell["Substitution Lemma 3", "Subsection"], 
    TextCell["It can be shown that:", "CodeText"], 
    ExpressionCell[$CellContext`gccd[
       $CellContext`gccd[$CellContext`a, $CellContext`t], $CellContext`d] == \
$CellContext`t, "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell[
      "We start by taking Substitution Lemma 2, and apply the substitution:", 
       "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{"t", "\[Rule]", 
          RowBox[{"gccd", "[", 
            RowBox[{"a", ",", "t"}], "]"}]}]], "Code"], 
      TextCell["which follows from Axiom 4.", "CodeText"]}, 1], 
    TextCell["Substitution Lemma 4", "Subsection"], 
    TextCell["It can be shown that:", "CodeText"], 
    ExpressionCell[$CellContext`gccd[
       $CellContext`gccd[$CellContext`t, $CellContext`a], $CellContext`d] == \
$CellContext`t, "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell[
      "We start by taking Substitution Lemma 3, and apply the substitution:", 
       "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"gccd", "[", 
            RowBox[{"x1_", ",", "x2_"}], "]"}], "\[Rule]", 
          RowBox[{"gccd", "[", 
            RowBox[{"x2", ",", "x1"}], "]"}]}]], "Code"], 
      TextCell["which follows from Axiom 2.", "CodeText"]}, 1], 
    TextCell["Substitution Lemma 5", "Subsection"], 
    TextCell["It can be shown that:", "CodeText"], 
    ExpressionCell[$CellContext`gccd[$CellContext`t, 
       $CellContext`gccd[$CellContext`a, $CellContext`d]] == $CellContext`t, 
     "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell[
      "We start by taking Substitution Lemma 4, and apply the substitution:", 
       "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"gccd", "[", 
            RowBox[{
              RowBox[{"gccd", "[", 
                RowBox[{"x1_", ",", "x2_"}], "]"}], ",", "x3_"}], "]"}], 
          "\[Rule]", 
          RowBox[{"gccd", "[", 
            RowBox[{"x1", ",", 
              RowBox[{"gccd", "[", 
                RowBox[{"x2", ",", "x3"}], "]"}]}], "]"}]}]], "Code"], 
      TextCell["which follows from Axiom 3.", "CodeText"]}, 1], 
    TextCell["Substitution Lemma 6", "Subsection"], 
    TextCell["It can be shown that:", "CodeText"], 
    ExpressionCell[$CellContext`gccd[$CellContext`t, 
       $CellContext`gccd[$CellContext`d, $CellContext`a]] == $CellContext`t, 
     "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell[
      "We start by taking Substitution Lemma 5, and apply the substitution:", 
       "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"gccd", "[", 
            RowBox[{"x1_", ",", "x2_"}], "]"}], "\[Rule]", 
          RowBox[{"gccd", "[", 
            RowBox[{"x2", ",", "x1"}], "]"}]}]], "Code"], 
      TextCell["which follows from Axiom 2.", "CodeText"]}, 1], 
    TextCell["Substitution Lemma 7", "Subsection"], 
    TextCell["It can be shown that:", "CodeText"], 
    ExpressionCell[$CellContext`gccd[
       $CellContext`gccd[$CellContext`d, $CellContext`a], $CellContext`t] == \
$CellContext`t, "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell[
      "We start by taking Substitution Lemma 6, and apply the substitution:", 
       "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"gccd", "[", 
            RowBox[{"x1_", ",", "x2_"}], "]"}], "\[Rule]", 
          RowBox[{"gccd", "[", 
            RowBox[{"x2", ",", "x1"}], "]"}]}]], "Code"], 
      TextCell["which follows from Axiom 2.", "CodeText"]}, 1], 
    TextCell["Substitution Lemma 8", "Subsection"], 
    TextCell["It can be shown that:", "CodeText"], 
    ExpressionCell[$CellContext`gccd[
       $CellContext`gccd[
        $CellContext`gccd[$CellContext`b, $CellContext`a], $CellContext`a], \
$CellContext`t] == $CellContext`t, "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell[
      "We start by taking Substitution Lemma 7, and apply the substitution:", 
       "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{"d", "\[Rule]", 
          RowBox[{"gccd", "[", 
            RowBox[{"b", ",", "a"}], "]"}]}]], "Code"], 
      TextCell["which follows from Substitution Lemma 1.", "CodeText"]}, 1], 
    TextCell["Substitution Lemma 9", "Subsection"], 
    TextCell["It can be shown that:", "CodeText"], 
    ExpressionCell[$CellContext`gccd[
       $CellContext`gccd[$CellContext`b, 
        $CellContext`gccd[$CellContext`a, $CellContext`a]], $CellContext`t] == \
$CellContext`t, "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell[
      "We start by taking Substitution Lemma 8, and apply the substitution:", 
       "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"gccd", "[", 
            RowBox[{
              RowBox[{"gccd", "[", 
                RowBox[{"x1_", ",", "x2_"}], "]"}], ",", "x3_"}], "]"}], 
          "\[Rule]", 
          RowBox[{"gccd", "[", 
            RowBox[{"x1", ",", 
              RowBox[{"gccd", "[", 
                RowBox[{"x2", ",", "x3"}], "]"}]}], "]"}]}]], "Code"], 
      TextCell["which follows from Axiom 3.", "CodeText"]}, 1], 
    TextCell["Substitution Lemma 10", "Subsection"], 
    TextCell["It can be shown that:", "CodeText"], 
    ExpressionCell[$CellContext`gccd[$CellContext`b, 
       $CellContext`gccd[
        $CellContext`gccd[$CellContext`a, $CellContext`a], $CellContext`t]] == \
$CellContext`t, "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell[
      "We start by taking Substitution Lemma 9, and apply the substitution:", 
       "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"gccd", "[", 
            RowBox[{
              RowBox[{"gccd", "[", 
                RowBox[{"x1_", ",", "x2_"}], "]"}], ",", "x3_"}], "]"}], 
          "\[Rule]", 
          RowBox[{"gccd", "[", 
            RowBox[{"x1", ",", 
              RowBox[{"gccd", "[", 
                RowBox[{"x2", ",", "x3"}], "]"}]}], "]"}]}]], "Code"], 
      TextCell["which follows from Axiom 3.", "CodeText"]}, 1], 
    TextCell["Substitution Lemma 11", "Subsection"], 
    TextCell["It can be shown that:", "CodeText"], 
    ExpressionCell[$CellContext`gccd[
       $CellContext`gccd[
        $CellContext`gccd[$CellContext`a, $CellContext`a], $CellContext`t], \
$CellContext`b] == $CellContext`t, "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell[
      "We start by taking Substitution Lemma 10, and apply the substitution:",
        "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"gccd", "[", 
            RowBox[{"x1_", ",", "x2_"}], "]"}], "\[Rule]", 
          RowBox[{"gccd", "[", 
            RowBox[{"x2", ",", "x1"}], "]"}]}]], "Code"], 
      TextCell["which follows from Axiom 2.", "CodeText"]}, 1], 
    TextCell["Substitution Lemma 12", "Subsection"], 
    TextCell["It can be shown that:", "CodeText"], 
    ExpressionCell[$CellContext`gccd[
       $CellContext`gccd[$CellContext`a, $CellContext`t], $CellContext`b] == \
$CellContext`t, "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell[
      "We start by taking Substitution Lemma 11, and apply the substitution:",
        "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"gccd", "[", 
            RowBox[{"x1_", ",", "x1_"}], "]"}], "\[Rule]", "x1"}]], "Code"], 
      TextCell["which follows from Axiom 1.", "CodeText"]}, 1], 
    TextCell["Substitution Lemma 13", "Subsection"], 
    TextCell["It can be shown that:", "CodeText"], 
    ExpressionCell[$CellContext`gccd[$CellContext`t, $CellContext`b] == \
$CellContext`t, "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell[
      "We start by taking Substitution Lemma 12, and apply the substitution:",
        "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"gccd", "[", 
            RowBox[{"a", ",", "t"}], "]"}], "\[Rule]", "t"}]], "Code"], 
      TextCell["which follows from Axiom 4.", "CodeText"]}, 1], 
    TextCell["Substitution Lemma 14", "Subsection"], 
    TextCell["It can be shown that:", "CodeText"], 
    ExpressionCell[$CellContext`gccd[$CellContext`b, $CellContext`t] == \
$CellContext`t, "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell[
      "We start by taking Substitution Lemma 13, and apply the substitution:",
        "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"gccd", "[", 
            RowBox[{"x1_", ",", "x2_"}], "]"}], "\[Rule]", 
          RowBox[{"gccd", "[", 
            RowBox[{"x2", ",", "x1"}], "]"}]}]], "Code"], 
      TextCell["which follows from Axiom 2.", "CodeText"]}, 1], 
    TextCell["Conclusion 1", "Subsection"], 
    TextCell["We obtain the conclusion:", "CodeText"], 
    ExpressionCell[True, "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell[
      "Take Substitution Lemma 14, and apply the substitution:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{"t", "\[Rule]", 
          RowBox[{"gccd", "[", 
            RowBox[{"b", ",", "t"}], "]"}]}]], "Code"], 
      TextCell["which follows from Axiom 6.", "CodeText"]}, 1]}]]], "Output",
 CellChangeTimes->{{3.8794251785912714`*^9, 3.8794251922638125`*^9}, {
  3.8794261310329533`*^9, 3.879426142989826*^9}},
 CellLabel->"Out[93]=",ExpressionUUID->"115c9f4c-6564-40dc-8929-57b8923feb83"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"axiomDef1", "=", " ", 
  RowBox[{"{", 
   RowBox[{"ForAll", "[", 
    RowBox[{
     RowBox[{"{", "a", "}"}], ",", 
     RowBox[{"Implies", "[", 
      RowBox[{
       RowBox[{"Element", "[", 
        RowBox[{"a", ",", "A"}], "]"}], ","}], "]"}]}], "]"}], 
   "}"}]}]], "Input",
 CellChangeTimes->{{3.8794531568815527`*^9, 3.8794531744839945`*^9}, {
   3.8794532583412*^9, 3.8794533087469425`*^9}, 
   3.87945383354443*^9},ExpressionUUID->"79dc2dc0-8ba6-4eac-a840-\
c6e23ea81e32"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"axiomDef1", "=", " ", 
   RowBox[{"Implies", "[", 
    RowBox[{
     RowBox[{"ForAll", "[", 
      RowBox[{
       RowBox[{"{", "a", "}"}], ",", 
       RowBox[{"And", "[", 
        RowBox[{
         RowBox[{"Element", "[", 
          RowBox[{"a", ",", "A"}], "]"}], ",", 
         RowBox[{"Element", "[", 
          RowBox[{"a", ",", "B"}], "]"}]}], "]"}]}], "]"}], ",", 
     RowBox[{"A", " ", "\[Subset]", "B"}]}], "]"}]}], 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.8794538422706842`*^9, 3.879453846894451*^9}, {
  3.8794540219153185`*^9, 3.879454046562837*^9}, {3.8794541568954916`*^9, 
  3.8794541848127117`*^9}, {3.8794542173897333`*^9, 3.8794542474030704`*^9}, {
  3.8794542816014347`*^9, 3.8794543226726017`*^9}, {3.879454401939001*^9, 
  3.8794544068949237`*^9}},ExpressionUUID->"7eca51c3-f1d1-4d22-8096-\
0a61fe361765"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   SubscriptBox["\[ForAll]", 
    RowBox[{"{", "a", "}"}]], 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"a", "\[Element]", "A"}], "&&", 
     RowBox[{"a", "\[Element]", "B"}]}], ")"}]}], "\[Implies]", 
  RowBox[{"A", "\[Subset]", "B"}]}]], "Output",
 CellChangeTimes->{3.8794543243686185`*^9, 3.8794543969283323`*^9},
 CellLabel->"Out[20]=",ExpressionUUID->"a9550782-af0f-48ea-ab00-4b35e067bf0a"]
}, Open  ]],

Cell[BoxData["Atom"], "Input",
 CellChangeTimes->{{3.879454418321323*^9, 
  3.8794544191384845`*^9}},ExpressionUUID->"18adb6d7-8b34-4c01-a7e0-\
e98245eda034"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Head", "@", "axiomDef1"}]], "Input",
 CellChangeTimes->{{3.879454457162837*^9, 3.8794544749453707`*^9}},
 CellLabel->"In[21]:=",ExpressionUUID->"91ccacfd-6a25-4722-a9c4-0b5570ab8499"],

Cell[BoxData["Implies"], "Output",
 CellChangeTimes->{3.879454475281372*^9},
 CellLabel->"Out[21]=",ExpressionUUID->"a310b251-70fb-4bc0-bba2-0d483074463d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Information", "[", "Implies", "]"}]], "Input",
 NumberMarks->False,
 CellLabel->"In[22]:=",ExpressionUUID->"836bbd22-194c-4fe0-ac27-4b349a267872"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = True, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox[
           PaneBox[
            TooltipBox[
             ButtonBox[
              PaneSelectorBox[{False->
               
               DynamicBox[FEPrivate`FrontEndResource[
                "FEBitmaps", "InformationHelpIcon"],
                ImageSizeCache->{13., {4., 9.}}], True->
               
               DynamicBox[FEPrivate`FrontEndResource[
                "FEBitmaps", "InformationHelpIconHot"],
                ImageSizeCache->{13., {4., 9.}}]}, Dynamic[
                CurrentValue["MouseOver"]]],
              Appearance->None,
              BaseStyle->"Link",
              ButtonData->"paclet:ref/Implies",
              ButtonNote->"paclet:ref/Implies"],
             "\"paclet:ref/Implies\""],
            FrameMargins->{{0, 4}, {0, 2}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[{\\\"Implies\\\", \\\"[\\\", \
RowBox[{StyleBox[\\\"p\\\", \\\"TI\\\"], \\\",\\\", StyleBox[\\\"q\\\", \
\\\"TI\\\"]}], \\\"]\\\"}]\\) represents the logical implication \
\\!\\(\\*RowBox[{\\\"p\\\", \\\"\[DoubleRightArrow]\\\", \\\"q\\\"}]\\). \
\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Documentation\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Documentation\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Documentation", "Tooltip"]& ], 
                   TemplateBox[{
                    
                    TemplateBox[{
                    "\"Local \[RightGuillemet]\"", "paclet:ref/Implies", 
                    "paclet:ref/Implies", "Link", {
                    RGBColor[0.9686274509803922, 0.4666666666666667, 0.]}, 
                    BaseStyle -> {
                    RGBColor[0.0784313725490196, 0.1568627450980392, 0.6]}}, 
                    "HyperlinkTemplate"], "\"  \"", 
                    StyleBox[
                    "\"|\"", "InformationRowLabel", StripOnInput -> False], 
                    "\"  \"", 
                    TemplateBox[{"\"Web \[RightGuillemet]\"", {
                    URL[
                    "http://reference.wolfram.com/language/ref/Implies.html"],
                     None}, 
                    "http://reference.wolfram.com/language/ref/Implies.html", 
                    "Hyperlink", {
                    RGBColor[0.9686274509803922, 0.4666666666666667, 0.]}, 
                    BaseStyle -> {
                    RGBColor[0.0784313725490196, 0.1568627450980392, 0.6]}}, 
                    "HyperlinkTemplate"]},
                    "RowDefault"]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"System`Implies\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"],
               ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox[
           PaneBox[
            TooltipBox[
             ButtonBox[
              PaneSelectorBox[{False->
               
               DynamicBox[FEPrivate`FrontEndResource[
                "FEBitmaps", "InformationHelpIcon"]], True->
               
               DynamicBox[FEPrivate`FrontEndResource[
                "FEBitmaps", "InformationHelpIconHot"]]}, Dynamic[
                CurrentValue["MouseOver"]]],
              Appearance->None,
              BaseStyle->"Link",
              ButtonData->"paclet:ref/Implies",
              ButtonNote->"paclet:ref/Implies"],
             "\"paclet:ref/Implies\""],
            FrameMargins->{{0, 4}, {0, 2}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[{\\\"Implies\\\", \\\"[\\\", \
RowBox[{StyleBox[\\\"p\\\", \\\"TI\\\"], \\\",\\\", StyleBox[\\\"q\\\", \
\\\"TI\\\"]}], \\\"]\\\"}]\\) represents the logical implication \
\\!\\(\\*RowBox[{\\\"p\\\", \\\"\[DoubleRightArrow]\\\", \\\"q\\\"}]\\). \
\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*RowBox[{\"Implies\", \"[\", RowBox[{StyleBox[\"p\", \"TI\"], \
\",\", StyleBox[\"q\", \"TI\"]}], \"]\"}]\) represents the logical \
implication \!\(\*RowBox[{\"p\", \"\[DoubleRightArrow]\", \"q\"}]\). ", 
    "Documentation" -> 
    Association[
     "Local" -> "paclet:ref/Implies", "Web" -> 
      "http://reference.wolfram.com/language/ref/Implies.html"], "OwnValues" -> 
    None, "UpValues" -> None, "DownValues" -> None, "SubValues" -> None, 
    "DefaultValues" -> None, "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {Protected}, "FullName" -> 
    "System`Implies"], True]]], "Output",
 CellChangeTimes->{3.879454480091407*^9},
 CellLabel->"Out[22]=",ExpressionUUID->"b3f98709-2b8d-4d10-beba-b28fcd8892ae"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"(*", "\[IndentingNewLine]", 
  RowBox[{"Boolean", " ", "Algebra", " ", "Axioms"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", "*)"}]], "Input",
 CellChangeTimes->{{3.8799576987357454`*^9, 
  3.879957746166455*^9}},ExpressionUUID->"01e4e320-12a2-4d3c-bf3a-\
b25f0878ff29"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"BooleanTable", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"Not", "[", "x", "]"}]}], "}"}], ",", 
     RowBox[{"{", "x", "}"}]}], "]"}], "//", "Grid"}]}]], "Input",
 CellChangeTimes->{{3.8799595465550365`*^9, 3.8799595472389717`*^9}, {
  3.879959583562858*^9, 3.8799596048633795`*^9}},
 CellLabel->"In[45]:=",ExpressionUUID->"40548065-98a1-4d13-a629-515126bad77d"],

Cell[BoxData[
 TagBox[GridBox[{
    {"True", "False"},
    {"False", "True"}
   },
   AutoDelete->False,
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{
  3.8799595499011526`*^9, {3.879959587893724*^9, 3.8799596053579063`*^9}},
 CellLabel->"Out[45]=",ExpressionUUID->"021103bd-07f8-4232-abac-4a66a5b70e74"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"negationP", ":=", 
    RowBox[{"{", 
     RowBox[{"ForAll", "[", 
      RowBox[{
       RowBox[{"{", "p", "}"}], ",", 
       RowBox[{
        RowBox[{"not", "[", "p", "]"}], "==", 
        RowBox[{"Not", "[", "p", "]"}]}]}], "]"}], "}"}]}], 
   "\[IndentingNewLine]", 
   RowBox[{"commutativityAxiomAnd", ":=", " ", 
    RowBox[{"{", 
     RowBox[{"ForAll", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"p", ",", "q"}], "}"}], ",", 
       RowBox[{
        RowBox[{"and", "[", 
         RowBox[{"p", ",", "q"}], "]"}], "==", 
        RowBox[{"and", "[", 
         RowBox[{"q", ",", "p"}], "]"}]}]}], "]"}], "}"}]}], 
   "\[IndentingNewLine]", 
   RowBox[{"commutativityAxiomOr", ":=", " ", 
    RowBox[{"{", 
     RowBox[{"ForAll", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"p", ",", "q"}], "}"}], ",", 
       RowBox[{
        RowBox[{"or", "[", 
         RowBox[{"p", ",", "q"}], "]"}], "==", 
        RowBox[{"or", "[", 
         RowBox[{"q", ",", "p"}], "]"}]}]}], "]"}], "}"}]}], 
   "\[IndentingNewLine]", 
   RowBox[{"associativityAxiomAnd", ":=", 
    RowBox[{"{", 
     RowBox[{"ForAll", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"p", ",", "q", ",", "r"}], "}"}], ",", 
       RowBox[{
        RowBox[{"and", "[", 
         RowBox[{
          RowBox[{"and", "[", 
           RowBox[{"p", ",", "q"}], "]"}], ",", "r"}], "]"}], "==", 
        RowBox[{"and", "[", 
         RowBox[{"p", ",", 
          RowBox[{"and", "[", 
           RowBox[{"q", ",", "r"}], "]"}]}], "]"}]}]}], "]"}], "}"}]}], 
   "\[IndentingNewLine]", 
   RowBox[{"associativityAxiomOr", ":=", " ", 
    RowBox[{"{", 
     RowBox[{"ForAll", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"p", ",", "q", ",", "r"}], "}"}], ",", 
       RowBox[{
        RowBox[{"or", "[", 
         RowBox[{
          RowBox[{"or", "[", 
           RowBox[{"p", ",", "q"}], "]"}], ",", "r"}], "]"}], "==", 
        RowBox[{"or", "[", 
         RowBox[{"p", ",", 
          RowBox[{"or", "[", 
           RowBox[{"q", ",", "r"}], "]"}]}], "]"}]}]}], "]"}], "}"}]}], 
   "\[IndentingNewLine]", 
   RowBox[{"distributivityAxiomAnd", ":=", " ", 
    RowBox[{"{", 
     RowBox[{"ForAll", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"p", ",", "q", ",", "r"}], "}"}], ",", 
       RowBox[{
        RowBox[{"and", "[", 
         RowBox[{"p", ",", 
          RowBox[{"or", "[", 
           RowBox[{"q", ",", "r"}], "]"}]}], "]"}], "==", 
        RowBox[{"or", "[", 
         RowBox[{
          RowBox[{"and", "[", 
           RowBox[{"p", ",", "q"}], "]"}], ",", 
          RowBox[{"and", "[", 
           RowBox[{"q", ",", "r"}], "]"}]}], "]"}]}]}], "]"}], "}"}]}], 
   "\[IndentingNewLine]", 
   RowBox[{"distributivityAxiomOr", ":=", " ", 
    RowBox[{"{", 
     RowBox[{"ForAll", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"p", ",", "q", ",", "r"}], "}"}], ",", 
       RowBox[{
        RowBox[{"or", "[", 
         RowBox[{"p", ",", 
          RowBox[{"and", "[", 
           RowBox[{"q", ",", "r"}], "]"}]}], "]"}], "==", 
        RowBox[{"and", "[", 
         RowBox[{
          RowBox[{"or", "[", 
           RowBox[{"p", ",", "q"}], "]"}], ",", 
          RowBox[{"or", "[", 
           RowBox[{"p", ",", "r"}], "]"}]}], "]"}]}]}], "]"}], "}"}]}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"identityAxiomAnd", ":=", 
    RowBox[{"{", 
     RowBox[{"ForAll", "[", 
      RowBox[{
       RowBox[{"{", "p", "}"}], ",", 
       RowBox[{
        RowBox[{"and", "[", 
         RowBox[{"p", ",", "tau"}], "]"}], "==", "p"}]}], "]"}], "}"}]}], 
   "\[IndentingNewLine]", 
   RowBox[{"identityAxiomOr", ":=", 
    RowBox[{"{", 
     RowBox[{"ForAll", "[", 
      RowBox[{
       RowBox[{"{", "p", "}"}], ",", 
       RowBox[{
        RowBox[{"and", "[", 
         RowBox[{"p", ",", "con"}], "]"}], "==", "con"}]}], "]"}], "}"}]}], 
   "\[IndentingNewLine]", 
   RowBox[{"negationAnd", ":=", 
    RowBox[{"{", 
     RowBox[{"ForAll", "[", 
      RowBox[{
       RowBox[{"{", "p", "}"}], ",", 
       RowBox[{
        RowBox[{"and", "[", 
         RowBox[{"p", ",", 
          RowBox[{"not", "[", "p", "]"}]}], "]"}], "==", "con"}]}], "]"}], 
     "}"}]}], "\[IndentingNewLine]", 
   RowBox[{"negationOr", ":=", 
    RowBox[{"{", 
     RowBox[{"ForAll", "[", 
      RowBox[{
       RowBox[{"{", "p", "}"}], ",", 
       RowBox[{
        RowBox[{"or", "[", 
         RowBox[{"p", ",", 
          RowBox[{"not", "[", "p", "]"}]}], "]"}], "==", "tau"}]}], "]"}], 
     "}"}]}]}]}]], "Input",
 CellChangeTimes->{{3.879957754698942*^9, 3.879957813976719*^9}, {
   3.8799578564415426`*^9, 3.8799579639920897`*^9}, {3.8799580445509925`*^9, 
   3.879958054554186*^9}, {3.879958145658487*^9, 3.8799581973676825`*^9}, {
   3.8799582621617537`*^9, 3.8799585076351223`*^9}, {3.879958553832739*^9, 
   3.87995858554394*^9}, {3.8799586275564013`*^9, 3.879958681196024*^9}, {
   3.8799587459674993`*^9, 3.879958753006339*^9}, {3.879958794184821*^9, 
   3.879958794559988*^9}, {3.8799589008023853`*^9, 3.879958917779827*^9}, 
   3.8799589553570795`*^9, {3.8799592935111403`*^9, 3.879959332850503*^9}, {
   3.8799594159969325`*^9, 3.879959424672537*^9}, {3.879960758379181*^9, 
   3.8799607880688124`*^9}},
 CellLabel->"In[57]:=",ExpressionUUID->"b335ecdc-dd0e-448a-a420-d9325fa6b047"],

Cell[BoxData["\[IndentingNewLine]"], "Input",
 CellChangeTimes->{
  3.8799610407923355`*^9},ExpressionUUID->"10f66a7e-f2f5-4424-84cc-\
0d06c2e93563"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"booleanAlgebraAxioms", "=", " ", 
  RowBox[{"Union", "[", 
   RowBox[{
   "negationP", ",", "commutativityAxiomAnd", ",", "commutativityAxiomOr", 
    ",", "associativityAxiomAnd", ",", "associativityAxiomOr", ",", 
    "distributivityAxiomAnd", ",", "distributivityAxiomOr", ",", 
    "identityAxiomAnd", ",", "identityAxiomOr", ",", "negationAnd", ",", 
    "negationOr"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.879958860899421*^9, 3.879958894620259*^9}, {
  3.8799589365477805`*^9, 3.879958980996281*^9}, {3.879960959043806*^9, 
  3.8799609595812187`*^9}, {3.8799610621605854`*^9, 3.8799610798726654`*^9}},
 CellLabel->"In[68]:=",ExpressionUUID->"96e5e2c4-6145-4d9c-be2f-e4bf850e0cf3"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    SubscriptBox["\[ForAll]", 
     RowBox[{"{", "p", "}"}]], 
    RowBox[{
     RowBox[{"and", "[", 
      RowBox[{"p", ",", "con"}], "]"}], "\[Equal]", "con"}]}], ",", 
   RowBox[{
    SubscriptBox["\[ForAll]", 
     RowBox[{"{", "p", "}"}]], 
    RowBox[{
     RowBox[{"and", "[", 
      RowBox[{"p", ",", "tau"}], "]"}], "\[Equal]", "p"}]}], ",", 
   RowBox[{
    SubscriptBox["\[ForAll]", 
     RowBox[{"{", "p", "}"}]], 
    RowBox[{
     RowBox[{"and", "[", 
      RowBox[{"p", ",", 
       RowBox[{"not", "[", "p", "]"}]}], "]"}], "\[Equal]", "con"}]}], ",", 
   RowBox[{
    SubscriptBox["\[ForAll]", 
     RowBox[{"{", "p", "}"}]], 
    RowBox[{
     RowBox[{"not", "[", "p", "]"}], "\[Equal]", 
     RowBox[{"!", "p"}]}]}], ",", 
   RowBox[{
    SubscriptBox["\[ForAll]", 
     RowBox[{"{", "p", "}"}]], 
    RowBox[{
     RowBox[{"or", "[", 
      RowBox[{"p", ",", 
       RowBox[{"not", "[", "p", "]"}]}], "]"}], "\[Equal]", "tau"}]}], ",", 
   RowBox[{
    SubscriptBox["\[ForAll]", 
     RowBox[{"{", 
      RowBox[{"p", ",", "q"}], "}"}]], 
    RowBox[{
     RowBox[{"and", "[", 
      RowBox[{"p", ",", "q"}], "]"}], "\[Equal]", 
     RowBox[{"and", "[", 
      RowBox[{"q", ",", "p"}], "]"}]}]}], ",", 
   RowBox[{
    SubscriptBox["\[ForAll]", 
     RowBox[{"{", 
      RowBox[{"p", ",", "q"}], "}"}]], 
    RowBox[{
     RowBox[{"or", "[", 
      RowBox[{"p", ",", "q"}], "]"}], "\[Equal]", 
     RowBox[{"or", "[", 
      RowBox[{"q", ",", "p"}], "]"}]}]}], ",", 
   RowBox[{
    SubscriptBox["\[ForAll]", 
     RowBox[{"{", 
      RowBox[{"p", ",", "q", ",", "r"}], "}"}]], 
    RowBox[{
     RowBox[{"and", "[", 
      RowBox[{"p", ",", 
       RowBox[{"or", "[", 
        RowBox[{"q", ",", "r"}], "]"}]}], "]"}], "\[Equal]", 
     RowBox[{"or", "[", 
      RowBox[{
       RowBox[{"and", "[", 
        RowBox[{"p", ",", "q"}], "]"}], ",", 
       RowBox[{"and", "[", 
        RowBox[{"q", ",", "r"}], "]"}]}], "]"}]}]}], ",", 
   RowBox[{
    SubscriptBox["\[ForAll]", 
     RowBox[{"{", 
      RowBox[{"p", ",", "q", ",", "r"}], "}"}]], 
    RowBox[{
     RowBox[{"and", "[", 
      RowBox[{
       RowBox[{"and", "[", 
        RowBox[{"p", ",", "q"}], "]"}], ",", "r"}], "]"}], "\[Equal]", 
     RowBox[{"and", "[", 
      RowBox[{"p", ",", 
       RowBox[{"and", "[", 
        RowBox[{"q", ",", "r"}], "]"}]}], "]"}]}]}], ",", 
   RowBox[{
    SubscriptBox["\[ForAll]", 
     RowBox[{"{", 
      RowBox[{"p", ",", "q", ",", "r"}], "}"}]], 
    RowBox[{
     RowBox[{"or", "[", 
      RowBox[{"p", ",", 
       RowBox[{"and", "[", 
        RowBox[{"q", ",", "r"}], "]"}]}], "]"}], "\[Equal]", 
     RowBox[{"and", "[", 
      RowBox[{
       RowBox[{"or", "[", 
        RowBox[{"p", ",", "q"}], "]"}], ",", 
       RowBox[{"or", "[", 
        RowBox[{"p", ",", "r"}], "]"}]}], "]"}]}]}], ",", 
   RowBox[{
    SubscriptBox["\[ForAll]", 
     RowBox[{"{", 
      RowBox[{"p", ",", "q", ",", "r"}], "}"}]], 
    RowBox[{
     RowBox[{"or", "[", 
      RowBox[{
       RowBox[{"or", "[", 
        RowBox[{"p", ",", "q"}], "]"}], ",", "r"}], "]"}], "\[Equal]", 
     RowBox[{"or", "[", 
      RowBox[{"p", ",", 
       RowBox[{"or", "[", 
        RowBox[{"q", ",", "r"}], "]"}]}], "]"}]}]}]}], "}"}]], "Output",
 CellChangeTimes->{3.879961108787242*^9},
 CellLabel->"Out[68]=",ExpressionUUID->"8f3a3685-879a-479d-a86a-7044ad48bcc5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"proofBoolean", "=", 
  RowBox[{"FindEquationalProof", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"not", "[", 
      RowBox[{"and", "[", 
       RowBox[{"p", ",", "q"}], "]"}], "]"}], "==", 
     RowBox[{"or", "[", 
      RowBox[{
       RowBox[{"not", "[", "p", "]"}], ",", 
       RowBox[{"not", "[", "q", "]"}]}], "]"}]}], ",", 
    "booleanAlgebraAxioms"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8799590294293795`*^9, 3.879959046964676*^9}, {
  3.8799613454081297`*^9, 3.879961398864713*^9}},
 CellLabel->"In[69]:=",ExpressionUUID->"2a956c21-21a9-407e-b174-d75def413adf"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ProofObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[
             
             GraphicsComplexBox[{{0., 4.}, {1., 5.}, {-1., 5.}, {-2., 1.}, {
              1., 4.}, {0., 3.}, {-1., 2.}, {0., 2.}, {-1., 1.}, {-1., 0.}}, {{
                GrayLevel[0.55], 
                LineBox[{1, 6}], 
                LineBox[{2, 5}], 
                LineBox[{3, 5}], 
                LineBox[{4, 10}], 
                LineBox[{5, 6}], 
                LineBox[{6, 7}], 
                LineBox[{6, 8}], 
                LineBox[{7, 9}], 
                LineBox[{8, 9}], 
                LineBox[{9, 10}], 
                LineBox[{3, 7}]}, {
                PointBox[1], 
                PointBox[2], 
                PointBox[3], 
                PointBox[4], 
                PointBox[5], 
                PointBox[6], 
                PointBox[7], 
                PointBox[8], 
                PointBox[9], 
                PointBox[10]}}], FrameTicks -> None, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], PlotRange -> All, PlotRangeClipping -> True, 
             PlotRangePadding -> Scaled[0.1], Background -> GrayLevel[0.93], 
             Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Logic: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Predicate/EquationalLogic\"", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Steps: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["40", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Theorem: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   RowBox[{
                    RowBox[{"not", "[", 
                    RowBox[{"and", "[", 
                    RowBox[{"p", ",", "q"}], "]"}], "]"}], "\[Equal]", 
                    RowBox[{"or", "[", 
                    RowBox[{
                    RowBox[{"not", "[", "p", "]"}], ",", 
                    RowBox[{"not", "[", "q", "]"}]}], "]"}]}], Short[#, 1]& ],
                   "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[
             
             GraphicsComplexBox[{{0., 4.}, {1., 5.}, {-1., 5.}, {-2., 1.}, {
              1., 4.}, {0., 3.}, {-1., 2.}, {0., 2.}, {-1., 1.}, {-1., 0.}}, {{
                GrayLevel[0.55], 
                LineBox[{1, 6}], 
                LineBox[{2, 5}], 
                LineBox[{3, 5}], 
                LineBox[{4, 10}], 
                LineBox[{5, 6}], 
                LineBox[{6, 7}], 
                LineBox[{6, 8}], 
                LineBox[{7, 9}], 
                LineBox[{8, 9}], 
                LineBox[{9, 10}], 
                LineBox[{3, 7}]}, {
                PointBox[1], 
                PointBox[2], 
                PointBox[3], 
                PointBox[4], 
                PointBox[5], 
                PointBox[6], 
                PointBox[7], 
                PointBox[8], 
                PointBox[9], 
                PointBox[10]}}], FrameTicks -> None, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], PlotRange -> All, PlotRangeClipping -> True, 
             PlotRangePadding -> Scaled[0.1], Background -> GrayLevel[0.93], 
             Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Logic: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Predicate/EquationalLogic\"", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Steps: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["40", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Theorem: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   RowBox[{
                    RowBox[{"not", "[", 
                    RowBox[{"and", "[", 
                    RowBox[{"p", ",", "q"}], "]"}], "]"}], "\[Equal]", 
                    RowBox[{"or", "[", 
                    RowBox[{
                    RowBox[{"not", "[", "p", "]"}], ",", 
                    RowBox[{"not", "[", "q", "]"}]}], "]"}]}], Short[#, 1]& ],
                   "SummaryItem"]}], "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Axioms: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    SubscriptBox["\[ForAll]", 
                    RowBox[{"{", "p", "}"}]], 
                    RowBox[{
                    RowBox[{"and", "[", 
                    RowBox[{"p", ",", "con"}], "]"}], "\[Equal]", "con"}]}], 
                    ",", 
                    RowBox[{"\[LeftSkeleton]", "9", "\[RightSkeleton]"}], ",", 
                    RowBox[{
                    SubscriptBox["\[ForAll]", 
                    RowBox[{"{", 
                    RowBox[{"p", ",", "q", ",", "r"}], "}"}]], 
                    RowBox[{
                    RowBox[{"or", "[", 
                    RowBox[{
                    RowBox[{"or", "[", 
                    RowBox[{"p", ",", "q"}], "]"}], ",", "r"}], "]"}], 
                    "\[Equal]", 
                    RowBox[{"or", "[", 
                    RowBox[{"p", ",", 
                    RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}]}], 
                    "]"}]}]}]}], "}"}], Short[#, 1]& ], "SummaryItem"]}], 
               "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ProofObject["Predicate/EquationalLogic", $CellContext`not[
     $CellContext`and[$CellContext`p, $CellContext`q]] == $CellContext`or[
     $CellContext`not[$CellContext`p], 
     $CellContext`not[$CellContext`q]], {
    ForAll[{$CellContext`p}, $CellContext`and[$CellContext`p, \
$CellContext`con] == $CellContext`con], 
    ForAll[{$CellContext`p}, $CellContext`and[$CellContext`p, \
$CellContext`tau] == $CellContext`p], 
    ForAll[{$CellContext`p}, $CellContext`and[$CellContext`p, 
       $CellContext`not[$CellContext`p]] == $CellContext`con], 
    ForAll[{$CellContext`p}, $CellContext`not[$CellContext`p] == 
     Not[$CellContext`p]], 
    ForAll[{$CellContext`p}, $CellContext`or[$CellContext`p, 
       $CellContext`not[$CellContext`p]] == $CellContext`tau], 
    ForAll[{$CellContext`p, $CellContext`q}, $CellContext`and[$CellContext`p, \
$CellContext`q] == $CellContext`and[$CellContext`q, $CellContext`p]], 
    ForAll[{$CellContext`p, $CellContext`q}, $CellContext`or[$CellContext`p, \
$CellContext`q] == $CellContext`or[$CellContext`q, $CellContext`p]], 
    ForAll[{$CellContext`p, $CellContext`q, $CellContext`r}, \
$CellContext`and[$CellContext`p, 
       $CellContext`or[$CellContext`q, $CellContext`r]] == $CellContext`or[
       $CellContext`and[$CellContext`p, $CellContext`q], 
       $CellContext`and[$CellContext`q, $CellContext`r]]], 
    ForAll[{$CellContext`p, $CellContext`q, $CellContext`r}, $CellContext`and[
       $CellContext`and[$CellContext`p, $CellContext`q], $CellContext`r] == \
$CellContext`and[$CellContext`p, 
       $CellContext`and[$CellContext`q, $CellContext`r]]], 
    ForAll[{$CellContext`p, $CellContext`q, $CellContext`r}, \
$CellContext`or[$CellContext`p, 
       $CellContext`and[$CellContext`q, $CellContext`r]] == $CellContext`and[
       $CellContext`or[$CellContext`p, $CellContext`q], 
       $CellContext`or[$CellContext`p, $CellContext`r]]], 
    ForAll[{$CellContext`p, $CellContext`q, $CellContext`r}, $CellContext`or[
       $CellContext`or[$CellContext`p, $CellContext`q], $CellContext`r] == \
$CellContext`or[$CellContext`p, 
       $CellContext`or[$CellContext`q, $CellContext`r]]]}, {{"Axiom", 1} -> 
    Association[
     "Statement" -> 
      ForAll[{$CellContext`p}, $CellContext`and[$CellContext`p, \
$CellContext`con] == $CellContext`con], "Proof" -> Association[]], {
     "Axiom", 2} -> 
    Association[
     "Statement" -> 
      ForAll[{$CellContext`p}, $CellContext`and[$CellContext`p, \
$CellContext`tau] == $CellContext`p], "Proof" -> Association[]], {"Axiom", 3} -> 
    Association[
     "Statement" -> ForAll[{$CellContext`p}, $CellContext`and[$CellContext`p, 
          $CellContext`not[$CellContext`p]] == $CellContext`con], "Proof" -> 
      Association[]], {"Axiom", 4} -> 
    Association[
     "Statement" -> 
      ForAll[{$CellContext`p}, $CellContext`not[$CellContext`p] == 
        Not[$CellContext`p]], "Proof" -> Association[]], {"Axiom", 5} -> 
    Association[
     "Statement" -> ForAll[{$CellContext`p}, $CellContext`or[$CellContext`p, 
          $CellContext`not[$CellContext`p]] == $CellContext`tau], "Proof" -> 
      Association[]], {"Axiom", 6} -> 
    Association[
     "Statement" -> 
      ForAll[{$CellContext`p, $CellContext`q}, \
$CellContext`and[$CellContext`p, $CellContext`q] == \
$CellContext`and[$CellContext`q, $CellContext`p]], "Proof" -> 
      Association[]], {"Axiom", 7} -> 
    Association[
     "Statement" -> 
      ForAll[{$CellContext`p, $CellContext`q}, \
$CellContext`or[$CellContext`p, $CellContext`q] == \
$CellContext`or[$CellContext`q, $CellContext`p]], "Proof" -> Association[]], {
     "Axiom", 8} -> 
    Association[
     "Statement" -> 
      ForAll[{$CellContext`p, $CellContext`q, $CellContext`r}, \
$CellContext`and[$CellContext`p, 
          $CellContext`or[$CellContext`q, $CellContext`r]] == $CellContext`or[
          $CellContext`and[$CellContext`p, $CellContext`q], 
          $CellContext`and[$CellContext`q, $CellContext`r]]], "Proof" -> 
      Association[]], {"Axiom", 9} -> 
    Association[
     "Statement" -> 
      ForAll[{$CellContext`p, $CellContext`q, $CellContext`r}, \
$CellContext`and[
          $CellContext`and[$CellContext`p, $CellContext`q], $CellContext`r] == \
$CellContext`and[$CellContext`p, 
          $CellContext`and[$CellContext`q, $CellContext`r]]], "Proof" -> 
      Association[]], {"Axiom", 10} -> 
    Association[
     "Statement" -> 
      ForAll[{$CellContext`p, $CellContext`q, $CellContext`r}, \
$CellContext`or[$CellContext`p, 
          $CellContext`and[$CellContext`q, $CellContext`r]] == \
$CellContext`and[
          $CellContext`or[$CellContext`p, $CellContext`q], 
          $CellContext`or[$CellContext`p, $CellContext`r]]], "Proof" -> 
      Association[]], {"Axiom", 11} -> 
    Association[
     "Statement" -> 
      ForAll[{$CellContext`p, $CellContext`q, $CellContext`r}, $CellContext`or[
          $CellContext`or[$CellContext`p, $CellContext`q], $CellContext`r] == \
$CellContext`or[$CellContext`p, 
          $CellContext`or[$CellContext`q, $CellContext`r]]], "Proof" -> 
      Association[]], {"Hypothesis", 1} -> 
    Association["Statement" -> $CellContext`not[
         $CellContext`and[$CellContext`p, $CellContext`q]] == $CellContext`or[
         $CellContext`not[$CellContext`p], 
         $CellContext`not[$CellContext`q]], "Proof" -> Association[]], {
     "EquationalizedAxiom", 1} -> 
    Association[
     "Statement" -> $CellContext`x1 == $CellContext`and[$CellContext`x1, \
$CellContext`tau], "Proof" -> 
      Association[
       "Input" -> {{"Axiom", 1}, {"Axiom", 2}, {"Axiom", 3}, {"Axiom", 4}, {
          "Axiom", 5}, {"Axiom", 6}, {"Axiom", 7}, {"Axiom", 8}, {
          "Axiom", 9}, {"Axiom", 10}, {"Axiom", 11}}]], {
     "EquationalizedAxiom", 2} -> 
    Association[
     "Statement" -> $CellContext`and[$CellContext`x1, $CellContext`x2] == \
$CellContext`and[$CellContext`x2, $CellContext`x1], "Proof" -> 
      Association[
       "Input" -> {{"Axiom", 1}, {"Axiom", 2}, {"Axiom", 3}, {"Axiom", 4}, {
          "Axiom", 5}, {"Axiom", 6}, {"Axiom", 7}, {"Axiom", 8}, {
          "Axiom", 9}, {"Axiom", 10}, {"Axiom", 11}}]], {
     "EquationalizedAxiom", 3} -> 
    Association["Statement" -> $CellContext`and[$CellContext`x1, 
         $CellContext`or[$CellContext`x2, $CellContext`x3]] == $CellContext`or[
         $CellContext`and[$CellContext`x1, $CellContext`x2], 
         $CellContext`and[$CellContext`x2, $CellContext`x3]], "Proof" -> 
      Association[
       "Input" -> {{"Axiom", 1}, {"Axiom", 2}, {"Axiom", 3}, {"Axiom", 4}, {
          "Axiom", 5}, {"Axiom", 6}, {"Axiom", 7}, {"Axiom", 8}, {
          "Axiom", 9}, {"Axiom", 10}, {"Axiom", 11}}]], {
     "EquationalizedAxiom", 4} -> 
    Association[
     "Statement" -> $CellContext`and[$CellContext`x1, $CellContext`con] == \
$CellContext`con, "Proof" -> 
      Association[
       "Input" -> {{"Axiom", 1}, {"Axiom", 2}, {"Axiom", 3}, {"Axiom", 4}, {
          "Axiom", 5}, {"Axiom", 6}, {"Axiom", 7}, {"Axiom", 8}, {
          "Axiom", 9}, {"Axiom", 10}, {"Axiom", 11}}]], {
     "EquationalizedAxiom", 5} -> 
    Association["Statement" -> $CellContext`and[$CellContext`x1, 
         $CellContext`not[$CellContext`x1]] == $CellContext`con, "Proof" -> 
      Association[
       "Input" -> {{"Axiom", 1}, {"Axiom", 2}, {"Axiom", 3}, {"Axiom", 4}, {
          "Axiom", 5}, {"Axiom", 6}, {"Axiom", 7}, {"Axiom", 8}, {
          "Axiom", 9}, {"Axiom", 10}, {"Axiom", 11}}]], {
     "EquationalizedAxiom", 6} -> Association["Statement" -> $CellContext`and[
         $CellContext`or[$CellContext`x1, $CellContext`x2], 
         $CellContext`or[$CellContext`x1, $CellContext`x3]] == \
$CellContext`or[$CellContext`x1, 
         $CellContext`and[$CellContext`x2, $CellContext`x3]], "Proof" -> 
      Association[
       "Input" -> {{"Axiom", 1}, {"Axiom", 2}, {"Axiom", 3}, {"Axiom", 4}, {
          "Axiom", 5}, {"Axiom", 6}, {"Axiom", 7}, {"Axiom", 8}, {
          "Axiom", 9}, {"Axiom", 10}, {"Axiom", 11}}]], {
     "EquationalizedAxiom", 7} -> 
    Association[
     "Statement" -> $CellContext`or[$CellContext`x1, $CellContext`x2] == \
$CellContext`or[$CellContext`x2, $CellContext`x1], "Proof" -> 
      Association[
       "Input" -> {{"Axiom", 1}, {"Axiom", 2}, {"Axiom", 3}, {"Axiom", 4}, {
          "Axiom", 5}, {"Axiom", 6}, {"Axiom", 7}, {"Axiom", 8}, {
          "Axiom", 9}, {"Axiom", 10}, {"Axiom", 11}}]], {
     "EquationalizedAxiom", 8} -> 
    Association["Statement" -> $CellContext`or[$CellContext`x1, 
         $CellContext`not[$CellContext`x1]] == $CellContext`tau, "Proof" -> 
      Association[
       "Input" -> {{"Axiom", 1}, {"Axiom", 2}, {"Axiom", 3}, {"Axiom", 4}, {
          "Axiom", 5}, {"Axiom", 6}, {"Axiom", 7}, {"Axiom", 8}, {
          "Axiom", 9}, {"Axiom", 10}, {"Axiom", 11}}]], {
     "EquationalizedAxiom", 9} -> 
    Association[
     "Statement" -> $CellContext`not[$CellContext`x1] == Not[$CellContext`x1],
       "Proof" -> Association[
       "Input" -> {{"Axiom", 1}, {"Axiom", 2}, {"Axiom", 3}, {"Axiom", 4}, {
          "Axiom", 5}, {"Axiom", 6}, {"Axiom", 7}, {"Axiom", 8}, {
          "Axiom", 9}, {"Axiom", 10}, {"Axiom", 11}}]], {
     "EquationalizedHypothesis", 1} -> 
    Association["Statement" -> $CellContext`or[
         $CellContext`not[$CellContext`p], 
         $CellContext`not[$CellContext`q]] == $CellContext`not[
         $CellContext`and[$CellContext`p, $CellContext`q]], "Proof" -> 
      Association["Input" -> {{"Hypothesis", 1}}]], {"CriticalPairLemma", 1} -> 
    Association[
     "Statement" -> $CellContext`and[$CellContext`tau, $CellContext`x1] == \
$CellContext`x1, "Proof" -> 
      Association[
       "Construct" -> {"EquationalizedAxiom", 2}, "Orientation" -> {-1, 1}, 
        "Rule" -> TwoWayRule[
          $CellContext`and[
           Pattern[$CellContext`x1, 
            Blank[]], 
           Pattern[$CellContext`x2, 
            Blank[]]], 
          $CellContext`and[
           Pattern[$CellContext`x2, 
            Blank[]], 
           Pattern[$CellContext`x1, 
            Blank[]]]], "Side" -> 1, "Subpattern" -> $CellContext`and[
          Pattern[$CellContext`x1, 
           Blank[]], 
          Pattern[$CellContext`x2, 
           Blank[]]], "MatchingConstruct" -> {"EquationalizedAxiom", 1}, 
        "MatchingOrientation" -> -1, "MatchingRule" -> ($CellContext`and[
           Pattern[$CellContext`x1, 
            Blank[]], $CellContext`tau] -> $CellContext`x1), "MatchingSide" -> 
        1]], {"CriticalPairLemma", 2} -> 
    Association["Statement" -> $CellContext`and[$CellContext`x1, 
         $CellContext`or[$CellContext`tau, $CellContext`x2]] == \
$CellContext`or[$CellContext`x1, 
         $CellContext`and[$CellContext`tau, $CellContext`x2]], "Proof" -> 
      Association[
       "Construct" -> {"EquationalizedAxiom", 3}, "Orientation" -> -1, 
        "Rule" -> ($CellContext`or[
           $CellContext`and[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x2, 
             Blank[]]], 
           $CellContext`and[
            Pattern[$CellContext`x2, 
             Blank[]], 
            Pattern[$CellContext`x3, 
             Blank[]]]] -> $CellContext`and[$CellContext`x1, 
           $CellContext`or[$CellContext`x2, $CellContext`x3]]), "Side" -> 1, 
        "Subpattern" -> $CellContext`and[
          Pattern[$CellContext`x1, 
           Blank[]], 
          Pattern[$CellContext`x2, 
           Blank[]]], "MatchingConstruct" -> {"EquationalizedAxiom", 1}, 
        "MatchingOrientation" -> -1, "MatchingRule" -> ($CellContext`and[
           Pattern[$CellContext`x1, 
            Blank[]], $CellContext`tau] -> $CellContext`x1), "MatchingSide" -> 
        1]], {"CriticalPairLemma", 3} -> 
    Association[
     "Statement" -> $CellContext`con == $CellContext`and[$CellContext`con, \
$CellContext`x1], "Proof" -> 
      Association[
       "Construct" -> {"EquationalizedAxiom", 4}, "Orientation" -> 1, 
        "Rule" -> ($CellContext`and[
           Pattern[$CellContext`x1, 
            Blank[]], $CellContext`con] -> $CellContext`con), "Side" -> 1, 
        "Subpattern" -> $CellContext`and[
          Pattern[$CellContext`x1, 
           Blank[]], $CellContext`con], 
        "MatchingConstruct" -> {"EquationalizedAxiom", 2}, 
        "MatchingOrientation" -> {-1, 1}, "MatchingRule" -> TwoWayRule[
          $CellContext`and[
           Pattern[$CellContext`x1, 
            Blank[]], 
           Pattern[$CellContext`x2, 
            Blank[]]], 
          $CellContext`and[
           Pattern[$CellContext`x2, 
            Blank[]], 
           Pattern[$CellContext`x1, 
            Blank[]]]], "MatchingSide" -> 1]], {"SubstitutionLemma", 1} -> 
    Association["Statement" -> $CellContext`or[$CellContext`x1, 
         Not[$CellContext`x1]] == $CellContext`tau, "Proof" -> 
      Association[
       "Input" -> {"EquationalizedAxiom", 8}, "Position" -> {1, 2}, 
        "Construct" -> {"EquationalizedAxiom", 9}, "Orientation" -> 1, 
        "Rule" -> ($CellContext`not[
           Pattern[$CellContext`x1, 
            Blank[]]] -> Not[$CellContext`x1]), 
        "OutputExpression" -> $CellContext`or[$CellContext`x1, 
           Not[$CellContext`x1]] == $CellContext`tau]], {
     "SubstitutionLemma", 2} -> 
    Association["Statement" -> $CellContext`and[$CellContext`x1, 
         Not[$CellContext`x1]] == $CellContext`con, "Proof" -> 
      Association[
       "Input" -> {"EquationalizedAxiom", 5}, "Position" -> {1, 2}, 
        "Construct" -> {"EquationalizedAxiom", 9}, "Orientation" -> 1, 
        "Rule" -> ($CellContext`not[
           Pattern[$CellContext`x1, 
            Blank[]]] -> Not[$CellContext`x1]), 
        "OutputExpression" -> $CellContext`and[$CellContext`x1, 
           Not[$CellContext`x1]] == $CellContext`con]], {
     "CriticalPairLemma", 4} -> 
    Association[
     "Statement" -> $CellContext`con == Not[$CellContext`tau], "Proof" -> 
      Association[
       "Construct" -> {"SubstitutionLemma", 2}, "Orientation" -> 1, 
        "Rule" -> ($CellContext`and[
           Pattern[$CellContext`x1, 
            Blank[]], 
           Not[
            Pattern[$CellContext`x1, 
             Blank[]]]] -> $CellContext`con), "Side" -> 1, 
        "Subpattern" -> $CellContext`and[
          Pattern[$CellContext`x1, 
           Blank[]], 
          Not[
           Pattern[$CellContext`x1, 
            Blank[]]]], "MatchingConstruct" -> {"CriticalPairLemma", 1}, 
        "MatchingOrientation" -> 1, 
        "MatchingRule" -> ($CellContext`and[$CellContext`tau, 
           Pattern[$CellContext`x1, 
            Blank[]]] -> $CellContext`x1), "MatchingSide" -> 1]], {
     "CriticalPairLemma", 5} -> 
    Association[
     "Statement" -> $CellContext`tau == $CellContext`or[$CellContext`tau, \
$CellContext`con], "Proof" -> 
      Association[
       "Construct" -> {"SubstitutionLemma", 1}, "Orientation" -> 1, 
        "Rule" -> ($CellContext`or[
           Pattern[$CellContext`x1, 
            Blank[]], 
           Not[
            Pattern[$CellContext`x1, 
             Blank[]]]] -> $CellContext`tau), "Side" -> 1, "Subpattern" -> Not[
          Pattern[$CellContext`x1, 
           Blank[]]], "MatchingConstruct" -> {"CriticalPairLemma", 4}, 
        "MatchingOrientation" -> -1, 
        "MatchingRule" -> (Not[$CellContext`tau] -> $CellContext`con), 
        "MatchingSide" -> 1]], {"CriticalPairLemma", 6} -> 
    Association["Statement" -> $CellContext`or[$CellContext`tau, 
         $CellContext`and[$CellContext`con, $CellContext`x1]] == \
$CellContext`and[$CellContext`tau, 
         $CellContext`or[$CellContext`tau, $CellContext`x1]], "Proof" -> 
      Association[
       "Construct" -> {"EquationalizedAxiom", 6}, "Orientation" -> 1, 
        "Rule" -> ($CellContext`and[
           $CellContext`or[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x2, 
             Blank[]]], 
           $CellContext`or[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x3, 
             Blank[]]]] -> $CellContext`or[$CellContext`x1, 
           $CellContext`and[$CellContext`x2, $CellContext`x3]]), "Side" -> 1, 
        "Subpattern" -> $CellContext`or[
          Pattern[$CellContext`x1, 
           Blank[]], 
          Pattern[$CellContext`x2, 
           Blank[]]], "MatchingConstruct" -> {"CriticalPairLemma", 5}, 
        "MatchingOrientation" -> -1, 
        "MatchingRule" -> ($CellContext`or[$CellContext`tau, \
$CellContext`con] -> $CellContext`tau), "MatchingSide" -> 1]], {
     "SubstitutionLemma", 3} -> 
    Association[
     "Statement" -> $CellContext`or[$CellContext`tau, $CellContext`con] == \
$CellContext`and[$CellContext`tau, 
         $CellContext`or[$CellContext`tau, $CellContext`x1]], "Proof" -> 
      Association[
       "Input" -> {"CriticalPairLemma", 6}, "Position" -> {1, 2}, 
        "Construct" -> {"CriticalPairLemma", 3}, "Orientation" -> -1, 
        "Rule" -> ($CellContext`and[$CellContext`con, 
           Pattern[$CellContext`x1, 
            Blank[]]] -> $CellContext`con), 
        "OutputExpression" -> $CellContext`or[$CellContext`tau, \
$CellContext`con] == $CellContext`and[$CellContext`tau, 
           $CellContext`or[$CellContext`tau, $CellContext`x1]]]], {
     "SubstitutionLemma", 4} -> 
    Association[
     "Statement" -> $CellContext`tau == $CellContext`and[$CellContext`tau, 
         $CellContext`or[$CellContext`tau, $CellContext`x1]], "Proof" -> 
      Association[
       "Input" -> {"SubstitutionLemma", 3}, "Position" -> 1, 
        "Construct" -> {"CriticalPairLemma", 5}, "Orientation" -> -1, 
        "Rule" -> ($CellContext`or[$CellContext`tau, $CellContext`con] -> \
$CellContext`tau), 
        "OutputExpression" -> $CellContext`tau == \
$CellContext`and[$CellContext`tau, 
           $CellContext`or[$CellContext`tau, $CellContext`x1]]]], {
     "SubstitutionLemma", 5} -> 
    Association[
     "Statement" -> $CellContext`tau == $CellContext`or[$CellContext`tau, \
$CellContext`x1], "Proof" -> 
      Association[
       "Input" -> {"SubstitutionLemma", 4}, "Position" -> 2, 
        "Construct" -> {"CriticalPairLemma", 1}, "Orientation" -> 1, 
        "Rule" -> ($CellContext`and[$CellContext`tau, 
           Pattern[$CellContext`x1, 
            Blank[]]] -> $CellContext`x1), 
        "OutputExpression" -> $CellContext`tau == \
$CellContext`or[$CellContext`tau, $CellContext`x1]]], {
     "SubstitutionLemma", 6} -> 
    Association[
     "Statement" -> $CellContext`and[$CellContext`x1, $CellContext`tau] == \
$CellContext`or[$CellContext`x1, 
         $CellContext`and[$CellContext`tau, $CellContext`x2]], "Proof" -> 
      Association[
       "Input" -> {"CriticalPairLemma", 2}, "Position" -> {1, 2}, 
        "Construct" -> {"SubstitutionLemma", 5}, "Orientation" -> -1, 
        "Rule" -> ($CellContext`or[$CellContext`tau, 
           Pattern[$CellContext`x1, 
            Blank[]]] -> $CellContext`tau), 
        "OutputExpression" -> $CellContext`and[$CellContext`x1, \
$CellContext`tau] == $CellContext`or[$CellContext`x1, 
           $CellContext`and[$CellContext`tau, $CellContext`x2]]]], {
     "SubstitutionLemma", 7} -> 
    Association[
     "Statement" -> $CellContext`x1 == $CellContext`or[$CellContext`x1, 
         $CellContext`and[$CellContext`tau, $CellContext`x2]], "Proof" -> 
      Association[
       "Input" -> {"SubstitutionLemma", 6}, "Position" -> 1, 
        "Construct" -> {"EquationalizedAxiom", 1}, "Orientation" -> -1, 
        "Rule" -> ($CellContext`and[
           Pattern[$CellContext`x1, 
            Blank[]], $CellContext`tau] -> $CellContext`x1), 
        "OutputExpression" -> $CellContext`x1 == \
$CellContext`or[$CellContext`x1, 
           $CellContext`and[$CellContext`tau, $CellContext`x2]]]], {
     "SubstitutionLemma", 8} -> 
    Association[
     "Statement" -> $CellContext`x1 == $CellContext`or[$CellContext`x1, \
$CellContext`x2], "Proof" -> 
      Association[
       "Input" -> {"SubstitutionLemma", 7}, "Position" -> {2, 2}, 
        "Construct" -> {"CriticalPairLemma", 1}, "Orientation" -> 1, 
        "Rule" -> ($CellContext`and[$CellContext`tau, 
           Pattern[$CellContext`x1, 
            Blank[]]] -> $CellContext`x1), 
        "OutputExpression" -> $CellContext`x1 == \
$CellContext`or[$CellContext`x1, $CellContext`x2]]], {"SubstitutionLemma", 9} -> 
    Association[
     "Statement" -> $CellContext`x1 == $CellContext`or[$CellContext`x2, \
$CellContext`x1], "Proof" -> 
      Association[
       "Input" -> {"EquationalizedAxiom", 7}, "Position" -> 1, 
        "Construct" -> {"SubstitutionLemma", 8}, "Orientation" -> -1, 
        "Rule" -> ($CellContext`or[
           Pattern[$CellContext`x1, 
            Blank[]], 
           Pattern[$CellContext`x2, 
            Blank[]]] -> $CellContext`x1), 
        "OutputExpression" -> $CellContext`x1 == \
$CellContext`or[$CellContext`x2, $CellContext`x1]]], {
     "SubstitutionLemma", 10} -> 
    Association[
     "Statement" -> $CellContext`x1 == $CellContext`x2, "Proof" -> 
      Association[
       "Input" -> {"SubstitutionLemma", 9}, "Position" -> 2, 
        "Construct" -> {"SubstitutionLemma", 8}, "Orientation" -> -1, 
        "Rule" -> ($CellContext`or[
           Pattern[$CellContext`x1, 
            Blank[]], 
           Pattern[$CellContext`x2, 
            Blank[]]] -> $CellContext`x1), 
        "OutputExpression" -> $CellContext`x1 == $CellContext`x2]], {
     "SubstitutionLemma", 11} -> 
    Association["Statement" -> $CellContext`q == $CellContext`not[
         $CellContext`and[$CellContext`p, $CellContext`q]], "Proof" -> 
      Association[
       "Input" -> {"EquationalizedHypothesis", 1}, "Position" -> 1, 
        "Construct" -> {"SubstitutionLemma", 10}, "Orientation" -> 1, 
        "Rule" -> (Pattern[$CellContext`x1, 
           Blank[]] -> $CellContext`q), 
        "OutputExpression" -> $CellContext`q == $CellContext`not[
           $CellContext`and[$CellContext`p, $CellContext`q]]]], {
     "Conclusion", 1} -> 
    Association[
     "Statement" -> True, "Proof" -> 
      Association[
       "Input" -> {"SubstitutionLemma", 11}, "Position" -> 2, 
        "Construct" -> {"SubstitutionLemma", 10}, "Orientation" -> 1, 
        "Rule" -> (Pattern[$CellContext`x1, 
           Blank[]] -> $CellContext`q), "OutputExpression" -> True]]}],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.8799614058975887`*^9},
 CellLabel->"Out[69]=",ExpressionUUID->"1fcd9784-a81e-4333-934e-ec5f2f7954a7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"proofBoolean", "[", "\"\<ProofNotebook\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.879961429398494*^9, 3.879961429967888*^9}},
 CellLabel->"In[70]:=",ExpressionUUID->"6b79393f-452b-41a3-901e-6ce3dcc452ce"],

Cell[BoxData[
 InterpretationBox[
  PanelBox[GridBox[{
     {
      TooltipBox[
       ButtonBox[
        StyleBox[
         DynamicBox[FEPrivate`FrontEndResource[
          "FEBitmaps", "ManipulatePasteIcon"],
          ImageSizeCache->{13., {4., 9.}}],
         DynamicUpdating->True],
        Appearance->{Automatic, None, "Normal", Automatic},
        ButtonFunction:>FrontEndExecute[{
           FrontEnd`NotebookPut[
            Notebook[{
              Cell["Axiom 1", "Subsection"], 
              Cell["We are given that:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  SubscriptBox["\[ForAll]", 
                   RowBox[{"{", "p", "}"}]], 
                  RowBox[{
                    RowBox[{"and", "[", 
                    RowBox[{"p", ",", "con"}], "]"}], "\[Equal]", "con"}]}]], 
               "Code"], 
              Cell["Axiom 2", "Subsection"], 
              Cell["We are given that:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  SubscriptBox["\[ForAll]", 
                   RowBox[{"{", "p", "}"}]], 
                  RowBox[{
                    RowBox[{"and", "[", 
                    RowBox[{"p", ",", "tau"}], "]"}], "\[Equal]", "p"}]}]], 
               "Code"], 
              Cell["Axiom 3", "Subsection"], 
              Cell["We are given that:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  SubscriptBox["\[ForAll]", 
                   RowBox[{"{", "p", "}"}]], 
                  RowBox[{
                    RowBox[{"and", "[", 
                    RowBox[{"p", ",", 
                    RowBox[{"not", "[", "p", "]"}]}], "]"}], "\[Equal]", 
                    "con"}]}]], "Code"], 
              Cell["Axiom 4", "Subsection"], 
              Cell["We are given that:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  SubscriptBox["\[ForAll]", 
                   RowBox[{"{", "p", "}"}]], 
                  RowBox[{
                    RowBox[{"not", "[", "p", "]"}], "\[Equal]", 
                    RowBox[{"!", "p"}]}]}]], "Code"], 
              Cell["Axiom 5", "Subsection"], 
              Cell["We are given that:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  SubscriptBox["\[ForAll]", 
                   RowBox[{"{", "p", "}"}]], 
                  RowBox[{
                    RowBox[{"or", "[", 
                    RowBox[{"p", ",", 
                    RowBox[{"not", "[", "p", "]"}]}], "]"}], "\[Equal]", 
                    "tau"}]}]], "Code"], 
              Cell["Axiom 6", "Subsection"], 
              Cell["We are given that:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  SubscriptBox["\[ForAll]", 
                   RowBox[{"{", 
                    RowBox[{"p", ",", "q"}], "}"}]], 
                  RowBox[{
                    RowBox[{"and", "[", 
                    RowBox[{"p", ",", "q"}], "]"}], "\[Equal]", 
                    RowBox[{"and", "[", 
                    RowBox[{"q", ",", "p"}], "]"}]}]}]], "Code"], 
              Cell["Axiom 7", "Subsection"], 
              Cell["We are given that:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  SubscriptBox["\[ForAll]", 
                   RowBox[{"{", 
                    RowBox[{"p", ",", "q"}], "}"}]], 
                  RowBox[{
                    RowBox[{"or", "[", 
                    RowBox[{"p", ",", "q"}], "]"}], "\[Equal]", 
                    RowBox[{"or", "[", 
                    RowBox[{"q", ",", "p"}], "]"}]}]}]], "Code"], 
              Cell["Axiom 8", "Subsection"], 
              Cell["We are given that:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  SubscriptBox["\[ForAll]", 
                   RowBox[{"{", 
                    RowBox[{"p", ",", "q", ",", "r"}], "}"}]], 
                  RowBox[{
                    RowBox[{"and", "[", 
                    RowBox[{"p", ",", 
                    RowBox[{"or", "[", 
                    RowBox[{"q", ",", "r"}], "]"}]}], "]"}], "\[Equal]", 
                    RowBox[{"or", "[", 
                    RowBox[{
                    RowBox[{"and", "[", 
                    RowBox[{"p", ",", "q"}], "]"}], ",", 
                    RowBox[{"and", "[", 
                    RowBox[{"q", ",", "r"}], "]"}]}], "]"}]}]}]], "Code"], 
              Cell["Axiom 9", "Subsection"], 
              Cell["We are given that:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  SubscriptBox["\[ForAll]", 
                   RowBox[{"{", 
                    RowBox[{"p", ",", "q", ",", "r"}], "}"}]], 
                  RowBox[{
                    RowBox[{"and", "[", 
                    RowBox[{
                    RowBox[{"and", "[", 
                    RowBox[{"p", ",", "q"}], "]"}], ",", "r"}], "]"}], 
                    "\[Equal]", 
                    RowBox[{"and", "[", 
                    RowBox[{"p", ",", 
                    RowBox[{"and", "[", 
                    RowBox[{"q", ",", "r"}], "]"}]}], "]"}]}]}]], "Code"], 
              Cell["Axiom 10", "Subsection"], 
              Cell["We are given that:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  SubscriptBox["\[ForAll]", 
                   RowBox[{"{", 
                    RowBox[{"p", ",", "q", ",", "r"}], "}"}]], 
                  RowBox[{
                    RowBox[{"or", "[", 
                    RowBox[{"p", ",", 
                    RowBox[{"and", "[", 
                    RowBox[{"q", ",", "r"}], "]"}]}], "]"}], "\[Equal]", 
                    RowBox[{"and", "[", 
                    RowBox[{
                    RowBox[{"or", "[", 
                    RowBox[{"p", ",", "q"}], "]"}], ",", 
                    RowBox[{"or", "[", 
                    RowBox[{"p", ",", "r"}], "]"}]}], "]"}]}]}]], "Code"], 
              Cell["Axiom 11", "Subsection"], 
              Cell["We are given that:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  SubscriptBox["\[ForAll]", 
                   RowBox[{"{", 
                    RowBox[{"p", ",", "q", ",", "r"}], "}"}]], 
                  RowBox[{
                    RowBox[{"or", "[", 
                    RowBox[{
                    RowBox[{"or", "[", 
                    RowBox[{"p", ",", "q"}], "]"}], ",", "r"}], "]"}], 
                    "\[Equal]", 
                    RowBox[{"or", "[", 
                    RowBox[{"p", ",", 
                    RowBox[{"or", "[", 
                    RowBox[{"q", ",", "r"}], "]"}]}], "]"}]}]}]], "Code"], 
              Cell["Hypothesis 1", "Subsection"], 
              Cell["We would like to show that:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"not", "[", 
                    RowBox[{"and", "[", 
                    RowBox[{"p", ",", "q"}], "]"}], "]"}], "\[Equal]", 
                  RowBox[{"or", "[", 
                    RowBox[{
                    RowBox[{"not", "[", "p", "]"}], ",", 
                    RowBox[{"not", "[", "q", "]"}]}], "]"}]}]], "Code"], 
              Cell["Equationalized Axiom 1", "Subsection"], 
              Cell["We generate the ''equationalized'' axiom:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{"x1", "\[Equal]", 
                  RowBox[{"and", "[", 
                    RowBox[{"x1", ",", "tau"}], "]"}]}]], "Code"], 
              Cell["Equationalized Axiom 2", "Subsection"], 
              Cell["We generate the ''equationalized'' axiom:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"and", "[", 
                    RowBox[{"x1", ",", "x2"}], "]"}], "\[Equal]", 
                  RowBox[{"and", "[", 
                    RowBox[{"x2", ",", "x1"}], "]"}]}]], "Code"], 
              Cell["Equationalized Axiom 3", "Subsection"], 
              Cell["We generate the ''equationalized'' axiom:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"and", "[", 
                    RowBox[{"x1", ",", 
                    RowBox[{"or", "[", 
                    RowBox[{"x2", ",", "x3"}], "]"}]}], "]"}], "\[Equal]", 
                  RowBox[{"or", "[", 
                    RowBox[{
                    RowBox[{"and", "[", 
                    RowBox[{"x1", ",", "x2"}], "]"}], ",", 
                    RowBox[{"and", "[", 
                    RowBox[{"x2", ",", "x3"}], "]"}]}], "]"}]}]], "Code"], 
              Cell["Equationalized Axiom 4", "Subsection"], 
              Cell["We generate the ''equationalized'' axiom:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"and", "[", 
                    RowBox[{"x1", ",", "con"}], "]"}], "\[Equal]", "con"}]], 
               "Code"], 
              Cell["Equationalized Axiom 5", "Subsection"], 
              Cell["We generate the ''equationalized'' axiom:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"and", "[", 
                    RowBox[{"x1", ",", 
                    RowBox[{"not", "[", "x1", "]"}]}], "]"}], "\[Equal]", 
                  "con"}]], "Code"], 
              Cell["Equationalized Axiom 6", "Subsection"], 
              Cell["We generate the ''equationalized'' axiom:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"and", "[", 
                    RowBox[{
                    RowBox[{"or", "[", 
                    RowBox[{"x1", ",", "x2"}], "]"}], ",", 
                    RowBox[{"or", "[", 
                    RowBox[{"x1", ",", "x3"}], "]"}]}], "]"}], "\[Equal]", 
                  RowBox[{"or", "[", 
                    RowBox[{"x1", ",", 
                    RowBox[{"and", "[", 
                    RowBox[{"x2", ",", "x3"}], "]"}]}], "]"}]}]], "Code"], 
              Cell["Equationalized Axiom 7", "Subsection"], 
              Cell["We generate the ''equationalized'' axiom:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"or", "[", 
                    RowBox[{"x1", ",", "x2"}], "]"}], "\[Equal]", 
                  RowBox[{"or", "[", 
                    RowBox[{"x2", ",", "x1"}], "]"}]}]], "Code"], 
              Cell["Equationalized Axiom 8", "Subsection"], 
              Cell["We generate the ''equationalized'' axiom:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"or", "[", 
                    RowBox[{"x1", ",", 
                    RowBox[{"not", "[", "x1", "]"}]}], "]"}], "\[Equal]", 
                  "tau"}]], "Code"], 
              Cell["Equationalized Axiom 9", "Subsection"], 
              Cell["We generate the ''equationalized'' axiom:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"not", "[", "x1", "]"}], "\[Equal]", 
                  RowBox[{"!", "x1"}]}]], "Code"], 
              Cell["Equationalized Hypothesis 1", "Subsection"], 
              Cell[
              "We generate the ''equationalized'' hypothesis:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"or", "[", 
                    RowBox[{
                    RowBox[{"not", "[", "p", "]"}], ",", 
                    RowBox[{"not", "[", "q", "]"}]}], "]"}], "\[Equal]", 
                  RowBox[{"not", "[", 
                    RowBox[{"and", "[", 
                    RowBox[{"p", ",", "q"}], "]"}], "]"}]}]], "Code"], 
              Cell["Critical Pair Lemma 1", "Subsection"], 
              Cell["The following expressions are equivalent:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"and", "[", 
                    RowBox[{"tau", ",", "x1"}], "]"}], "\[Equal]", "x1"}]], 
               "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell["Note that the input for the rule:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"and", "[", 
                    RowBox[{"x1_", ",", "x2_"}], "]"}], "\[TwoWayRule]", 
                    RowBox[{"and", "[", 
                    RowBox[{"x2_", ",", "x1_"}], "]"}]}], DisplayForm]], 
                  "Code"], 
                 Cell["contains a subpattern of the form:", "CodeText"], 
                 Cell[
                  BoxData[
                   RowBox[{"and", "[", 
                    RowBox[{"x1_", ",", "x2_"}], "]"}]], "Code"], 
                 Cell[
                 "which can be unified with the input for the rule:", 
                  "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"and", "[", 
                    RowBox[{"x1_", ",", "tau"}], "]"}], "\[Rule]", "x1"}], 
                    DisplayForm]], "Code"], 
                 Cell[
                 "where these rules follow from Equationalized Axiom 2 and \
Equationalized Axiom 1 respectively.", "CodeText"]}, {1}]], 
              Cell["Critical Pair Lemma 2", "Subsection"], 
              Cell["The following expressions are equivalent:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"and", "[", 
                    RowBox[{"x1", ",", 
                    RowBox[{"or", "[", 
                    RowBox[{"tau", ",", "x2"}], "]"}]}], "]"}], "\[Equal]", 
                  RowBox[{"or", "[", 
                    RowBox[{"x1", ",", 
                    RowBox[{"and", "[", 
                    RowBox[{"tau", ",", "x2"}], "]"}]}], "]"}]}]], "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell["Note that the input for the rule:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"or", "[", 
                    RowBox[{
                    RowBox[{"and", "[", 
                    RowBox[{"x1_", ",", "x2_"}], "]"}], ",", 
                    RowBox[{"and", "[", 
                    RowBox[{"x2_", ",", "x3_"}], "]"}]}], "]"}], "\[Rule]", 
                    RowBox[{"and", "[", 
                    RowBox[{"x1", ",", 
                    RowBox[{"or", "[", 
                    RowBox[{"x2", ",", "x3"}], "]"}]}], "]"}]}], 
                    DisplayForm]], "Code"], 
                 Cell["contains a subpattern of the form:", "CodeText"], 
                 Cell[
                  BoxData[
                   RowBox[{"and", "[", 
                    RowBox[{"x1_", ",", "x2_"}], "]"}]], "Code"], 
                 Cell[
                 "which can be unified with the input for the rule:", 
                  "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"and", "[", 
                    RowBox[{"x1_", ",", "tau"}], "]"}], "\[Rule]", "x1"}], 
                    DisplayForm]], "Code"], 
                 Cell[
                 "where these rules follow from Equationalized Axiom 3 and \
Equationalized Axiom 1 respectively.", "CodeText"]}, {1}]], 
              Cell["Critical Pair Lemma 3", "Subsection"], 
              Cell["The following expressions are equivalent:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{"con", "\[Equal]", 
                  RowBox[{"and", "[", 
                    RowBox[{"con", ",", "x1"}], "]"}]}]], "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell["Note that the input for the rule:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"and", "[", 
                    RowBox[{"x1_", ",", "con"}], "]"}], "\[Rule]", "con"}], 
                    DisplayForm]], "Code"], 
                 Cell["contains a subpattern of the form:", "CodeText"], 
                 Cell[
                  BoxData[
                   RowBox[{"and", "[", 
                    RowBox[{"x1_", ",", "con"}], "]"}]], "Code"], 
                 Cell[
                 "which can be unified with the input for the rule:", 
                  "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"and", "[", 
                    RowBox[{"x1_", ",", "x2_"}], "]"}], "\[TwoWayRule]", 
                    RowBox[{"and", "[", 
                    RowBox[{"x2_", ",", "x1_"}], "]"}]}], DisplayForm]], 
                  "Code"], 
                 Cell[
                 "where these rules follow from Equationalized Axiom 4 and \
Equationalized Axiom 2 respectively.", "CodeText"]}, {1}]], 
              Cell["Substitution Lemma 1", "Subsection"], 
              Cell["It can be shown that:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"or", "[", 
                    RowBox[{"x1", ",", 
                    RowBox[{"!", "x1"}]}], "]"}], "\[Equal]", "tau"}]], 
               "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell[
                 "We start by taking Equationalized Axiom 8, and apply the \
substitution:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"not", "[", "x1_", "]"}], "\[Rule]", 
                    RowBox[{"!", "x1"}]}], DisplayForm]], "Code"], 
                 Cell[
                 "which follows from Equationalized Axiom 9.", "CodeText"]}, {
                1}]], 
              Cell["Substitution Lemma 2", "Subsection"], 
              Cell["It can be shown that:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"and", "[", 
                    RowBox[{"x1", ",", 
                    RowBox[{"!", "x1"}]}], "]"}], "\[Equal]", "con"}]], 
               "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell[
                 "We start by taking Equationalized Axiom 5, and apply the \
substitution:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"not", "[", "x1_", "]"}], "\[Rule]", 
                    RowBox[{"!", "x1"}]}], DisplayForm]], "Code"], 
                 Cell[
                 "which follows from Equationalized Axiom 9.", "CodeText"]}, {
                1}]], 
              Cell["Critical Pair Lemma 4", "Subsection"], 
              Cell["The following expressions are equivalent:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{"con", "\[Equal]", 
                  RowBox[{"!", "tau"}]}]], "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell["Note that the input for the rule:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"and", "[", 
                    RowBox[{"x1_", ",", 
                    RowBox[{"!", "x1_"}]}], "]"}], "\[Rule]", "con"}], 
                    DisplayForm]], "Code"], 
                 Cell["contains a subpattern of the form:", "CodeText"], 
                 Cell[
                  BoxData[
                   RowBox[{"and", "[", 
                    RowBox[{"x1_", ",", 
                    RowBox[{"!", "x1_"}]}], "]"}]], "Code"], 
                 Cell[
                 "which can be unified with the input for the rule:", 
                  "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"and", "[", 
                    RowBox[{"tau", ",", "x1_"}], "]"}], "\[Rule]", "x1"}], 
                    DisplayForm]], "Code"], 
                 Cell[
                 "where these rules follow from Substitution Lemma 2 and \
Critical Pair Lemma 1 respectively.", "CodeText"]}, {1}]], 
              Cell["Critical Pair Lemma 5", "Subsection"], 
              Cell["The following expressions are equivalent:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{"tau", "\[Equal]", 
                  RowBox[{"or", "[", 
                    RowBox[{"tau", ",", "con"}], "]"}]}]], "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell["Note that the input for the rule:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"or", "[", 
                    RowBox[{"x1_", ",", 
                    RowBox[{"!", "x1_"}]}], "]"}], "\[Rule]", "tau"}], 
                    DisplayForm]], "Code"], 
                 Cell["contains a subpattern of the form:", "CodeText"], 
                 Cell[
                  BoxData[
                   RowBox[{"!", "x1_"}]], "Code"], 
                 Cell[
                 "which can be unified with the input for the rule:", 
                  "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"!", "tau"}], "\[Rule]", "con"}], DisplayForm]], 
                  "Code"], 
                 Cell[
                 "where these rules follow from Substitution Lemma 1 and \
Critical Pair Lemma 4 respectively.", "CodeText"]}, {1}]], 
              Cell["Critical Pair Lemma 6", "Subsection"], 
              Cell["The following expressions are equivalent:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"or", "[", 
                    RowBox[{"tau", ",", 
                    RowBox[{"and", "[", 
                    RowBox[{"con", ",", "x1"}], "]"}]}], "]"}], "\[Equal]", 
                  RowBox[{"and", "[", 
                    RowBox[{"tau", ",", 
                    RowBox[{"or", "[", 
                    RowBox[{"tau", ",", "x1"}], "]"}]}], "]"}]}]], "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell["Note that the input for the rule:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"and", "[", 
                    RowBox[{
                    RowBox[{"or", "[", 
                    RowBox[{"x1_", ",", "x2_"}], "]"}], ",", 
                    RowBox[{"or", "[", 
                    RowBox[{"x1_", ",", "x3_"}], "]"}]}], "]"}], "\[Rule]", 
                    RowBox[{"or", "[", 
                    RowBox[{"x1", ",", 
                    RowBox[{"and", "[", 
                    RowBox[{"x2", ",", "x3"}], "]"}]}], "]"}]}], 
                    DisplayForm]], "Code"], 
                 Cell["contains a subpattern of the form:", "CodeText"], 
                 Cell[
                  BoxData[
                   RowBox[{"or", "[", 
                    RowBox[{"x1_", ",", "x2_"}], "]"}]], "Code"], 
                 Cell[
                 "which can be unified with the input for the rule:", 
                  "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"or", "[", 
                    RowBox[{"tau", ",", "con"}], "]"}], "\[Rule]", "tau"}], 
                    DisplayForm]], "Code"], 
                 Cell[
                 "where these rules follow from Equationalized Axiom 6 and \
Critical Pair Lemma 5 respectively.", "CodeText"]}, {1}]], 
              Cell["Substitution Lemma 3", "Subsection"], 
              Cell["It can be shown that:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"or", "[", 
                    RowBox[{"tau", ",", "con"}], "]"}], "\[Equal]", 
                  RowBox[{"and", "[", 
                    RowBox[{"tau", ",", 
                    RowBox[{"or", "[", 
                    RowBox[{"tau", ",", "x1"}], "]"}]}], "]"}]}]], "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell[
                 "We start by taking Critical Pair Lemma 6, and apply the \
substitution:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"and", "[", 
                    RowBox[{"con", ",", "x1_"}], "]"}], "\[Rule]", "con"}], 
                    DisplayForm]], "Code"], 
                 Cell[
                 "which follows from Critical Pair Lemma 3.", "CodeText"]}, {
                1}]], 
              Cell["Substitution Lemma 4", "Subsection"], 
              Cell["It can be shown that:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{"tau", "\[Equal]", 
                  RowBox[{"and", "[", 
                    RowBox[{"tau", ",", 
                    RowBox[{"or", "[", 
                    RowBox[{"tau", ",", "x1"}], "]"}]}], "]"}]}]], "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell[
                 "We start by taking Substitution Lemma 3, and apply the \
substitution:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"or", "[", 
                    RowBox[{"tau", ",", "con"}], "]"}], "\[Rule]", "tau"}], 
                    DisplayForm]], "Code"], 
                 Cell[
                 "which follows from Critical Pair Lemma 5.", "CodeText"]}, {
                1}]], 
              Cell["Substitution Lemma 5", "Subsection"], 
              Cell["It can be shown that:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{"tau", "\[Equal]", 
                  RowBox[{"or", "[", 
                    RowBox[{"tau", ",", "x1"}], "]"}]}]], "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell[
                 "We start by taking Substitution Lemma 4, and apply the \
substitution:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"and", "[", 
                    RowBox[{"tau", ",", "x1_"}], "]"}], "\[Rule]", "x1"}], 
                    DisplayForm]], "Code"], 
                 Cell[
                 "which follows from Critical Pair Lemma 1.", "CodeText"]}, {
                1}]], 
              Cell["Substitution Lemma 6", "Subsection"], 
              Cell["It can be shown that:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"and", "[", 
                    RowBox[{"x1", ",", "tau"}], "]"}], "\[Equal]", 
                  RowBox[{"or", "[", 
                    RowBox[{"x1", ",", 
                    RowBox[{"and", "[", 
                    RowBox[{"tau", ",", "x2"}], "]"}]}], "]"}]}]], "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell[
                 "We start by taking Critical Pair Lemma 2, and apply the \
substitution:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"or", "[", 
                    RowBox[{"tau", ",", "x1_"}], "]"}], "\[Rule]", "tau"}], 
                    DisplayForm]], "Code"], 
                 Cell[
                 "which follows from Substitution Lemma 5.", "CodeText"]}, {
                1}]], 
              Cell["Substitution Lemma 7", "Subsection"], 
              Cell["It can be shown that:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{"x1", "\[Equal]", 
                  RowBox[{"or", "[", 
                    RowBox[{"x1", ",", 
                    RowBox[{"and", "[", 
                    RowBox[{"tau", ",", "x2"}], "]"}]}], "]"}]}]], "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell[
                 "We start by taking Substitution Lemma 6, and apply the \
substitution:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"and", "[", 
                    RowBox[{"x1_", ",", "tau"}], "]"}], "\[Rule]", "x1"}], 
                    DisplayForm]], "Code"], 
                 Cell[
                 "which follows from Equationalized Axiom 1.", "CodeText"]}, {
                1}]], 
              Cell["Substitution Lemma 8", "Subsection"], 
              Cell["It can be shown that:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{"x1", "\[Equal]", 
                  RowBox[{"or", "[", 
                    RowBox[{"x1", ",", "x2"}], "]"}]}]], "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell[
                 "We start by taking Substitution Lemma 7, and apply the \
substitution:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"and", "[", 
                    RowBox[{"tau", ",", "x1_"}], "]"}], "\[Rule]", "x1"}], 
                    DisplayForm]], "Code"], 
                 Cell[
                 "which follows from Critical Pair Lemma 1.", "CodeText"]}, {
                1}]], 
              Cell["Substitution Lemma 9", "Subsection"], 
              Cell["It can be shown that:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{"x1", "\[Equal]", 
                  RowBox[{"or", "[", 
                    RowBox[{"x2", ",", "x1"}], "]"}]}]], "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell[
                 "We start by taking Equationalized Axiom 7, and apply the \
substitution:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"or", "[", 
                    RowBox[{"x1_", ",", "x2_"}], "]"}], "\[Rule]", "x1"}], 
                    DisplayForm]], "Code"], 
                 Cell[
                 "which follows from Substitution Lemma 8.", "CodeText"]}, {
                1}]], 
              Cell["Substitution Lemma 10", "Subsection"], 
              Cell["It can be shown that:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{"x1", "\[Equal]", "x2"}]], "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell[
                 "We start by taking Substitution Lemma 9, and apply the \
substitution:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"or", "[", 
                    RowBox[{"x1_", ",", "x2_"}], "]"}], "\[Rule]", "x1"}], 
                    DisplayForm]], "Code"], 
                 Cell[
                 "which follows from Substitution Lemma 8.", "CodeText"]}, {
                1}]], 
              Cell["Substitution Lemma 11", "Subsection"], 
              Cell["It can be shown that:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{"q", "\[Equal]", 
                  RowBox[{"not", "[", 
                    RowBox[{"and", "[", 
                    RowBox[{"p", ",", "q"}], "]"}], "]"}]}]], "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell[
                 "We start by taking Equationalized Hypothesis 1, and apply \
the substitution:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{"x1_", "\[Rule]", "q"}], DisplayForm]], "Code"], 
                 Cell[
                 "which follows from Substitution Lemma 10.", "CodeText"]}, {
                1}]], 
              Cell["Conclusion 1", "Subsection"], 
              Cell["We obtain the conclusion:", "CodeText"], 
              Cell[
               BoxData["True"], "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell[
                 "Take Substitution Lemma 11, and apply the substitution:", 
                  "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{"x1_", "\[Rule]", "q"}], DisplayForm]], "Code"], 
                 Cell[
                 "which follows from Substitution Lemma 10.", "CodeText"]}, {
                1}]]}]]}],
        DefaultBaseStyle->{},
        Evaluator->None,
        Method->"Queued"],
       DynamicBox[
        ToBoxes[
         FEPrivate`FrontEndResource["FEStrings", "NotebookInNewWindow"]]]]},
     {
      ItemBox[GridBox[{
         {Cell[
          "Axiom 1", "Subsection",ExpressionUUID->
           "42090746-acd5-42c6-b6bb-3e3c8ce8d00e"]},
         {Cell[
          "We are given that:", "CodeText",ExpressionUUID->
           "77552a14-6d81-4f9a-81b4-96309ad49369"]},
         {Cell[BoxData[
           RowBox[{
            SubscriptBox["\[ForAll]", 
             RowBox[{"{", "p", "}"}]], 
            RowBox[{
             RowBox[{"and", "[", 
              RowBox[{"p", ",", "con"}], "]"}], "\[Equal]", "con"}]}]], 
           "Code",ExpressionUUID->"74b7936a-2e89-4bb5-a486-4d0544fe90d1"]},
         {Cell[
          "Axiom 2", "Subsection",ExpressionUUID->
           "25acc7fb-9481-4b50-b99e-39ca5b0f67d2"]},
         {Cell[
          "We are given that:", "CodeText",ExpressionUUID->
           "94600556-5e15-4663-83b6-017ffbba79f2"]},
         {Cell[BoxData[
           RowBox[{
            SubscriptBox["\[ForAll]", 
             RowBox[{"{", "p", "}"}]], 
            RowBox[{
             RowBox[{"and", "[", 
              RowBox[{"p", ",", "tau"}], "]"}], "\[Equal]", "p"}]}]], "Code",
           ExpressionUUID->"e53b9587-c4f1-4fb7-8f02-104de4f42db7"]},
         {Cell[
          "Axiom 3", "Subsection",ExpressionUUID->
           "1f137d8f-c010-41bf-bc23-b51281916751"]},
         {Cell[
          "We are given that:", "CodeText",ExpressionUUID->
           "3f470278-09f0-4aaf-b6cd-73142be97778"]},
         {Cell[BoxData[
           RowBox[{
            SubscriptBox["\[ForAll]", 
             RowBox[{"{", "p", "}"}]], 
            RowBox[{
             RowBox[{"and", "[", 
              RowBox[{"p", ",", 
               RowBox[{"not", "[", "p", "]"}]}], "]"}], "\[Equal]", 
             "con"}]}]], "Code",ExpressionUUID->
           "ef001eaa-3ac1-407b-9c39-6480ae2b48df"]},
         {Cell[
          "Axiom 4", "Subsection",ExpressionUUID->
           "e1dffbe0-22df-4662-8544-6252da547e16"]},
         {Cell[
          "We are given that:", "CodeText",ExpressionUUID->
           "b69f6f27-4f69-452b-8618-565958869983"]},
         {Cell[BoxData[
           RowBox[{
            SubscriptBox["\[ForAll]", 
             RowBox[{"{", "p", "}"}]], 
            RowBox[{
             RowBox[{"not", "[", "p", "]"}], "\[Equal]", 
             RowBox[{"!", "p"}]}]}]], "Code",ExpressionUUID->
           "90b104f9-caed-4dbd-97e0-105f91afabba"]},
         {Cell[
          "Axiom 5", "Subsection",ExpressionUUID->
           "441decda-fc8d-49d3-9e1b-eeaf6bbf21b1"]},
         {Cell[
          "We are given that:", "CodeText",ExpressionUUID->
           "63e9695c-8073-444f-9969-6b1739d26457"]},
         {Cell[BoxData[
           RowBox[{
            SubscriptBox["\[ForAll]", 
             RowBox[{"{", "p", "}"}]], 
            RowBox[{
             RowBox[{"or", "[", 
              RowBox[{"p", ",", 
               RowBox[{"not", "[", "p", "]"}]}], "]"}], "\[Equal]", 
             "tau"}]}]], "Code",ExpressionUUID->
           "ce7a7e84-0bc8-4042-b6d8-8fbc596e4763"]},
         {Cell[
          "Axiom 6", "Subsection",ExpressionUUID->
           "7d26810f-4738-4adb-aff2-04127a3db74b"]},
         {Cell[
          "We are given that:", "CodeText",ExpressionUUID->
           "92e4d7d0-d439-439f-a1ee-ec57614d4b14"]},
         {Cell[BoxData[
           RowBox[{
            SubscriptBox["\[ForAll]", 
             RowBox[{"{", 
              RowBox[{"p", ",", "q"}], "}"}]], 
            RowBox[{
             RowBox[{"and", "[", 
              RowBox[{"p", ",", "q"}], "]"}], "\[Equal]", 
             RowBox[{"and", "[", 
              RowBox[{"q", ",", "p"}], "]"}]}]}]], "Code",ExpressionUUID->
           "1b5b00b8-5b8d-491c-8f68-10968b293130"]},
         {Cell[
          "Axiom 7", "Subsection",ExpressionUUID->
           "94ea6d84-126f-46d1-af63-b62d1ebe5c51"]},
         {Cell[
          "We are given that:", "CodeText",ExpressionUUID->
           "cbaec446-6b8c-437c-bdec-af3475595f80"]},
         {Cell[BoxData[
           RowBox[{
            SubscriptBox["\[ForAll]", 
             RowBox[{"{", 
              RowBox[{"p", ",", "q"}], "}"}]], 
            RowBox[{
             RowBox[{"or", "[", 
              RowBox[{"p", ",", "q"}], "]"}], "\[Equal]", 
             RowBox[{"or", "[", 
              RowBox[{"q", ",", "p"}], "]"}]}]}]], "Code",ExpressionUUID->
           "7b0fefe8-6750-4233-bf75-965233cc4334"]},
         {Cell[
          "Axiom 8", "Subsection",ExpressionUUID->
           "5cd82962-e534-4e20-b6e4-06dd125b098b"]},
         {Cell[
          "We are given that:", "CodeText",ExpressionUUID->
           "356b2c14-d7dc-4571-b099-43a9c70120e5"]},
         {Cell[BoxData[
           RowBox[{
            SubscriptBox["\[ForAll]", 
             RowBox[{"{", 
              RowBox[{"p", ",", "q", ",", "r"}], "}"}]], 
            RowBox[{
             RowBox[{"and", "[", 
              RowBox[{"p", ",", 
               RowBox[{"or", "[", 
                RowBox[{"q", ",", "r"}], "]"}]}], "]"}], "\[Equal]", 
             RowBox[{"or", "[", 
              RowBox[{
               RowBox[{"and", "[", 
                RowBox[{"p", ",", "q"}], "]"}], ",", 
               RowBox[{"and", "[", 
                RowBox[{"q", ",", "r"}], "]"}]}], "]"}]}]}]], "Code",
           ExpressionUUID->"419549a5-bf76-4c7b-bec8-683ae636c1a4"]},
         {Cell[
          "Axiom 9", "Subsection",ExpressionUUID->
           "fe973bd1-efdc-4ade-909a-3d1853eebe01"]},
         {Cell[
          "We are given that:", "CodeText",ExpressionUUID->
           "cbdeac89-3ba7-4582-9e0d-3b1e4f79a5d1"]},
         {Cell[BoxData[
           RowBox[{
            SubscriptBox["\[ForAll]", 
             RowBox[{"{", 
              RowBox[{"p", ",", "q", ",", "r"}], "}"}]], 
            RowBox[{
             RowBox[{"and", "[", 
              RowBox[{
               RowBox[{"and", "[", 
                RowBox[{"p", ",", "q"}], "]"}], ",", "r"}], "]"}], "\[Equal]", 
             RowBox[{"and", "[", 
              RowBox[{"p", ",", 
               RowBox[{"and", "[", 
                RowBox[{"q", ",", "r"}], "]"}]}], "]"}]}]}]], "Code",
           ExpressionUUID->"c070c449-e969-43ee-b145-ed9b09b2079e"]},
         {Cell[
          "Axiom 10", "Subsection",ExpressionUUID->
           "1175085a-ce86-4acf-a0ee-9bf921862819"]},
         {Cell[
          "We are given that:", "CodeText",ExpressionUUID->
           "97798ecf-7e1b-4f73-9c28-c31d542a545f"]},
         {Cell[BoxData[
           RowBox[{
            SubscriptBox["\[ForAll]", 
             RowBox[{"{", 
              RowBox[{"p", ",", "q", ",", "r"}], "}"}]], 
            RowBox[{
             RowBox[{"or", "[", 
              RowBox[{"p", ",", 
               RowBox[{"and", "[", 
                RowBox[{"q", ",", "r"}], "]"}]}], "]"}], "\[Equal]", 
             RowBox[{"and", "[", 
              RowBox[{
               RowBox[{"or", "[", 
                RowBox[{"p", ",", "q"}], "]"}], ",", 
               RowBox[{"or", "[", 
                RowBox[{"p", ",", "r"}], "]"}]}], "]"}]}]}]], "Code",
           ExpressionUUID->"95f43dd4-adfe-40c9-a207-d08e49afebee"]},
         {Cell[
          "Axiom 11", "Subsection",ExpressionUUID->
           "ee192ac8-5ce7-41d1-87b6-aed4a2c0e9c6"]},
         {Cell[
          "We are given that:", "CodeText",ExpressionUUID->
           "f80a8061-bf12-460a-83a1-1f3588749102"]},
         {Cell[BoxData[
           RowBox[{
            SubscriptBox["\[ForAll]", 
             RowBox[{"{", 
              RowBox[{"p", ",", "q", ",", "r"}], "}"}]], 
            RowBox[{
             RowBox[{"or", "[", 
              RowBox[{
               RowBox[{"or", "[", 
                RowBox[{"p", ",", "q"}], "]"}], ",", "r"}], "]"}], "\[Equal]", 
             RowBox[{"or", "[", 
              RowBox[{"p", ",", 
               RowBox[{"or", "[", 
                RowBox[{"q", ",", "r"}], "]"}]}], "]"}]}]}]], "Code",
           ExpressionUUID->"f71012ac-a02f-40a0-9e1a-fe1b2124774a"]},
         {Cell[
          "Hypothesis 1", "Subsection",ExpressionUUID->
           "e10044dc-5974-4d05-bb19-e457432b4129"]},
         {Cell[
          "We would like to show that:", "CodeText",ExpressionUUID->
           "00d7f3b5-b860-4b44-9717-3d6143713b24"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"not", "[", 
             RowBox[{"and", "[", 
              RowBox[{"p", ",", "q"}], "]"}], "]"}], "\[Equal]", 
            RowBox[{"or", "[", 
             RowBox[{
              RowBox[{"not", "[", "p", "]"}], ",", 
              RowBox[{"not", "[", "q", "]"}]}], "]"}]}]], "Code",
           ExpressionUUID->"10985b11-3780-40e5-8238-7eac81b6768b"]},
         {Cell[
          "Equationalized Axiom 1", "Subsection",ExpressionUUID->
           "c7ade9a2-ade1-46ef-9007-04cb01921b0a"]},
         {Cell[
          "We generate the ''equationalized'' axiom:", "CodeText",
           ExpressionUUID->"d1fb1ebf-55fa-4161-8fcb-56a6f64af059"]},
         {Cell[BoxData[
           RowBox[{"x1", "\[Equal]", 
            RowBox[{"and", "[", 
             RowBox[{"x1", ",", "tau"}], "]"}]}]], "Code",ExpressionUUID->
           "df0324ef-ea2e-415b-90f6-90a8807e19c4"]},
         {Cell[
          "Equationalized Axiom 2", "Subsection",ExpressionUUID->
           "2cf5f012-9d91-4009-9b0e-dbdae375ed9a"]},
         {Cell[
          "We generate the ''equationalized'' axiom:", "CodeText",
           ExpressionUUID->"20980937-07fc-495c-a1e4-80b198875d09"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"and", "[", 
             RowBox[{"x1", ",", "x2"}], "]"}], "\[Equal]", 
            RowBox[{"and", "[", 
             RowBox[{"x2", ",", "x1"}], "]"}]}]], "Code",ExpressionUUID->
           "2a1d6e47-2ae0-48cb-a07d-62c18ba0d697"]},
         {Cell[
          "Equationalized Axiom 3", "Subsection",ExpressionUUID->
           "1ebde25e-5c80-4ac4-b7c4-29467058fa42"]},
         {Cell[
          "We generate the ''equationalized'' axiom:", "CodeText",
           ExpressionUUID->"e1d613d3-8557-4fcd-b880-ef3cdc0333d9"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"and", "[", 
             RowBox[{"x1", ",", 
              RowBox[{"or", "[", 
               RowBox[{"x2", ",", "x3"}], "]"}]}], "]"}], "\[Equal]", 
            RowBox[{"or", "[", 
             RowBox[{
              RowBox[{"and", "[", 
               RowBox[{"x1", ",", "x2"}], "]"}], ",", 
              RowBox[{"and", "[", 
               RowBox[{"x2", ",", "x3"}], "]"}]}], "]"}]}]], "Code",
           ExpressionUUID->"2f001f68-6154-454e-b264-b17a7055c7b9"]},
         {Cell[
          "Equationalized Axiom 4", "Subsection",ExpressionUUID->
           "d29f9cac-f033-4791-8fdf-bd392d4d9581"]},
         {Cell[
          "We generate the ''equationalized'' axiom:", "CodeText",
           ExpressionUUID->"7c17059c-ac4c-4d6e-a784-51f3c20d98d6"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"and", "[", 
             RowBox[{"x1", ",", "con"}], "]"}], "\[Equal]", "con"}]], "Code",
           ExpressionUUID->"8732decd-1817-4b27-a9db-9561f818e017"]},
         {Cell[
          "Equationalized Axiom 5", "Subsection",ExpressionUUID->
           "3180e903-ed26-4a43-bef9-617a5166fc3c"]},
         {Cell[
          "We generate the ''equationalized'' axiom:", "CodeText",
           ExpressionUUID->"17ca56dc-bdb7-4e2f-ad81-91b68f82c078"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"and", "[", 
             RowBox[{"x1", ",", 
              RowBox[{"not", "[", "x1", "]"}]}], "]"}], "\[Equal]", "con"}]], 
           "Code",ExpressionUUID->"7ce425af-5484-4b2f-9630-6e0e615feb95"]},
         {Cell[
          "Equationalized Axiom 6", "Subsection",ExpressionUUID->
           "c0c760b6-e09f-42b3-9815-edcb308633af"]},
         {Cell[
          "We generate the ''equationalized'' axiom:", "CodeText",
           ExpressionUUID->"e0bb6b4b-12e0-4585-ad9a-8f8672a34755"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"and", "[", 
             RowBox[{
              RowBox[{"or", "[", 
               RowBox[{"x1", ",", "x2"}], "]"}], ",", 
              RowBox[{"or", "[", 
               RowBox[{"x1", ",", "x3"}], "]"}]}], "]"}], "\[Equal]", 
            RowBox[{"or", "[", 
             RowBox[{"x1", ",", 
              RowBox[{"and", "[", 
               RowBox[{"x2", ",", "x3"}], "]"}]}], "]"}]}]], "Code",
           ExpressionUUID->"654f5795-dba0-4101-855c-0a75bd9809f9"]},
         {Cell[
          "Equationalized Axiom 7", "Subsection",ExpressionUUID->
           "e648b402-0f04-4732-afd7-f3075294ab3e"]},
         {Cell[
          "We generate the ''equationalized'' axiom:", "CodeText",
           ExpressionUUID->"d9f15e62-d05b-400c-924a-089ec62fbfde"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"or", "[", 
             RowBox[{"x1", ",", "x2"}], "]"}], "\[Equal]", 
            RowBox[{"or", "[", 
             RowBox[{"x2", ",", "x1"}], "]"}]}]], "Code",ExpressionUUID->
           "7b629ca5-80e8-4803-8c26-c70ccc0abe9b"]},
         {Cell[
          "Equationalized Axiom 8", "Subsection",ExpressionUUID->
           "ab558f02-91b6-4db7-a1c3-cf185f07b991"]},
         {Cell[
          "We generate the ''equationalized'' axiom:", "CodeText",
           ExpressionUUID->"20090227-288f-4d4c-9dce-9ab122727879"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"or", "[", 
             RowBox[{"x1", ",", 
              RowBox[{"not", "[", "x1", "]"}]}], "]"}], "\[Equal]", "tau"}]], 
           "Code",ExpressionUUID->"ed7a641f-b3af-4314-8088-ad154b08cea4"]},
         {Cell[
          "Equationalized Axiom 9", "Subsection",ExpressionUUID->
           "9c5e8e8e-a132-4468-87a5-acc941589182"]},
         {Cell[
          "We generate the ''equationalized'' axiom:", "CodeText",
           ExpressionUUID->"c43c9df2-1e7a-4003-ad26-5732aafb6dc3"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"not", "[", "x1", "]"}], "\[Equal]", 
            RowBox[{"!", "x1"}]}]], "Code",ExpressionUUID->
           "b6b4b486-ea91-4291-a179-9a81916c1d33"]},
         {Cell[
          "Equationalized Hypothesis 1", "Subsection",ExpressionUUID->
           "10912122-ac1a-4acc-8b84-0871bb65daa4"]},
         {Cell[
          "We generate the ''equationalized'' hypothesis:", "CodeText",
           ExpressionUUID->"720e8499-1ffe-4ef0-a5d5-e12daab08835"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"or", "[", 
             RowBox[{
              RowBox[{"not", "[", "p", "]"}], ",", 
              RowBox[{"not", "[", "q", "]"}]}], "]"}], "\[Equal]", 
            RowBox[{"not", "[", 
             RowBox[{"and", "[", 
              RowBox[{"p", ",", "q"}], "]"}], "]"}]}]], "Code",ExpressionUUID->
           "f2a4951c-f947-4b8e-8df0-aaf9c81b6ec7"]},
         {Cell[
          "Critical Pair Lemma 1", "Subsection",ExpressionUUID->
           "fa68edef-8154-4813-b93b-7b287b3535e0"]},
         {Cell[
          "The following expressions are equivalent:", "CodeText",
           ExpressionUUID->"f12abe4c-fbeb-4fd8-b981-443710f6a6e8"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"and", "[", 
             RowBox[{"tau", ",", "x1"}], "]"}], "\[Equal]", "x1"}]], "Code",
           ExpressionUUID->"200f939b-e635-4153-a14e-e726a192c325"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "ad57ec3a-c71f-4ad5-91b5-9c0a8a24a5ba"]},
         {Cell[
          "Note that the input for the rule:", "CodeText",ExpressionUUID->
           "b7c4563b-1bab-4ad5-9ef5-c22f824b290b"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"and", "[", 
              RowBox[{"x1_", ",", "x2_"}], "]"}], "\[TwoWayRule]", 
             RowBox[{"and", "[", 
              RowBox[{"x2_", ",", "x1_"}], "]"}]}],
            DisplayForm]], "Code",ExpressionUUID->
           "3cdc5a04-ff4c-4531-b0a0-f828745d2eb7"]},
         {Cell[
          "contains a subpattern of the form:", "CodeText",ExpressionUUID->
           "cb56fe0d-e2cb-4981-82af-9debcd6d87bf"]},
         {Cell[BoxData[
           RowBox[{"and", "[", 
            RowBox[{"x1_", ",", "x2_"}], "]"}]], "Code",ExpressionUUID->
           "2d5fba24-49f6-4c93-815c-dca39769fb53"]},
         {Cell[
          "which can be unified with the input for the rule:", "CodeText",
           ExpressionUUID->"26c164d0-c31f-4e91-9319-667b3b4dc60b"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"and", "[", 
              RowBox[{"x1_", ",", "tau"}], "]"}], "\[Rule]", "x1"}],
            DisplayForm]], "Code",ExpressionUUID->
           "d19d081a-f37c-46c6-9009-1ecb9af2f37c"]},
         {Cell["\<\
where these rules follow from Equationalized Axiom 2 and Equationalized Axiom \
1 respectively.\
\>", "CodeText",ExpressionUUID->"5169aeed-b97e-4b3e-bdef-a904b32378db"]},
         {Cell[
          "Critical Pair Lemma 2", "Subsection",ExpressionUUID->
           "031abe87-7ed0-46cc-af61-4abafc0beb50"]},
         {Cell[
          "The following expressions are equivalent:", "CodeText",
           ExpressionUUID->"a9be52da-25a2-4cc4-9558-7ae53adc3dde"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"and", "[", 
             RowBox[{"x1", ",", 
              RowBox[{"or", "[", 
               RowBox[{"tau", ",", "x2"}], "]"}]}], "]"}], "\[Equal]", 
            RowBox[{"or", "[", 
             RowBox[{"x1", ",", 
              RowBox[{"and", "[", 
               RowBox[{"tau", ",", "x2"}], "]"}]}], "]"}]}]], "Code",
           ExpressionUUID->"a2e405bc-3525-41ab-a4ea-89c1b9a137bc"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "f5d9f23b-033c-47e2-a7d4-1d5861f3f3bc"]},
         {Cell[
          "Note that the input for the rule:", "CodeText",ExpressionUUID->
           "301bb626-fa0d-460a-898b-700883246233"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"or", "[", 
              RowBox[{
               RowBox[{"and", "[", 
                RowBox[{"x1_", ",", "x2_"}], "]"}], ",", 
               RowBox[{"and", "[", 
                RowBox[{"x2_", ",", "x3_"}], "]"}]}], "]"}], "\[Rule]", 
             RowBox[{"and", "[", 
              RowBox[{"x1", ",", 
               RowBox[{"or", "[", 
                RowBox[{"x2", ",", "x3"}], "]"}]}], "]"}]}],
            DisplayForm]], "Code",ExpressionUUID->
           "589089f2-780e-4e33-9ada-0238eede125e"]},
         {Cell[
          "contains a subpattern of the form:", "CodeText",ExpressionUUID->
           "3d474547-2a37-4905-aad2-7177e636eb53"]},
         {Cell[BoxData[
           RowBox[{"and", "[", 
            RowBox[{"x1_", ",", "x2_"}], "]"}]], "Code",ExpressionUUID->
           "e1c037c4-69b3-46b4-b16a-d00b7796cf2a"]},
         {Cell[
          "which can be unified with the input for the rule:", "CodeText",
           ExpressionUUID->"985b2525-4db9-4c9a-9e8b-6c7bd3267d47"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"and", "[", 
              RowBox[{"x1_", ",", "tau"}], "]"}], "\[Rule]", "x1"}],
            DisplayForm]], "Code",ExpressionUUID->
           "4e79c9ba-922f-4b24-a59c-b27479d5950b"]},
         {Cell["\<\
where these rules follow from Equationalized Axiom 3 and Equationalized Axiom \
1 respectively.\
\>", "CodeText",ExpressionUUID->"6ea28559-72c7-485d-94d9-f53a9000cc62"]},
         {Cell[
          "Critical Pair Lemma 3", "Subsection",ExpressionUUID->
           "196af4d8-255b-4667-92c6-013e56146de0"]},
         {Cell[
          "The following expressions are equivalent:", "CodeText",
           ExpressionUUID->"e5c97002-033e-4572-b15e-bff475790a94"]},
         {Cell[BoxData[
           RowBox[{"con", "\[Equal]", 
            RowBox[{"and", "[", 
             RowBox[{"con", ",", "x1"}], "]"}]}]], "Code",ExpressionUUID->
           "48e4a4bb-b0b6-422e-a585-c28f2ed4d99a"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "e7de871d-7118-45bb-bb9f-ea23ce4c794f"]},
         {Cell[
          "Note that the input for the rule:", "CodeText",ExpressionUUID->
           "527026ef-af70-447c-98a6-2dee01ed1204"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"and", "[", 
              RowBox[{"x1_", ",", "con"}], "]"}], "\[Rule]", "con"}],
            DisplayForm]], "Code",ExpressionUUID->
           "28df3e12-1565-4a30-8c2b-dc6fde80bd6d"]},
         {Cell[
          "contains a subpattern of the form:", "CodeText",ExpressionUUID->
           "d0515046-2b43-404a-a288-5cc89b8b1a77"]},
         {Cell[BoxData[
           RowBox[{"and", "[", 
            RowBox[{"x1_", ",", "con"}], "]"}]], "Code",ExpressionUUID->
           "63abe042-af48-4e18-adf7-39a1dc2e5754"]},
         {Cell[
          "which can be unified with the input for the rule:", "CodeText",
           ExpressionUUID->"ecc276ea-3267-4028-a390-ac3f95bf039f"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"and", "[", 
              RowBox[{"x1_", ",", "x2_"}], "]"}], "\[TwoWayRule]", 
             RowBox[{"and", "[", 
              RowBox[{"x2_", ",", "x1_"}], "]"}]}],
            DisplayForm]], "Code",ExpressionUUID->
           "65bb03c6-e286-4f28-89e7-2b8ae9e0d227"]},
         {Cell["\<\
where these rules follow from Equationalized Axiom 4 and Equationalized Axiom \
2 respectively.\
\>", "CodeText",ExpressionUUID->"92ed4047-bc31-4656-82ad-4b605a520f81"]},
         {Cell[
          "Substitution Lemma 1", "Subsection",ExpressionUUID->
           "6ca61f4c-e89e-4187-83f5-059aba467266"]},
         {Cell[
          "It can be shown that:", "CodeText",ExpressionUUID->
           "659c2aa3-2f09-4b4a-a00d-89f40eb0b904"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"or", "[", 
             RowBox[{"x1", ",", 
              RowBox[{"!", "x1"}]}], "]"}], "\[Equal]", "tau"}]], "Code",
           ExpressionUUID->"3aad20d8-5eb5-480b-bf53-dd6fcc7434ef"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "9fbe43db-bb7f-4ec6-951d-3f3b53882e22"]},
         {Cell["\<\
We start by taking Equationalized Axiom 8, and apply the substitution:\
\>", "CodeText",ExpressionUUID->"94bec0b0-8b94-42f2-bed8-3e996b0353e3"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"not", "[", "x1_", "]"}], "\[Rule]", 
             RowBox[{"!", "x1"}]}],
            DisplayForm]], "Code",ExpressionUUID->
           "81390d03-386c-4116-a1f8-35dacb3f1b91"]},
         {Cell[
          "which follows from Equationalized Axiom 9.", "CodeText",
           ExpressionUUID->"8f5c45e1-a1eb-4f37-aa2b-7118ed9196d1"]},
         {Cell[
          "Substitution Lemma 2", "Subsection",ExpressionUUID->
           "153b5eae-abde-4263-bbe4-efa08cf7fc50"]},
         {Cell[
          "It can be shown that:", "CodeText",ExpressionUUID->
           "c2ad2803-5133-4f97-a5a8-eb900279a029"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"and", "[", 
             RowBox[{"x1", ",", 
              RowBox[{"!", "x1"}]}], "]"}], "\[Equal]", "con"}]], "Code",
           ExpressionUUID->"2b565f0c-78bf-49c9-afb5-b1e4adbc4ca2"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "cd7d2cc7-8263-4eba-a90e-0fd50b6db656"]},
         {Cell["\<\
We start by taking Equationalized Axiom 5, and apply the substitution:\
\>", "CodeText",ExpressionUUID->"1bd94fef-d536-4853-922f-32f4bf986c41"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"not", "[", "x1_", "]"}], "\[Rule]", 
             RowBox[{"!", "x1"}]}],
            DisplayForm]], "Code",ExpressionUUID->
           "61155865-c6cc-4436-9074-f56c45a0c111"]},
         {Cell[
          "which follows from Equationalized Axiom 9.", "CodeText",
           ExpressionUUID->"a9a0af6a-3ac4-44ac-8eba-5692f35aa00b"]},
         {Cell[
          "Critical Pair Lemma 4", "Subsection",ExpressionUUID->
           "d9d25b87-4202-420b-a02e-84a602713f8d"]},
         {Cell[
          "The following expressions are equivalent:", "CodeText",
           ExpressionUUID->"d5b36784-88f5-4016-a3ec-327dae04c525"]},
         {Cell[BoxData[
           RowBox[{"con", "\[Equal]", 
            RowBox[{"!", "tau"}]}]], "Code",ExpressionUUID->
           "44d8adfc-7d96-4137-b139-652c09a337b2"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "ef2dff0e-b24a-472e-8164-baa038097427"]},
         {Cell[
          "Note that the input for the rule:", "CodeText",ExpressionUUID->
           "f33865af-3ac8-411f-a333-ca82e91e70a9"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"and", "[", 
              RowBox[{"x1_", ",", 
               RowBox[{"!", "x1_"}]}], "]"}], "\[Rule]", "con"}],
            DisplayForm]], "Code",ExpressionUUID->
           "efe5ddda-0d56-4410-b186-bff6bd6cc066"]},
         {Cell[
          "contains a subpattern of the form:", "CodeText",ExpressionUUID->
           "53e779c5-8bfe-4db7-a576-0837a6e48f04"]},
         {Cell[BoxData[
           RowBox[{"and", "[", 
            RowBox[{"x1_", ",", 
             RowBox[{"!", "x1_"}]}], "]"}]], "Code",ExpressionUUID->
           "3776079c-05d0-47fa-b6ed-5030b97a21df"]},
         {Cell[
          "which can be unified with the input for the rule:", "CodeText",
           ExpressionUUID->"33731975-05b3-4e2b-9558-ee69591c1f26"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"and", "[", 
              RowBox[{"tau", ",", "x1_"}], "]"}], "\[Rule]", "x1"}],
            DisplayForm]], "Code",ExpressionUUID->
           "e89c888d-5c0b-4545-b2c9-9fe048d24696"]},
         {Cell["\<\
where these rules follow from Substitution Lemma 2 and Critical Pair Lemma 1 \
respectively.\
\>", "CodeText",ExpressionUUID->"969b8821-52af-4024-8dc5-d28549096e49"]},
         {Cell[
          "Critical Pair Lemma 5", "Subsection",ExpressionUUID->
           "5b8a75c0-9713-4cc7-bcba-da24450aba3a"]},
         {Cell[
          "The following expressions are equivalent:", "CodeText",
           ExpressionUUID->"6700aec7-4cb3-4446-8a6c-ab3c49d63611"]},
         {Cell[BoxData[
           RowBox[{"tau", "\[Equal]", 
            RowBox[{"or", "[", 
             RowBox[{"tau", ",", "con"}], "]"}]}]], "Code",ExpressionUUID->
           "3f28e7f2-485a-479f-a2de-0074de2b2b7b"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "3f07aa57-3e67-43c9-afa4-18b85b190bfa"]},
         {Cell[
          "Note that the input for the rule:", "CodeText",ExpressionUUID->
           "13c99188-b236-4106-b8a0-5542a7959fc3"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"or", "[", 
              RowBox[{"x1_", ",", 
               RowBox[{"!", "x1_"}]}], "]"}], "\[Rule]", "tau"}],
            DisplayForm]], "Code",ExpressionUUID->
           "49010b4c-f4e3-42a1-bd84-fac23e6ae935"]},
         {Cell[
          "contains a subpattern of the form:", "CodeText",ExpressionUUID->
           "2c2515f7-8dfe-4094-b23a-36735e28401a"]},
         {Cell[BoxData[
           RowBox[{"!", "x1_"}]], "Code",ExpressionUUID->
           "aa8d0d48-9350-4ec1-984e-94e0f32759de"]},
         {Cell[
          "which can be unified with the input for the rule:", "CodeText",
           ExpressionUUID->"b88da004-cd35-4158-a420-c79349832dde"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"!", "tau"}], "\[Rule]", "con"}],
            DisplayForm]], "Code",ExpressionUUID->
           "9c7eca9a-f94c-459f-bd91-f905255a7969"]},
         {Cell["\<\
where these rules follow from Substitution Lemma 1 and Critical Pair Lemma 4 \
respectively.\
\>", "CodeText",ExpressionUUID->"bbaa475f-5d61-4198-9377-7d1729f20331"]},
         {Cell[
          "Critical Pair Lemma 6", "Subsection",ExpressionUUID->
           "58f87f53-24b9-4e74-abd4-eb89e9fb0191"]},
         {Cell[
          "The following expressions are equivalent:", "CodeText",
           ExpressionUUID->"0dd8ea9d-0556-423d-b6ed-2181dc8258d9"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"or", "[", 
             RowBox[{"tau", ",", 
              RowBox[{"and", "[", 
               RowBox[{"con", ",", "x1"}], "]"}]}], "]"}], "\[Equal]", 
            RowBox[{"and", "[", 
             RowBox[{"tau", ",", 
              RowBox[{"or", "[", 
               RowBox[{"tau", ",", "x1"}], "]"}]}], "]"}]}]], "Code",
           ExpressionUUID->"a1d59225-e39d-46d2-824e-9baab4abddcd"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "7fc1d456-9120-4663-be92-754cffed0de4"]},
         {Cell[
          "Note that the input for the rule:", "CodeText",ExpressionUUID->
           "468025c6-27f3-471b-bbef-03b57477d22a"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"and", "[", 
              RowBox[{
               RowBox[{"or", "[", 
                RowBox[{"x1_", ",", "x2_"}], "]"}], ",", 
               RowBox[{"or", "[", 
                RowBox[{"x1_", ",", "x3_"}], "]"}]}], "]"}], "\[Rule]", 
             RowBox[{"or", "[", 
              RowBox[{"x1", ",", 
               RowBox[{"and", "[", 
                RowBox[{"x2", ",", "x3"}], "]"}]}], "]"}]}],
            DisplayForm]], "Code",ExpressionUUID->
           "7537d5ca-2bfe-444a-85fb-7acb5394e0a7"]},
         {Cell[
          "contains a subpattern of the form:", "CodeText",ExpressionUUID->
           "abb6842a-29fb-4c7b-b37b-7ec53a5840d4"]},
         {Cell[BoxData[
           RowBox[{"or", "[", 
            RowBox[{"x1_", ",", "x2_"}], "]"}]], "Code",ExpressionUUID->
           "470b401e-f5ca-481e-b8a2-544da6abda21"]},
         {Cell[
          "which can be unified with the input for the rule:", "CodeText",
           ExpressionUUID->"e49e7ff9-b823-45a7-81ac-60d83f1f0539"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"or", "[", 
              RowBox[{"tau", ",", "con"}], "]"}], "\[Rule]", "tau"}],
            DisplayForm]], "Code",ExpressionUUID->
           "2e07ee44-ca11-41b1-b0a2-294e9787b251"]},
         {Cell["\<\
where these rules follow from Equationalized Axiom 6 and Critical Pair Lemma \
5 respectively.\
\>", "CodeText",ExpressionUUID->"a8a2daa5-7dd2-4a69-a832-f58d7b3ce3a0"]},
         {Cell[
          "Substitution Lemma 3", "Subsection",ExpressionUUID->
           "153ff31d-c4f5-4677-9517-9e4b10e8799f"]},
         {Cell[
          "It can be shown that:", "CodeText",ExpressionUUID->
           "7e5bf37c-5148-4fa3-b7ee-c19b5691eb72"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"or", "[", 
             RowBox[{"tau", ",", "con"}], "]"}], "\[Equal]", 
            RowBox[{"and", "[", 
             RowBox[{"tau", ",", 
              RowBox[{"or", "[", 
               RowBox[{"tau", ",", "x1"}], "]"}]}], "]"}]}]], "Code",
           ExpressionUUID->"7b1b2c9d-cefa-47ec-87df-b27bb38bc270"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "8effa0ea-1bf7-455f-81b1-d3e57a8fd96b"]},
         {Cell["\<\
We start by taking Critical Pair Lemma 6, and apply the substitution:\
\>", "CodeText",ExpressionUUID->"86c6df04-f74c-4cf8-86a9-094a767563c5"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"and", "[", 
              RowBox[{"con", ",", "x1_"}], "]"}], "\[Rule]", "con"}],
            DisplayForm]], "Code",ExpressionUUID->
           "38995fe8-74a3-4b9f-b7c9-a3913507b9b7"]},
         {Cell[
          "which follows from Critical Pair Lemma 3.", "CodeText",
           ExpressionUUID->"3285a597-19d1-470f-bd8b-b44ccc93659d"]},
         {Cell[
          "Substitution Lemma 4", "Subsection",ExpressionUUID->
           "42284a15-4f27-4314-a96e-46d784e1de8b"]},
         {Cell[
          "It can be shown that:", "CodeText",ExpressionUUID->
           "9ac59ecb-5a6b-4aa8-8ea4-1bfa8b484934"]},
         {Cell[BoxData[
           RowBox[{"tau", "\[Equal]", 
            RowBox[{"and", "[", 
             RowBox[{"tau", ",", 
              RowBox[{"or", "[", 
               RowBox[{"tau", ",", "x1"}], "]"}]}], "]"}]}]], "Code",
           ExpressionUUID->"46fd122a-e91b-42ed-8c03-cb78868f6050"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "af5589fa-ddff-4e2d-9e73-47e63d3ab682"]},
         {Cell["\<\
We start by taking Substitution Lemma 3, and apply the substitution:\
\>", "CodeText",ExpressionUUID->"a88b9c8c-386a-4b69-9482-b85e9a72a0fa"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"or", "[", 
              RowBox[{"tau", ",", "con"}], "]"}], "\[Rule]", "tau"}],
            DisplayForm]], "Code",ExpressionUUID->
           "357cfdea-3f38-45cc-a18b-1393acaceac8"]},
         {Cell[
          "which follows from Critical Pair Lemma 5.", "CodeText",
           ExpressionUUID->"73f432c0-39aa-46fb-809d-67a37aecbd02"]},
         {Cell[
          "Substitution Lemma 5", "Subsection",ExpressionUUID->
           "1e626176-97f9-4d50-a52c-f01fb7dca874"]},
         {Cell[
          "It can be shown that:", "CodeText",ExpressionUUID->
           "5cea1e08-4463-4f48-af03-15c2b0cbbc79"]},
         {Cell[BoxData[
           RowBox[{"tau", "\[Equal]", 
            RowBox[{"or", "[", 
             RowBox[{"tau", ",", "x1"}], "]"}]}]], "Code",ExpressionUUID->
           "46411997-e945-4f14-838e-7eb239dcf314"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "def4cc4f-60d5-409d-91dc-1069b30a06c3"]},
         {Cell["\<\
We start by taking Substitution Lemma 4, and apply the substitution:\
\>", "CodeText",ExpressionUUID->"ddcd41c2-ee56-4f88-9849-2369acacf054"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"and", "[", 
              RowBox[{"tau", ",", "x1_"}], "]"}], "\[Rule]", "x1"}],
            DisplayForm]], "Code",ExpressionUUID->
           "2c0e8b28-db37-49c7-b506-8e54210bad4f"]},
         {Cell[
          "which follows from Critical Pair Lemma 1.", "CodeText",
           ExpressionUUID->"de6f249d-4702-44ff-9c9f-fc94c8dbdacc"]},
         {Cell[
          "Substitution Lemma 6", "Subsection",ExpressionUUID->
           "29f6dc6f-5ce2-4dec-80e1-a601dc1fc655"]},
         {Cell[
          "It can be shown that:", "CodeText",ExpressionUUID->
           "01844b44-2f08-4fb7-8af7-f3a453284d6f"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"and", "[", 
             RowBox[{"x1", ",", "tau"}], "]"}], "\[Equal]", 
            RowBox[{"or", "[", 
             RowBox[{"x1", ",", 
              RowBox[{"and", "[", 
               RowBox[{"tau", ",", "x2"}], "]"}]}], "]"}]}]], "Code",
           ExpressionUUID->"dacf8d5c-fa7e-4cfc-b377-c137734f6d85"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "161d6f6a-1e43-4275-babf-38c259901c8b"]},
         {Cell["\<\
We start by taking Critical Pair Lemma 2, and apply the substitution:\
\>", "CodeText",ExpressionUUID->"3376f229-fa0b-4f01-904d-573906e07af9"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"or", "[", 
              RowBox[{"tau", ",", "x1_"}], "]"}], "\[Rule]", "tau"}],
            DisplayForm]], "Code",ExpressionUUID->
           "357869a4-d3ce-4b94-a16b-789ebe18072e"]},
         {Cell[
          "which follows from Substitution Lemma 5.", "CodeText",
           ExpressionUUID->"4f152e00-4ed8-4592-b062-d98ab77f6ef4"]},
         {Cell[
          "Substitution Lemma 7", "Subsection",ExpressionUUID->
           "90427a0b-f937-4428-b499-11b9bffa246c"]},
         {Cell[
          "It can be shown that:", "CodeText",ExpressionUUID->
           "f23713dd-919f-40da-94ee-5bcde96c3e3e"]},
         {Cell[BoxData[
           RowBox[{"x1", "\[Equal]", 
            RowBox[{"or", "[", 
             RowBox[{"x1", ",", 
              RowBox[{"and", "[", 
               RowBox[{"tau", ",", "x2"}], "]"}]}], "]"}]}]], "Code",
           ExpressionUUID->"90267a4b-6818-427d-8a50-2ded63014d5c"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "e23cc5e3-aed2-4697-81d8-0e9dab2bcabf"]},
         {Cell["\<\
We start by taking Substitution Lemma 6, and apply the substitution:\
\>", "CodeText",ExpressionUUID->"a17c7ee5-6c53-4470-91a6-f73acc91e60c"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"and", "[", 
              RowBox[{"x1_", ",", "tau"}], "]"}], "\[Rule]", "x1"}],
            DisplayForm]], "Code",ExpressionUUID->
           "27cca65f-739d-436e-a663-b6346f028591"]},
         {Cell[
          "which follows from Equationalized Axiom 1.", "CodeText",
           ExpressionUUID->"9f4cb3f5-1109-4a64-a2a0-f346b3265e73"]},
         {Cell[
          "Substitution Lemma 8", "Subsection",ExpressionUUID->
           "f0634e00-848f-463d-a466-5bcc6272089f"]},
         {Cell[
          "It can be shown that:", "CodeText",ExpressionUUID->
           "092a10ad-6405-49d6-931e-fc5bdb1ec8ac"]},
         {Cell[BoxData[
           RowBox[{"x1", "\[Equal]", 
            RowBox[{"or", "[", 
             RowBox[{"x1", ",", "x2"}], "]"}]}]], "Code",ExpressionUUID->
           "8b625a76-c40a-4a4c-b987-5ebd81fbfdaa"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "3fcf87f4-56c4-4f3c-9529-780edbfad652"]},
         {Cell["\<\
We start by taking Substitution Lemma 7, and apply the substitution:\
\>", "CodeText",ExpressionUUID->"3f8cfa63-c5ab-4e2d-a9bd-5a5c2612fe00"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"and", "[", 
              RowBox[{"tau", ",", "x1_"}], "]"}], "\[Rule]", "x1"}],
            DisplayForm]], "Code",ExpressionUUID->
           "ce397c29-1b55-4d2a-a7b1-04ea55dd4624"]},
         {Cell[
          "which follows from Critical Pair Lemma 1.", "CodeText",
           ExpressionUUID->"b9d98d9b-d1d0-4ef9-af08-b01a48aeb49d"]},
         {Cell[
          "Substitution Lemma 9", "Subsection",ExpressionUUID->
           "f12bfded-b487-4270-a375-91a4a6a9bf72"]},
         {Cell[
          "It can be shown that:", "CodeText",ExpressionUUID->
           "556cb639-c671-4413-b9b2-b473fb291cc0"]},
         {Cell[BoxData[
           RowBox[{"x1", "\[Equal]", 
            RowBox[{"or", "[", 
             RowBox[{"x2", ",", "x1"}], "]"}]}]], "Code",ExpressionUUID->
           "7a17c9bb-d76b-4c82-91df-5b1fcc012ed4"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "f3c9793b-ad38-430c-acc5-194742273896"]},
         {Cell["\<\
We start by taking Equationalized Axiom 7, and apply the substitution:\
\>", "CodeText",ExpressionUUID->"53ce60b8-c22e-489a-82a8-39e5c1fd02b0"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"or", "[", 
              RowBox[{"x1_", ",", "x2_"}], "]"}], "\[Rule]", "x1"}],
            DisplayForm]], "Code",ExpressionUUID->
           "50e718a6-cc8b-4865-82ba-71866841328e"]},
         {Cell[
          "which follows from Substitution Lemma 8.", "CodeText",
           ExpressionUUID->"8d0eaf14-e96e-49ab-919f-053c3243d51d"]},
         {Cell[
          "Substitution Lemma 10", "Subsection",ExpressionUUID->
           "6af00519-35bd-4647-848a-ff81a57f58be"]},
         {Cell[
          "It can be shown that:", "CodeText",ExpressionUUID->
           "d4651336-e230-4ee5-9b60-bc1a5433f893"]},
         {Cell[BoxData[
           RowBox[{"x1", "\[Equal]", "x2"}]], "Code",ExpressionUUID->
           "2b5d4547-e39c-42e0-a5eb-55caa9961848"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "c51004dc-a5bc-4db9-9200-6eac5832ff39"]},
         {Cell["\<\
We start by taking Substitution Lemma 9, and apply the substitution:\
\>", "CodeText",ExpressionUUID->"7f5000f6-33ae-4157-8e69-21a4fb21628f"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"or", "[", 
              RowBox[{"x1_", ",", "x2_"}], "]"}], "\[Rule]", "x1"}],
            DisplayForm]], "Code",ExpressionUUID->
           "f8f32d30-c0cd-44de-9cf4-9fc852774066"]},
         {Cell[
          "which follows from Substitution Lemma 8.", "CodeText",
           ExpressionUUID->"74de0cd8-56d6-4198-ae89-32a0cd4fa67c"]},
         {Cell[
          "Substitution Lemma 11", "Subsection",ExpressionUUID->
           "31b72cf6-22fc-4bbc-bcf4-280befdfd481"]},
         {Cell[
          "It can be shown that:", "CodeText",ExpressionUUID->
           "7c01fac8-8b57-412c-9d7f-67ad87c13d51"]},
         {Cell[BoxData[
           RowBox[{"q", "\[Equal]", 
            RowBox[{"not", "[", 
             RowBox[{"and", "[", 
              RowBox[{"p", ",", "q"}], "]"}], "]"}]}]], "Code",ExpressionUUID->
           "3424c88c-e74a-4bd8-b2ce-93a8a14d71fc"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "1a3e1950-3e4a-480c-a07e-823af2847c71"]},
         {Cell["\<\
We start by taking Equationalized Hypothesis 1, and apply the substitution:\
\>", "CodeText",ExpressionUUID->"bfe62ea7-dae3-46df-bf9d-7ba48f6be3cc"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{"x1_", "\[Rule]", "q"}],
            DisplayForm]], "Code",ExpressionUUID->
           "fd28eb3b-6796-4c02-bd99-8c9cf49a7298"]},
         {Cell[
          "which follows from Substitution Lemma 10.", "CodeText",
           ExpressionUUID->"c5de76ab-b428-4a3f-9ff2-f3ae6b5b9acf"]},
         {Cell[
          "Conclusion 1", "Subsection",ExpressionUUID->
           "5b7cdb85-b623-4d21-a0e8-e0af4cf4dfb1"]},
         {Cell[
          "We obtain the conclusion:", "CodeText",ExpressionUUID->
           "21390f72-97cb-4dac-9b55-acdb2a01eaad"]},
         {Cell[BoxData[
          "True"], "Code",ExpressionUUID->
           "632909eb-0480-4978-9ae9-30df4cba2912"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "12536afd-6609-44fe-a49e-5c1df4a9d1b8"]},
         {Cell[
          "Take Substitution Lemma 11, and apply the substitution:", 
           "CodeText",ExpressionUUID->"6b7b327c-be99-4f4c-aa5d-dc4ea42c1cd6"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{"x1_", "\[Rule]", "q"}],
            DisplayForm]], "Code",ExpressionUUID->
           "c548197d-da9a-4a5a-9410-05aa2c566f0f"]},
         {Cell[
          "which follows from Substitution Lemma 10.", "CodeText",
           ExpressionUUID->"3de91119-adbb-42d3-a0cb-4916dcc9357f"]}
        },
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
       Background->GrayLevel[1],
       Frame->True,
       FrameStyle->GrayLevel[0, 0.2]]}
    },
    GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
   BaseStyle->{FontFamily -> "Times"},
   DefaultBaseStyle->{},
   FrameMargins->5],
  DocumentNotebook[{
    TextCell["Axiom 1", "Subsection"], 
    TextCell["We are given that:", "CodeText"], 
    ExpressionCell[
     ForAll[{$CellContext`p}, $CellContext`and[$CellContext`p, \
$CellContext`con] == $CellContext`con], "Code"], 
    TextCell["Axiom 2", "Subsection"], 
    TextCell["We are given that:", "CodeText"], 
    ExpressionCell[
     ForAll[{$CellContext`p}, $CellContext`and[$CellContext`p, \
$CellContext`tau] == $CellContext`p], "Code"], 
    TextCell["Axiom 3", "Subsection"], 
    TextCell["We are given that:", "CodeText"], 
    ExpressionCell[
     ForAll[{$CellContext`p}, $CellContext`and[$CellContext`p, 
        $CellContext`not[$CellContext`p]] == $CellContext`con], "Code"], 
    TextCell["Axiom 4", "Subsection"], 
    TextCell["We are given that:", "CodeText"], 
    ExpressionCell[
     ForAll[{$CellContext`p}, $CellContext`not[$CellContext`p] == 
      Not[$CellContext`p]], "Code"], 
    TextCell["Axiom 5", "Subsection"], 
    TextCell["We are given that:", "CodeText"], 
    ExpressionCell[
     ForAll[{$CellContext`p}, $CellContext`or[$CellContext`p, 
        $CellContext`not[$CellContext`p]] == $CellContext`tau], "Code"], 
    TextCell["Axiom 6", "Subsection"], 
    TextCell["We are given that:", "CodeText"], 
    ExpressionCell[
     ForAll[{$CellContext`p, $CellContext`q}, \
$CellContext`and[$CellContext`p, $CellContext`q] == \
$CellContext`and[$CellContext`q, $CellContext`p]], "Code"], 
    TextCell["Axiom 7", "Subsection"], 
    TextCell["We are given that:", "CodeText"], 
    ExpressionCell[
     ForAll[{$CellContext`p, $CellContext`q}, $CellContext`or[$CellContext`p, \
$CellContext`q] == $CellContext`or[$CellContext`q, $CellContext`p]], "Code"], 
    TextCell["Axiom 8", "Subsection"], 
    TextCell["We are given that:", "CodeText"], 
    ExpressionCell[
     ForAll[{$CellContext`p, $CellContext`q, $CellContext`r}, \
$CellContext`and[$CellContext`p, 
        $CellContext`or[$CellContext`q, $CellContext`r]] == $CellContext`or[
        $CellContext`and[$CellContext`p, $CellContext`q], 
        $CellContext`and[$CellContext`q, $CellContext`r]]], "Code"], 
    TextCell["Axiom 9", "Subsection"], 
    TextCell["We are given that:", "CodeText"], 
    ExpressionCell[
     ForAll[{$CellContext`p, $CellContext`q, $CellContext`r}, $CellContext`and[
        $CellContext`and[$CellContext`p, $CellContext`q], $CellContext`r] == \
$CellContext`and[$CellContext`p, 
        $CellContext`and[$CellContext`q, $CellContext`r]]], "Code"], 
    TextCell["Axiom 10", "Subsection"], 
    TextCell["We are given that:", "CodeText"], 
    ExpressionCell[
     ForAll[{$CellContext`p, $CellContext`q, $CellContext`r}, \
$CellContext`or[$CellContext`p, 
        $CellContext`and[$CellContext`q, $CellContext`r]] == $CellContext`and[
        $CellContext`or[$CellContext`p, $CellContext`q], 
        $CellContext`or[$CellContext`p, $CellContext`r]]], "Code"], 
    TextCell["Axiom 11", "Subsection"], 
    TextCell["We are given that:", "CodeText"], 
    ExpressionCell[
     ForAll[{$CellContext`p, $CellContext`q, $CellContext`r}, $CellContext`or[
        $CellContext`or[$CellContext`p, $CellContext`q], $CellContext`r] == \
$CellContext`or[$CellContext`p, 
        $CellContext`or[$CellContext`q, $CellContext`r]]], "Code"], 
    TextCell["Hypothesis 1", "Subsection"], 
    TextCell["We would like to show that:", "CodeText"], 
    ExpressionCell[$CellContext`not[
       $CellContext`and[$CellContext`p, $CellContext`q]] == $CellContext`or[
       $CellContext`not[$CellContext`p], 
       $CellContext`not[$CellContext`q]], "Code"], 
    TextCell["Equationalized Axiom 1", "Subsection"], 
    TextCell["We generate the ''equationalized'' axiom:", "CodeText"], 
    ExpressionCell[$CellContext`x1 == $CellContext`and[$CellContext`x1, \
$CellContext`tau], "Code"], 
    TextCell["Equationalized Axiom 2", "Subsection"], 
    TextCell["We generate the ''equationalized'' axiom:", "CodeText"], 
    ExpressionCell[$CellContext`and[$CellContext`x1, $CellContext`x2] == \
$CellContext`and[$CellContext`x2, $CellContext`x1], "Code"], 
    TextCell["Equationalized Axiom 3", "Subsection"], 
    TextCell["We generate the ''equationalized'' axiom:", "CodeText"], 
    ExpressionCell[$CellContext`and[$CellContext`x1, 
       $CellContext`or[$CellContext`x2, $CellContext`x3]] == $CellContext`or[
       $CellContext`and[$CellContext`x1, $CellContext`x2], 
       $CellContext`and[$CellContext`x2, $CellContext`x3]], "Code"], 
    TextCell["Equationalized Axiom 4", "Subsection"], 
    TextCell["We generate the ''equationalized'' axiom:", "CodeText"], 
    ExpressionCell[$CellContext`and[$CellContext`x1, $CellContext`con] == \
$CellContext`con, "Code"], 
    TextCell["Equationalized Axiom 5", "Subsection"], 
    TextCell["We generate the ''equationalized'' axiom:", "CodeText"], 
    ExpressionCell[$CellContext`and[$CellContext`x1, 
       $CellContext`not[$CellContext`x1]] == $CellContext`con, "Code"], 
    TextCell["Equationalized Axiom 6", "Subsection"], 
    TextCell["We generate the ''equationalized'' axiom:", "CodeText"], 
    ExpressionCell[$CellContext`and[
       $CellContext`or[$CellContext`x1, $CellContext`x2], 
       $CellContext`or[$CellContext`x1, $CellContext`x3]] == \
$CellContext`or[$CellContext`x1, 
       $CellContext`and[$CellContext`x2, $CellContext`x3]], "Code"], 
    TextCell["Equationalized Axiom 7", "Subsection"], 
    TextCell["We generate the ''equationalized'' axiom:", "CodeText"], 
    ExpressionCell[$CellContext`or[$CellContext`x1, $CellContext`x2] == \
$CellContext`or[$CellContext`x2, $CellContext`x1], "Code"], 
    TextCell["Equationalized Axiom 8", "Subsection"], 
    TextCell["We generate the ''equationalized'' axiom:", "CodeText"], 
    ExpressionCell[$CellContext`or[$CellContext`x1, 
       $CellContext`not[$CellContext`x1]] == $CellContext`tau, "Code"], 
    TextCell["Equationalized Axiom 9", "Subsection"], 
    TextCell["We generate the ''equationalized'' axiom:", "CodeText"], 
    ExpressionCell[$CellContext`not[$CellContext`x1] == Not[$CellContext`x1], 
     "Code"], 
    TextCell["Equationalized Hypothesis 1", "Subsection"], 
    TextCell["We generate the ''equationalized'' hypothesis:", "CodeText"], 
    ExpressionCell[$CellContext`or[
       $CellContext`not[$CellContext`p], 
       $CellContext`not[$CellContext`q]] == $CellContext`not[
       $CellContext`and[$CellContext`p, $CellContext`q]], "Code"], 
    TextCell["Critical Pair Lemma 1", "Subsection"], 
    TextCell["The following expressions are equivalent:", "CodeText"], 
    ExpressionCell[$CellContext`and[$CellContext`tau, $CellContext`x1] == \
$CellContext`x1, "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell["Note that the input for the rule:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"and", "[", 
            RowBox[{"x1_", ",", "x2_"}], "]"}], "\[TwoWayRule]", 
          RowBox[{"and", "[", 
            RowBox[{"x2_", ",", "x1_"}], "]"}]}]], "Code"], 
      TextCell["contains a subpattern of the form:", "CodeText"], 
      ExpressionCell[
       $CellContext`and[
        Pattern[$CellContext`x1, 
         Blank[]], 
        Pattern[$CellContext`x2, 
         Blank[]]], "Code"], 
      TextCell[
      "which can be unified with the input for the rule:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"and", "[", 
            RowBox[{"x1_", ",", "tau"}], "]"}], "\[Rule]", "x1"}]], "Code"], 
      TextCell[
      "where these rules follow from Equationalized Axiom 2 and \
Equationalized Axiom 1 respectively.", "CodeText"]}, 1], 
    TextCell["Critical Pair Lemma 2", "Subsection"], 
    TextCell["The following expressions are equivalent:", "CodeText"], 
    ExpressionCell[$CellContext`and[$CellContext`x1, 
       $CellContext`or[$CellContext`tau, $CellContext`x2]] == \
$CellContext`or[$CellContext`x1, 
       $CellContext`and[$CellContext`tau, $CellContext`x2]], "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell["Note that the input for the rule:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"or", "[", 
            RowBox[{
              RowBox[{"and", "[", 
                RowBox[{"x1_", ",", "x2_"}], "]"}], ",", 
              RowBox[{"and", "[", 
                RowBox[{"x2_", ",", "x3_"}], "]"}]}], "]"}], "\[Rule]", 
          RowBox[{"and", "[", 
            RowBox[{"x1", ",", 
              RowBox[{"or", "[", 
                RowBox[{"x2", ",", "x3"}], "]"}]}], "]"}]}]], "Code"], 
      TextCell["contains a subpattern of the form:", "CodeText"], 
      ExpressionCell[
       $CellContext`and[
        Pattern[$CellContext`x1, 
         Blank[]], 
        Pattern[$CellContext`x2, 
         Blank[]]], "Code"], 
      TextCell[
      "which can be unified with the input for the rule:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"and", "[", 
            RowBox[{"x1_", ",", "tau"}], "]"}], "\[Rule]", "x1"}]], "Code"], 
      TextCell[
      "where these rules follow from Equationalized Axiom 3 and \
Equationalized Axiom 1 respectively.", "CodeText"]}, 1], 
    TextCell["Critical Pair Lemma 3", "Subsection"], 
    TextCell["The following expressions are equivalent:", "CodeText"], 
    ExpressionCell[$CellContext`con == $CellContext`and[$CellContext`con, \
$CellContext`x1], "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell["Note that the input for the rule:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"and", "[", 
            RowBox[{"x1_", ",", "con"}], "]"}], "\[Rule]", "con"}]], "Code"], 
      TextCell["contains a subpattern of the form:", "CodeText"], 
      ExpressionCell[
       $CellContext`and[
        Pattern[$CellContext`x1, 
         Blank[]], $CellContext`con], "Code"], 
      TextCell[
      "which can be unified with the input for the rule:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"and", "[", 
            RowBox[{"x1_", ",", "x2_"}], "]"}], "\[TwoWayRule]", 
          RowBox[{"and", "[", 
            RowBox[{"x2_", ",", "x1_"}], "]"}]}]], "Code"], 
      TextCell[
      "where these rules follow from Equationalized Axiom 4 and \
Equationalized Axiom 2 respectively.", "CodeText"]}, 1], 
    TextCell["Substitution Lemma 1", "Subsection"], 
    TextCell["It can be shown that:", "CodeText"], 
    ExpressionCell[$CellContext`or[$CellContext`x1, 
       Not[$CellContext`x1]] == $CellContext`tau, "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell[
      "We start by taking Equationalized Axiom 8, and apply the \
substitution:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"not", "[", "x1_", "]"}], "\[Rule]", 
          RowBox[{"!", "x1"}]}]], "Code"], 
      TextCell["which follows from Equationalized Axiom 9.", "CodeText"]}, 1], 
    TextCell["Substitution Lemma 2", "Subsection"], 
    TextCell["It can be shown that:", "CodeText"], 
    ExpressionCell[$CellContext`and[$CellContext`x1, 
       Not[$CellContext`x1]] == $CellContext`con, "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell[
      "We start by taking Equationalized Axiom 5, and apply the \
substitution:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"not", "[", "x1_", "]"}], "\[Rule]", 
          RowBox[{"!", "x1"}]}]], "Code"], 
      TextCell["which follows from Equationalized Axiom 9.", "CodeText"]}, 1], 
    TextCell["Critical Pair Lemma 4", "Subsection"], 
    TextCell["The following expressions are equivalent:", "CodeText"], 
    ExpressionCell[$CellContext`con == Not[$CellContext`tau], "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell["Note that the input for the rule:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"and", "[", 
            RowBox[{"x1_", ",", 
              RowBox[{"!", "x1_"}]}], "]"}], "\[Rule]", "con"}]], "Code"], 
      TextCell["contains a subpattern of the form:", "CodeText"], 
      ExpressionCell[
       $CellContext`and[
        Pattern[$CellContext`x1, 
         Blank[]], 
        Not[
         Pattern[$CellContext`x1, 
          Blank[]]]], "Code"], 
      TextCell[
      "which can be unified with the input for the rule:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"and", "[", 
            RowBox[{"tau", ",", "x1_"}], "]"}], "\[Rule]", "x1"}]], "Code"], 
      TextCell[
      "where these rules follow from Substitution Lemma 2 and Critical Pair \
Lemma 1 respectively.", "CodeText"]}, 1], 
    TextCell["Critical Pair Lemma 5", "Subsection"], 
    TextCell["The following expressions are equivalent:", "CodeText"], 
    ExpressionCell[$CellContext`tau == $CellContext`or[$CellContext`tau, \
$CellContext`con], "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell["Note that the input for the rule:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"or", "[", 
            RowBox[{"x1_", ",", 
              RowBox[{"!", "x1_"}]}], "]"}], "\[Rule]", "tau"}]], "Code"], 
      TextCell["contains a subpattern of the form:", "CodeText"], 
      ExpressionCell[
       Not[
        Pattern[$CellContext`x1, 
         Blank[]]], "Code"], 
      TextCell[
      "which can be unified with the input for the rule:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"!", "tau"}], "\[Rule]", "con"}]], "Code"], 
      TextCell[
      "where these rules follow from Substitution Lemma 1 and Critical Pair \
Lemma 4 respectively.", "CodeText"]}, 1], 
    TextCell["Critical Pair Lemma 6", "Subsection"], 
    TextCell["The following expressions are equivalent:", "CodeText"], 
    ExpressionCell[$CellContext`or[$CellContext`tau, 
       $CellContext`and[$CellContext`con, $CellContext`x1]] == \
$CellContext`and[$CellContext`tau, 
       $CellContext`or[$CellContext`tau, $CellContext`x1]], "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell["Note that the input for the rule:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"and", "[", 
            RowBox[{
              RowBox[{"or", "[", 
                RowBox[{"x1_", ",", "x2_"}], "]"}], ",", 
              RowBox[{"or", "[", 
                RowBox[{"x1_", ",", "x3_"}], "]"}]}], "]"}], "\[Rule]", 
          RowBox[{"or", "[", 
            RowBox[{"x1", ",", 
              RowBox[{"and", "[", 
                RowBox[{"x2", ",", "x3"}], "]"}]}], "]"}]}]], "Code"], 
      TextCell["contains a subpattern of the form:", "CodeText"], 
      ExpressionCell[
       $CellContext`or[
        Pattern[$CellContext`x1, 
         Blank[]], 
        Pattern[$CellContext`x2, 
         Blank[]]], "Code"], 
      TextCell[
      "which can be unified with the input for the rule:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"or", "[", 
            RowBox[{"tau", ",", "con"}], "]"}], "\[Rule]", "tau"}]], "Code"], 
      TextCell[
      "where these rules follow from Equationalized Axiom 6 and Critical Pair \
Lemma 5 respectively.", "CodeText"]}, 1], 
    TextCell["Substitution Lemma 3", "Subsection"], 
    TextCell["It can be shown that:", "CodeText"], 
    ExpressionCell[$CellContext`or[$CellContext`tau, $CellContext`con] == \
$CellContext`and[$CellContext`tau, 
       $CellContext`or[$CellContext`tau, $CellContext`x1]], "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell[
      "We start by taking Critical Pair Lemma 6, and apply the substitution:",
        "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"and", "[", 
            RowBox[{"con", ",", "x1_"}], "]"}], "\[Rule]", "con"}]], "Code"], 
      TextCell["which follows from Critical Pair Lemma 3.", "CodeText"]}, 1], 
    TextCell["Substitution Lemma 4", "Subsection"], 
    TextCell["It can be shown that:", "CodeText"], 
    ExpressionCell[$CellContext`tau == $CellContext`and[$CellContext`tau, 
       $CellContext`or[$CellContext`tau, $CellContext`x1]], "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell[
      "We start by taking Substitution Lemma 3, and apply the substitution:", 
       "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"or", "[", 
            RowBox[{"tau", ",", "con"}], "]"}], "\[Rule]", "tau"}]], "Code"], 
      TextCell["which follows from Critical Pair Lemma 5.", "CodeText"]}, 1], 
    TextCell["Substitution Lemma 5", "Subsection"], 
    TextCell["It can be shown that:", "CodeText"], 
    ExpressionCell[$CellContext`tau == $CellContext`or[$CellContext`tau, \
$CellContext`x1], "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell[
      "We start by taking Substitution Lemma 4, and apply the substitution:", 
       "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"and", "[", 
            RowBox[{"tau", ",", "x1_"}], "]"}], "\[Rule]", "x1"}]], "Code"], 
      TextCell["which follows from Critical Pair Lemma 1.", "CodeText"]}, 1], 
    TextCell["Substitution Lemma 6", "Subsection"], 
    TextCell["It can be shown that:", "CodeText"], 
    ExpressionCell[$CellContext`and[$CellContext`x1, $CellContext`tau] == \
$CellContext`or[$CellContext`x1, 
       $CellContext`and[$CellContext`tau, $CellContext`x2]], "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell[
      "We start by taking Critical Pair Lemma 2, and apply the substitution:",
        "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"or", "[", 
            RowBox[{"tau", ",", "x1_"}], "]"}], "\[Rule]", "tau"}]], "Code"], 
      TextCell["which follows from Substitution Lemma 5.", "CodeText"]}, 1], 
    TextCell["Substitution Lemma 7", "Subsection"], 
    TextCell["It can be shown that:", "CodeText"], 
    ExpressionCell[$CellContext`x1 == $CellContext`or[$CellContext`x1, 
       $CellContext`and[$CellContext`tau, $CellContext`x2]], "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell[
      "We start by taking Substitution Lemma 6, and apply the substitution:", 
       "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"and", "[", 
            RowBox[{"x1_", ",", "tau"}], "]"}], "\[Rule]", "x1"}]], "Code"], 
      TextCell["which follows from Equationalized Axiom 1.", "CodeText"]}, 1], 
    TextCell["Substitution Lemma 8", "Subsection"], 
    TextCell["It can be shown that:", "CodeText"], 
    ExpressionCell[$CellContext`x1 == $CellContext`or[$CellContext`x1, \
$CellContext`x2], "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell[
      "We start by taking Substitution Lemma 7, and apply the substitution:", 
       "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"and", "[", 
            RowBox[{"tau", ",", "x1_"}], "]"}], "\[Rule]", "x1"}]], "Code"], 
      TextCell["which follows from Critical Pair Lemma 1.", "CodeText"]}, 1], 
    TextCell["Substitution Lemma 9", "Subsection"], 
    TextCell["It can be shown that:", "CodeText"], 
    ExpressionCell[$CellContext`x1 == $CellContext`or[$CellContext`x2, \
$CellContext`x1], "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell[
      "We start by taking Equationalized Axiom 7, and apply the \
substitution:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"or", "[", 
            RowBox[{"x1_", ",", "x2_"}], "]"}], "\[Rule]", "x1"}]], "Code"], 
      TextCell["which follows from Substitution Lemma 8.", "CodeText"]}, 1], 
    TextCell["Substitution Lemma 10", "Subsection"], 
    TextCell["It can be shown that:", "CodeText"], 
    ExpressionCell[$CellContext`x1 == $CellContext`x2, "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell[
      "We start by taking Substitution Lemma 9, and apply the substitution:", 
       "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"or", "[", 
            RowBox[{"x1_", ",", "x2_"}], "]"}], "\[Rule]", "x1"}]], "Code"], 
      TextCell["which follows from Substitution Lemma 8.", "CodeText"]}, 1], 
    TextCell["Substitution Lemma 11", "Subsection"], 
    TextCell["It can be shown that:", "CodeText"], 
    ExpressionCell[$CellContext`q == $CellContext`not[
       $CellContext`and[$CellContext`p, $CellContext`q]], "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell[
      "We start by taking Equationalized Hypothesis 1, and apply the \
substitution:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{"x1_", "\[Rule]", "q"}]], "Code"], 
      TextCell["which follows from Substitution Lemma 10.", "CodeText"]}, 1], 
    TextCell["Conclusion 1", "Subsection"], 
    TextCell["We obtain the conclusion:", "CodeText"], 
    ExpressionCell[True, "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell[
      "Take Substitution Lemma 11, and apply the substitution:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{"x1_", "\[Rule]", "q"}]], "Code"], 
      TextCell["which follows from Substitution Lemma 10.", "CodeText"]}, 
     1]}]]], "Output",
 CellChangeTimes->{3.879961430405435*^9},
 CellLabel->"Out[70]=",ExpressionUUID->"ead9b21f-812d-4c7c-a65c-78dec5ec57cb"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"proofBoolean", "[", "\"\<ProofGraphWeighted\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.8799618562465124`*^9, 3.87996185851499*^9}, {
  3.8799619283117847`*^9, 3.8799619357308207`*^9}, {3.879962100450941*^9, 
  3.879962113956679*^9}},
 CellLabel->"In[74]:=",ExpressionUUID->"cee99544-6512-4b42-b7c7-986a79744ba6"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{
      "Axiom 1", "Axiom 2", "Axiom 3", "Axiom 4", "Axiom 5", "Axiom 6", 
       "Axiom 7", "Axiom 8", "Axiom 9", "Axiom 10", "Axiom 11", 
       "Hypothesis 1", "Equationalized Axiom 1", "Equationalized Axiom 2", 
       "Equationalized Axiom 3", "Equationalized Axiom 4", 
       "Equationalized Axiom 5", "Equationalized Axiom 6", 
       "Equationalized Axiom 7", "Equationalized Axiom 8", 
       "Equationalized Axiom 9", "Equationalized Hypothesis 1", 
       "Critical Pair Lemma 1", "Critical Pair Lemma 2", 
       "Critical Pair Lemma 3", "Substitution Lemma 1", 
       "Substitution Lemma 2", "Critical Pair Lemma 4", 
       "Critical Pair Lemma 5", "Critical Pair Lemma 6", 
       "Substitution Lemma 3", "Substitution Lemma 4", "Substitution Lemma 5",
        "Substitution Lemma 6", "Substitution Lemma 7", 
       "Substitution Lemma 8", "Substitution Lemma 9", 
       "Substitution Lemma 10", "Substitution Lemma 11", "Conclusion 1"}, {{{
       1, 13}, {2, 13}, {3, 13}, {4, 13}, {5, 13}, {6, 13}, {7, 13}, {8, 
       13}, {9, 13}, {10, 13}, {11, 13}, {1, 14}, {2, 14}, {3, 14}, {4, 14}, {
       5, 14}, {6, 14}, {7, 14}, {8, 14}, {9, 14}, {10, 14}, {11, 14}, {1, 
       15}, {2, 15}, {3, 15}, {4, 15}, {5, 15}, {6, 15}, {7, 15}, {8, 15}, {9,
        15}, {10, 15}, {11, 15}, {1, 16}, {2, 16}, {3, 16}, {4, 16}, {5, 
       16}, {6, 16}, {7, 16}, {8, 16}, {9, 16}, {10, 16}, {11, 16}, {1, 17}, {
       2, 17}, {3, 17}, {4, 17}, {5, 17}, {6, 17}, {7, 17}, {8, 17}, {9, 
       17}, {10, 17}, {11, 17}, {1, 18}, {2, 18}, {3, 18}, {4, 18}, {5, 18}, {
       6, 18}, {7, 18}, {8, 18}, {9, 18}, {10, 18}, {11, 18}, {1, 19}, {2, 
       19}, {3, 19}, {4, 19}, {5, 19}, {6, 19}, {7, 19}, {8, 19}, {9, 19}, {
       10, 19}, {11, 19}, {1, 20}, {2, 20}, {3, 20}, {4, 20}, {5, 20}, {6, 
       20}, {7, 20}, {8, 20}, {9, 20}, {10, 20}, {11, 20}, {1, 21}, {2, 21}, {
       3, 21}, {4, 21}, {5, 21}, {6, 21}, {7, 21}, {8, 21}, {9, 21}, {10, 
       21}, {11, 21}, {12, 22}, {14, 23}, {13, 23}, {15, 24}, {13, 24}, {16, 
       25}, {14, 25}, {20, 26}, {21, 26}, {17, 27}, {21, 27}, {27, 28}, {23, 
       28}, {26, 29}, {28, 29}, {18, 30}, {29, 30}, {30, 31}, {25, 31}, {31, 
       32}, {29, 32}, {32, 33}, {23, 33}, {24, 34}, {33, 34}, {34, 35}, {13, 
       35}, {35, 36}, {23, 36}, {19, 37}, {36, 37}, {37, 38}, {36, 38}, {22, 
       39}, {38, 39}, {39, 40}, {38, 40}}, Null}, {
      AnnotationRules -> {"Axiom 10" -> {Tooltip -> Column[{"Axiom 10", 
              
              ForAll[{$CellContext`p, $CellContext`q, $CellContext`r}, \
$CellContext`or[$CellContext`p, 
                 $CellContext`and[$CellContext`q, $CellContext`r]] == \
$CellContext`and[
                 $CellContext`or[$CellContext`p, $CellContext`q], 
                 $CellContext`or[$CellContext`p, $CellContext`r]]]}]}, 
         "Equationalized Axiom 9" -> {
          Tooltip -> Column[{
             "Equationalized Axiom 9", $CellContext`not[$CellContext`x1] == 
              Not[$CellContext`x1]}]}, 
         "Equationalized Axiom 6" -> {
          Tooltip -> Column[{"Equationalized Axiom 6", $CellContext`and[
                $CellContext`or[$CellContext`x1, $CellContext`x2], 
                $CellContext`or[$CellContext`x1, $CellContext`x3]] == \
$CellContext`or[$CellContext`x1, 
                $CellContext`and[$CellContext`x2, $CellContext`x3]]}]}, 
         "Critical Pair Lemma 4" -> {
          Tooltip -> Column[{
             "Critical Pair Lemma 4", $CellContext`con == 
              Not[$CellContext`tau]}]}, 
         "Critical Pair Lemma 5" -> {
          Tooltip -> Column[{
             "Critical Pair Lemma 5", $CellContext`tau == \
$CellContext`or[$CellContext`tau, $CellContext`con]}]}, 
         "Axiom 8" -> {Tooltip -> Column[{"Axiom 8", 
              
              ForAll[{$CellContext`p, $CellContext`q, $CellContext`r}, \
$CellContext`and[$CellContext`p, 
                 $CellContext`or[$CellContext`q, $CellContext`r]] == \
$CellContext`or[
                 $CellContext`and[$CellContext`p, $CellContext`q], 
                 $CellContext`and[$CellContext`q, $CellContext`r]]]}]}, 
         "Substitution Lemma 10" -> {
          Tooltip -> Column[{
             "Substitution Lemma 10", $CellContext`x1 == $CellContext`x2}]}, 
         "Substitution Lemma 4" -> {
          Tooltip -> Column[{
             "Substitution Lemma 4", $CellContext`tau == \
$CellContext`and[$CellContext`tau, 
                $CellContext`or[$CellContext`tau, $CellContext`x1]]}]}, 
         "Axiom 6" -> {Tooltip -> Column[{"Axiom 6", 
              
              ForAll[{$CellContext`p, $CellContext`q}, \
$CellContext`and[$CellContext`p, $CellContext`q] == \
$CellContext`and[$CellContext`q, $CellContext`p]]}]}, 
         "Axiom 1" -> {Tooltip -> Column[{"Axiom 1", 
              
              ForAll[{$CellContext`p}, $CellContext`and[$CellContext`p, \
$CellContext`con] == $CellContext`con]}]}, 
         "Axiom 9" -> {Tooltip -> Column[{"Axiom 9", 
              
              ForAll[{$CellContext`p, $CellContext`q, $CellContext`r}, \
$CellContext`and[
                 $CellContext`and[$CellContext`p, $CellContext`q], \
$CellContext`r] == $CellContext`and[$CellContext`p, 
                 $CellContext`and[$CellContext`q, $CellContext`r]]]}]}, 
         "Critical Pair Lemma 1" -> {
          Tooltip -> Column[{
             "Critical Pair Lemma 1", $CellContext`and[$CellContext`tau, \
$CellContext`x1] == $CellContext`x1}]}, 
         "Axiom 5" -> {Tooltip -> Column[{"Axiom 5", 
              ForAll[{$CellContext`p}, $CellContext`or[$CellContext`p, 
                 $CellContext`not[$CellContext`p]] == $CellContext`tau]}]}, 
         "Substitution Lemma 2" -> {
          Tooltip -> Column[{
             "Substitution Lemma 2", $CellContext`and[$CellContext`x1, 
                Not[$CellContext`x1]] == $CellContext`con}]}, 
         "Equationalized Axiom 7" -> {
          Tooltip -> Column[{
             "Equationalized Axiom 7", $CellContext`or[$CellContext`x1, \
$CellContext`x2] == $CellContext`or[$CellContext`x2, $CellContext`x1]}]}, 
         "Substitution Lemma 3" -> {
          Tooltip -> Column[{
             "Substitution Lemma 3", $CellContext`or[$CellContext`tau, \
$CellContext`con] == $CellContext`and[$CellContext`tau, 
                $CellContext`or[$CellContext`tau, $CellContext`x1]]}]}, 
         "Axiom 3" -> {Tooltip -> Column[{"Axiom 3", 
              ForAll[{$CellContext`p}, $CellContext`and[$CellContext`p, 
                 $CellContext`not[$CellContext`p]] == $CellContext`con]}]}, 
         "Equationalized Axiom 5" -> {
          Tooltip -> Column[{
             "Equationalized Axiom 5", $CellContext`and[$CellContext`x1, 
                $CellContext`not[$CellContext`x1]] == $CellContext`con}]}, 
         "Axiom 2" -> {Tooltip -> Column[{"Axiom 2", 
              
              ForAll[{$CellContext`p}, $CellContext`and[$CellContext`p, \
$CellContext`tau] == $CellContext`p]}]}, 
         "Equationalized Axiom 2" -> {
          Tooltip -> Column[{
             "Equationalized Axiom 2", $CellContext`and[$CellContext`x1, \
$CellContext`x2] == $CellContext`and[$CellContext`x2, $CellContext`x1]}]}, 
         "Critical Pair Lemma 3" -> {
          Tooltip -> Column[{
             "Critical Pair Lemma 3", $CellContext`con == \
$CellContext`and[$CellContext`con, $CellContext`x1]}]}, 
         "Equationalized Axiom 1" -> {
          Tooltip -> Column[{
             "Equationalized Axiom 1", $CellContext`x1 == \
$CellContext`and[$CellContext`x1, $CellContext`tau]}]}, 
         "Equationalized Axiom 8" -> {
          Tooltip -> Column[{
             "Equationalized Axiom 8", $CellContext`or[$CellContext`x1, 
                $CellContext`not[$CellContext`x1]] == $CellContext`tau}]}, 
         "Substitution Lemma 7" -> {
          Tooltip -> Column[{
             "Substitution Lemma 7", $CellContext`x1 == \
$CellContext`or[$CellContext`x1, 
                $CellContext`and[$CellContext`tau, $CellContext`x2]]}]}, 
         "Critical Pair Lemma 6" -> {
          Tooltip -> Column[{
             "Critical Pair Lemma 6", $CellContext`or[$CellContext`tau, 
                $CellContext`and[$CellContext`con, $CellContext`x1]] == \
$CellContext`and[$CellContext`tau, 
                $CellContext`or[$CellContext`tau, $CellContext`x1]]}]}, 
         "Substitution Lemma 8" -> {
          Tooltip -> Column[{
             
             "Substitution Lemma 8", $CellContext`x1 == \
$CellContext`or[$CellContext`x1, $CellContext`x2]}]}, 
         "Substitution Lemma 5" -> {
          Tooltip -> Column[{
             "Substitution Lemma 5", $CellContext`tau == \
$CellContext`or[$CellContext`tau, $CellContext`x1]}]}, 
         "Equationalized Hypothesis 1" -> {
          Tooltip -> Column[{"Equationalized Hypothesis 1", $CellContext`or[
                $CellContext`not[$CellContext`p], 
                $CellContext`not[$CellContext`q]] == $CellContext`not[
                $CellContext`and[$CellContext`p, $CellContext`q]]}]}, 
         "Conclusion 1" -> {Tooltip -> Column[{"Conclusion 1", True}]}, 
         "Axiom 7" -> {Tooltip -> Column[{"Axiom 7", 
              
              ForAll[{$CellContext`p, $CellContext`q}, \
$CellContext`or[$CellContext`p, $CellContext`q] == \
$CellContext`or[$CellContext`q, $CellContext`p]]}]}, 
         "Critical Pair Lemma 2" -> {
          Tooltip -> Column[{
             "Critical Pair Lemma 2", $CellContext`and[$CellContext`x1, 
                $CellContext`or[$CellContext`tau, $CellContext`x2]] == \
$CellContext`or[$CellContext`x1, 
                $CellContext`and[$CellContext`tau, $CellContext`x2]]}]}, 
         "Hypothesis 1" -> {
          Tooltip -> Column[{"Hypothesis 1", $CellContext`not[
                $CellContext`and[$CellContext`p, $CellContext`q]] == \
$CellContext`or[
                $CellContext`not[$CellContext`p], 
                $CellContext`not[$CellContext`q]]}]}, 
         "Axiom 11" -> {Tooltip -> Column[{"Axiom 11", 
              
              ForAll[{$CellContext`p, $CellContext`q, $CellContext`r}, \
$CellContext`or[
                 $CellContext`or[$CellContext`p, $CellContext`q], \
$CellContext`r] == $CellContext`or[$CellContext`p, 
                 $CellContext`or[$CellContext`q, $CellContext`r]]]}]}, 
         "Substitution Lemma 9" -> {
          Tooltip -> Column[{
             "Substitution Lemma 9", $CellContext`x1 == \
$CellContext`or[$CellContext`x2, $CellContext`x1]}]}, 
         "Substitution Lemma 11" -> {
          Tooltip -> 
           Column[{"Substitution Lemma 11", $CellContext`q == $CellContext`not[
                $CellContext`and[$CellContext`p, $CellContext`q]]}]}, 
         "Equationalized Axiom 3" -> {
          Tooltip -> Column[{
             "Equationalized Axiom 3", $CellContext`and[$CellContext`x1, 
                $CellContext`or[$CellContext`x2, $CellContext`x3]] == \
$CellContext`or[
                $CellContext`and[$CellContext`x1, $CellContext`x2], 
                $CellContext`and[$CellContext`x2, $CellContext`x3]]}]}, 
         "Substitution Lemma 6" -> {
          Tooltip -> Column[{
             "Substitution Lemma 6", $CellContext`and[$CellContext`x1, \
$CellContext`tau] == $CellContext`or[$CellContext`x1, 
                $CellContext`and[$CellContext`tau, $CellContext`x2]]}]}, 
         "Axiom 4" -> {Tooltip -> Column[{"Axiom 4", 
              
              ForAll[{$CellContext`p}, $CellContext`not[$CellContext`p] == 
               Not[$CellContext`p]]}]}, 
         "Equationalized Axiom 4" -> {
          Tooltip -> Column[{
             "Equationalized Axiom 4", $CellContext`and[$CellContext`x1, \
$CellContext`con] == $CellContext`con}]}, 
         "Substitution Lemma 1" -> {
          Tooltip -> Column[{
             "Substitution Lemma 1", $CellContext`or[$CellContext`x1, 
                Not[$CellContext`x1]] == $CellContext`tau}]}}, 
       EdgeStyle -> {
        DirectedEdge["Axiom 11", "Equationalized Axiom 4"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 8", "Equationalized Axiom 1"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 3", "Equationalized Axiom 3"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 6", "Equationalized Axiom 7"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 4", "Equationalized Axiom 1"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 1", "Equationalized Axiom 5"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 1", "Equationalized Axiom 6"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 6", "Equationalized Axiom 2"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Equationalized Hypothesis 1", "Substitution Lemma 11"] -> 
         RGBColor[
           Rational[167, 255], 
           Rational[167, 255], 
           Rational[167, 255]], 
         DirectedEdge["Substitution Lemma 10", "Conclusion 1"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Substitution Lemma 3", "Substitution Lemma 4"] -> 
         RGBColor[
           Rational[167, 255], 
           Rational[167, 255], 
           Rational[167, 255]], 
         DirectedEdge["Axiom 6", "Equationalized Axiom 6"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Substitution Lemma 2", "Critical Pair Lemma 4"] -> 
         Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Critical Pair Lemma 4", "Critical Pair Lemma 5"] -> 
         Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 1", "Equationalized Axiom 7"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 6", "Equationalized Axiom 4"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 3", "Equationalized Axiom 2"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 3", "Equationalized Axiom 6"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Equationalized Axiom 5", "Substitution Lemma 2"] -> 
         RGBColor[
           Rational[167, 255], 
           Rational[167, 255], 
           Rational[167, 255]], 
         DirectedEdge["Critical Pair Lemma 5", "Substitution Lemma 4"] -> 
         Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 3", "Equationalized Axiom 9"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 9", "Equationalized Axiom 4"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Substitution Lemma 9", "Substitution Lemma 10"] -> 
         RGBColor[
           Rational[167, 255], 
           Rational[167, 255], 
           Rational[167, 255]], 
         DirectedEdge["Axiom 3", "Equationalized Axiom 5"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 2", "Equationalized Axiom 9"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 8", "Equationalized Axiom 4"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 4", "Equationalized Axiom 7"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 9", "Equationalized Axiom 5"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Equationalized Axiom 1", "Substitution Lemma 7"] -> 
         Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Critical Pair Lemma 2", "Substitution Lemma 6"] -> 
         RGBColor[
           Rational[167, 255], 
           Rational[167, 255], 
           Rational[167, 255]], 
         DirectedEdge["Axiom 7", "Equationalized Axiom 2"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 9", "Equationalized Axiom 1"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Hypothesis 1", "Equationalized Hypothesis 1"] -> 
         Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Equationalized Axiom 6", "Critical Pair Lemma 6"] -> 
         Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 1", "Equationalized Axiom 9"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Equationalized Axiom 7", "Substitution Lemma 9"] -> 
         RGBColor[
           Rational[167, 255], 
           Rational[167, 255], 
           Rational[167, 255]], 
         DirectedEdge["Axiom 9", "Equationalized Axiom 6"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 11", "Equationalized Axiom 8"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 11", "Equationalized Axiom 7"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 10", "Equationalized Axiom 1"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 2", "Equationalized Axiom 2"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 3", "Equationalized Axiom 8"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 7", "Equationalized Axiom 3"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 1", "Equationalized Axiom 2"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 1", "Equationalized Axiom 4"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 11", "Equationalized Axiom 3"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 9", "Equationalized Axiom 2"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 8", "Equationalized Axiom 3"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Equationalized Axiom 2", "Critical Pair Lemma 1"] -> 
         Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 10", "Equationalized Axiom 4"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 6", "Equationalized Axiom 3"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 10", "Equationalized Axiom 3"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Substitution Lemma 1", "Critical Pair Lemma 5"] -> 
         Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 5", "Equationalized Axiom 2"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Critical Pair Lemma 1", "Substitution Lemma 5"] -> 
         Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Critical Pair Lemma 5", "Critical Pair Lemma 6"] -> 
         Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Critical Pair Lemma 6", "Substitution Lemma 3"] -> 
         RGBColor[
           Rational[167, 255], 
           Rational[167, 255], 
           Rational[167, 255]], 
         DirectedEdge["Axiom 5", "Equationalized Axiom 3"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 7", "Equationalized Axiom 1"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Substitution Lemma 11", "Conclusion 1"] -> RGBColor[
           Rational[167, 255], 
           Rational[167, 255], 
           Rational[167, 255]], 
         DirectedEdge["Equationalized Axiom 1", "Critical Pair Lemma 2"] -> 
         Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 8", "Equationalized Axiom 7"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 8", "Equationalized Axiom 2"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Equationalized Axiom 8", "Substitution Lemma 1"] -> 
         RGBColor[
           Rational[167, 255], 
           Rational[167, 255], 
           Rational[167, 255]], 
         DirectedEdge["Axiom 11", "Equationalized Axiom 1"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Critical Pair Lemma 1", "Critical Pair Lemma 4"] -> 
         Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Equationalized Axiom 9", "Substitution Lemma 2"] -> 
         Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 4", "Equationalized Axiom 4"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 5", "Equationalized Axiom 9"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 5", "Equationalized Axiom 4"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 10", "Equationalized Axiom 8"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 2", "Equationalized Axiom 5"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 3", "Equationalized Axiom 7"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Substitution Lemma 10", "Substitution Lemma 11"] -> 
         Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 8", "Equationalized Axiom 6"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 4", "Equationalized Axiom 8"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 7", "Equationalized Axiom 5"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 8", "Equationalized Axiom 8"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 4", "Equationalized Axiom 3"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 10", "Equationalized Axiom 7"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 7", "Equationalized Axiom 6"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 9", "Equationalized Axiom 7"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 7", "Equationalized Axiom 8"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Equationalized Axiom 9", "Substitution Lemma 1"] -> 
         Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 5", "Equationalized Axiom 5"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 1", "Equationalized Axiom 1"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 2", "Equationalized Axiom 3"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 4", "Equationalized Axiom 5"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 7", "Equationalized Axiom 7"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Substitution Lemma 4", "Substitution Lemma 5"] -> 
         RGBColor[
           Rational[167, 255], 
           Rational[167, 255], 
           Rational[167, 255]], 
         DirectedEdge["Axiom 7", "Equationalized Axiom 4"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 4", "Equationalized Axiom 6"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 10", "Equationalized Axiom 9"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 10", "Equationalized Axiom 2"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 1", "Equationalized Axiom 3"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 6", "Equationalized Axiom 1"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Equationalized Axiom 1", "Critical Pair Lemma 1"] -> 
         Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 7", "Equationalized Axiom 9"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 8", "Equationalized Axiom 5"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Equationalized Axiom 3", "Critical Pair Lemma 2"] -> 
         Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 8", "Equationalized Axiom 9"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 9", "Equationalized Axiom 8"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 2", "Equationalized Axiom 8"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Substitution Lemma 5", "Substitution Lemma 6"] -> 
         Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 10", "Equationalized Axiom 5"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 4", "Equationalized Axiom 2"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Equationalized Axiom 2", "Critical Pair Lemma 3"] -> 
         Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 5", "Equationalized Axiom 8"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Substitution Lemma 6", "Substitution Lemma 7"] -> 
         RGBColor[
           Rational[167, 255], 
           Rational[167, 255], 
           Rational[167, 255]], 
         DirectedEdge["Substitution Lemma 8", "Substitution Lemma 9"] -> 
         Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 2", "Equationalized Axiom 6"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 5", "Equationalized Axiom 6"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Substitution Lemma 7", "Substitution Lemma 8"] -> 
         RGBColor[
           Rational[167, 255], 
           Rational[167, 255], 
           Rational[167, 255]], 
         DirectedEdge["Axiom 4", "Equationalized Axiom 9"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 11", "Equationalized Axiom 6"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 11", "Equationalized Axiom 9"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Critical Pair Lemma 3", "Substitution Lemma 3"] -> 
         Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 6", "Equationalized Axiom 5"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 9", "Equationalized Axiom 9"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 2", "Equationalized Axiom 1"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 3", "Equationalized Axiom 4"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 9", "Equationalized Axiom 3"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 6", "Equationalized Axiom 9"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 2", "Equationalized Axiom 7"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 10", "Equationalized Axiom 6"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Substitution Lemma 8", "Substitution Lemma 10"] -> 
         Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 5", "Equationalized Axiom 7"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Equationalized Axiom 4", "Critical Pair Lemma 3"] -> 
         Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 11", "Equationalized Axiom 5"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 2", "Equationalized Axiom 4"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Critical Pair Lemma 1", "Substitution Lemma 8"] -> 
         Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 11", "Equationalized Axiom 2"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 5", "Equationalized Axiom 1"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 6", "Equationalized Axiom 8"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 1", "Equationalized Axiom 8"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 3", "Equationalized Axiom 1"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]]}, 
       GraphLayout -> {
        "Dimension" -> 2, "VertexLayout" -> "LayeredDigraphEmbedding"}, 
       VertexLabels -> {None}, 
       VertexShapeFunction -> {
        "Axiom 7" -> "FiveDown", "Axiom 6" -> "FiveDown", 
         "Equationalized Axiom 3" -> "FiveDown", "Equationalized Axiom 4" -> 
         "FiveDown", "Critical Pair Lemma 3" -> "Triangle", 
         "Substitution Lemma 3" -> "Circle", "Critical Pair Lemma 5" -> 
         "Triangle", "Substitution Lemma 1" -> "Circle", 
         "Substitution Lemma 10" -> "Circle", "Equationalized Axiom 2" -> 
         "FiveDown", "Substitution Lemma 9" -> "Circle", 
         "Equationalized Axiom 7" -> "FiveDown", "Axiom 4" -> "FiveDown", 
         "Substitution Lemma 6" -> "Circle", "Critical Pair Lemma 4" -> 
         "Triangle", "Axiom 5" -> "FiveDown", "Equationalized Axiom 1" -> 
         "FiveDown", "Axiom 9" -> "FiveDown", "Critical Pair Lemma 1" -> 
         "Triangle", "Critical Pair Lemma 6" -> "Triangle", "Axiom 2" -> 
         "FiveDown", "Substitution Lemma 11" -> "Circle", "Conclusion 1" -> 
         "Square", "Axiom 1" -> "FiveDown", "Axiom 8" -> "FiveDown", 
         "Equationalized Axiom 5" -> "FiveDown", "Axiom 10" -> "FiveDown", 
         "Substitution Lemma 7" -> "Circle", "Equationalized Axiom 9" -> 
         "FiveDown", "Hypothesis 1" -> "Diamond", "Substitution Lemma 4" -> 
         "Circle", "Equationalized Hypothesis 1" -> "Diamond", 
         "Equationalized Axiom 8" -> "FiveDown", "Axiom 3" -> "FiveDown", 
         "Substitution Lemma 5" -> "Circle", "Critical Pair Lemma 2" -> 
         "Triangle", "Axiom 11" -> "FiveDown", "Substitution Lemma 8" -> 
         "Circle", "Substitution Lemma 2" -> "Circle", 
         "Equationalized Axiom 6" -> "FiveDown"}, 
       VertexSize -> {
        "Substitution Lemma 11" -> 0.20952380952380956`, 
         "Critical Pair Lemma 5" -> 0.6073091356951098, 
         "Critical Pair Lemma 1" -> 0.48798069952429063`, 
         "Substitution Lemma 5" -> 0.6584399524605798, 
         "Equationalized Axiom 2" -> 0.4223721920170338, 
         "Equationalized Hypothesis 1" -> 0.20952380952380956`, 
         "Equationalized Axiom 7" -> 0.4906983436055946, 
         "Substitution Lemma 1" -> 0.47150233937024233`, "Axiom 7" -> 
         0.33333333333333337`, "Conclusion 1" -> 0.33333333333333337`, 
         "Axiom 3" -> 0.33333333333333337`, "Substitution Lemma 6" -> 
         0.6666666666666667, "Substitution Lemma 7" -> 0.6477366120769295, 
         "Axiom 6" -> 0.33333333333333337`, "Axiom 2" -> 0.33333333333333337`,
          "Hypothesis 1" -> 0.33333333333333337`, "Axiom 4" -> 
         0.33333333333333337`, "Equationalized Axiom 6" -> 
         0.35459201538666163`, "Substitution Lemma 10" -> 0.5840822691885422, 
         "Critical Pair Lemma 4" -> 0.4474747143327742, 
         "Substitution Lemma 3" -> 0.489070248531162, 
         "Equationalized Axiom 1" -> 0.48695619849255417`, "Axiom 10" -> 
         0.33333333333333337`, "Axiom 8" -> 0.33333333333333337`, 
         "Substitution Lemma 4" -> 0.6611964365924198, "Substitution Lemma 8" -> 
         0.6271040532120274, "Equationalized Axiom 5" -> 0.28807692199306595`,
          "Equationalized Axiom 9" -> 0.3828498726676239, 
         "Substitution Lemma 9" -> 0.4565821475900409, 
         "Equationalized Axiom 8" -> 0.32907021072251624`, 
         "Critical Pair Lemma 2" -> 0.36816815249405627`, 
         "Substitution Lemma 2" -> 0.37123801898660563`, "Axiom 9" -> 
         0.33333333333333337`, "Axiom 1" -> 0.33333333333333337`, 
         "Equationalized Axiom 4" -> 0.31496946840318707`, 
         "Equationalized Axiom 3" -> 0.31201583846946396`, "Axiom 11" -> 
         0.33333333333333337`, "Critical Pair Lemma 6" -> 
         0.40198805417870004`, "Axiom 5" -> 0.33333333333333337`, 
         "Critical Pair Lemma 3" -> 0.3957945027609156}, 
       VertexStyle -> {"Axiom 1" -> Directive[
           RGBColor[
            Rational[71, 255], 
            Rational[182, 255], 
            Rational[109, 255]], 
           EdgeForm[]], "Axiom 8" -> Directive[
           RGBColor[
            Rational[71, 255], 
            Rational[182, 255], 
            Rational[109, 255]], 
           EdgeForm[]], "Substitution Lemma 3" -> Directive[
           RGBColor[
            Rational[15, 17], 
            Rational[52, 85], 
            Rational[12, 85]], 
           EdgeForm[]], "Axiom 5" -> Directive[
           RGBColor[
            Rational[71, 255], 
            Rational[182, 255], 
            Rational[109, 255]], 
           EdgeForm[]], "Axiom 11" -> Directive[
           RGBColor[
            Rational[71, 255], 
            Rational[182, 255], 
            Rational[109, 255]], 
           EdgeForm[]], "Substitution Lemma 7" -> Directive[
           RGBColor[
            Rational[15, 17], 
            Rational[52, 85], 
            Rational[12, 85]], 
           EdgeForm[]], "Equationalized Axiom 2" -> Directive[
           RGBColor[1, 
            Rational[2, 5], 1], 
           EdgeForm[]], "Substitution Lemma 10" -> Directive[
           RGBColor[
            Rational[15, 17], 
            Rational[52, 85], 
            Rational[12, 85]], 
           EdgeForm[]], "Critical Pair Lemma 1" -> Directive[
           RGBColor[
            Rational[47, 51], 
            Rational[98, 255], 
            Rational[53, 255]], 
           EdgeForm[]], "Equationalized Axiom 4" -> Directive[
           RGBColor[1, 
            Rational[2, 5], 1], 
           EdgeForm[]], "Equationalized Axiom 7" -> Directive[
           RGBColor[1, 
            Rational[2, 5], 1], 
           EdgeForm[]], "Hypothesis 1" -> Directive[
           RGBColor[
            Rational[146, 255], 
            Rational[10, 17], 0], 
           EdgeForm[]], "Axiom 6" -> Directive[
           RGBColor[
            Rational[71, 255], 
            Rational[182, 255], 
            Rational[109, 255]], 
           EdgeForm[]], "Axiom 10" -> Directive[
           RGBColor[
            Rational[71, 255], 
            Rational[182, 255], 
            Rational[109, 255]], 
           EdgeForm[]], "Critical Pair Lemma 3" -> Directive[
           RGBColor[
            Rational[47, 51], 
            Rational[98, 255], 
            Rational[53, 255]], 
           EdgeForm[]], "Axiom 9" -> Directive[
           RGBColor[
            Rational[71, 255], 
            Rational[182, 255], 
            Rational[109, 255]], 
           EdgeForm[]], "Equationalized Axiom 3" -> Directive[
           RGBColor[1, 
            Rational[2, 5], 1], 
           EdgeForm[]], "Substitution Lemma 9" -> Directive[
           RGBColor[
            Rational[15, 17], 
            Rational[52, 85], 
            Rational[12, 85]], 
           EdgeForm[]], "Critical Pair Lemma 2" -> Directive[
           RGBColor[
            Rational[47, 51], 
            Rational[98, 255], 
            Rational[53, 255]], 
           EdgeForm[]], "Substitution Lemma 11" -> Directive[
           RGBColor[
            Rational[15, 17], 
            Rational[52, 85], 
            Rational[12, 85]], 
           EdgeForm[]], "Equationalized Axiom 8" -> Directive[
           RGBColor[1, 
            Rational[2, 5], 1], 
           EdgeForm[]], "Critical Pair Lemma 6" -> Directive[
           RGBColor[
            Rational[47, 51], 
            Rational[98, 255], 
            Rational[53, 255]], 
           EdgeForm[]], "Substitution Lemma 1" -> Directive[
           RGBColor[
            Rational[15, 17], 
            Rational[52, 85], 
            Rational[12, 85]], 
           EdgeForm[]], "Axiom 7" -> Directive[
           RGBColor[
            Rational[71, 255], 
            Rational[182, 255], 
            Rational[109, 255]], 
           EdgeForm[]], "Substitution Lemma 5" -> Directive[
           RGBColor[
            Rational[15, 17], 
            Rational[52, 85], 
            Rational[12, 85]], 
           EdgeForm[]], "Axiom 2" -> Directive[
           RGBColor[
            Rational[71, 255], 
            Rational[182, 255], 
            Rational[109, 255]], 
           EdgeForm[]], "Substitution Lemma 4" -> Directive[
           RGBColor[
            Rational[15, 17], 
            Rational[52, 85], 
            Rational[12, 85]], 
           EdgeForm[]], "Equationalized Axiom 9" -> Directive[
           RGBColor[1, 
            Rational[2, 5], 1], 
           EdgeForm[]], "Equationalized Hypothesis 1" -> Directive[
           RGBColor[
            Rational[178, 255], 
            Rational[2, 5], 1], 
           EdgeForm[]], "Equationalized Axiom 5" -> Directive[
           RGBColor[1, 
            Rational[2, 5], 1], 
           EdgeForm[]], "Equationalized Axiom 1" -> Directive[
           RGBColor[1, 
            Rational[2, 5], 1], 
           EdgeForm[]], "Substitution Lemma 8" -> Directive[
           RGBColor[
            Rational[15, 17], 
            Rational[52, 85], 
            Rational[12, 85]], 
           EdgeForm[]], "Substitution Lemma 6" -> Directive[
           RGBColor[
            Rational[15, 17], 
            Rational[52, 85], 
            Rational[12, 85]], 
           EdgeForm[]], "Substitution Lemma 2" -> Directive[
           RGBColor[
            Rational[15, 17], 
            Rational[52, 85], 
            Rational[12, 85]], 
           EdgeForm[]], "Equationalized Axiom 6" -> Directive[
           RGBColor[1, 
            Rational[2, 5], 1], 
           EdgeForm[]], "Conclusion 1" -> Directive[
           RGBColor[
            Rational[13, 15], 
            Rational[1, 15], 0], 
           EdgeForm[]], "Critical Pair Lemma 5" -> Directive[
           RGBColor[
            Rational[47, 51], 
            Rational[98, 255], 
            Rational[53, 255]], 
           EdgeForm[]], "Axiom 4" -> Directive[
           RGBColor[
            Rational[71, 255], 
            Rational[182, 255], 
            Rational[109, 255]], 
           EdgeForm[]], "Axiom 3" -> Directive[
           RGBColor[
            Rational[71, 255], 
            Rational[182, 255], 
            Rational[109, 255]], 
           EdgeForm[]], "Critical Pair Lemma 4" -> Directive[
           RGBColor[
            Rational[47, 51], 
            Rational[98, 255], 
            Rational[53, 255]], 
           EdgeForm[]]}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[0.020078397205984644`], 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{0., 15.}, {8.000000003227825, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{0., 15.}, {6.999999998802252, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{0., 15.}, {9.000000005280128, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{0., 15.}, {5.999999999921073, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{0., 15.}, {2.999999996216445, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{0., 15.}, {1.9999999973007903`, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{0., 15.}, {0.999999998524487, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{0., 15.}, {5.000000002580492, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{0., 15.}, {3.9999999963898176`, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{0.9999999984718784, 15.}, {8.000000003227825, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{0.9999999984718784, 15.}, {6.999999998802252, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{0.9999999984718784, 15.}, {9.000000005280128, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{0.9999999984718784, 15.}, {5.999999999921073, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{0.9999999984718784, 15.}, {2.999999996216445, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{0.9999999984718784, 15.}, {1.9999999973007903`, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{0.9999999984718784, 15.}, {0.999999998524487, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{0.9999999984718784, 15.}, {5.000000002580492, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{0.9999999984718784, 15.}, {3.9999999963898176`, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{1.9999999987284127`, 15.}, {8.000000003227825, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{1.9999999987284127`, 15.}, {6.999999998802252, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{1.9999999987284127`, 15.}, {9.000000005280128, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{1.9999999987284127`, 15.}, {5.999999999921073, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{1.9999999987284127`, 15.}, {2.999999996216445, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{1.9999999987284127`, 15.}, {1.9999999973007903`, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{1.9999999987284127`, 15.}, {0.999999998524487, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{1.9999999987284127`, 15.}, {5.000000002580492, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{1.9999999987284127`, 15.}, {3.9999999963898176`, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{2.9999999993112567`, 15.}, {8.000000003227825, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{2.9999999993112567`, 15.}, {6.999999998802252, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{2.9999999993112567`, 15.}, {9.000000005280128, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{2.9999999993112567`, 15.}, {5.999999999921073, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{2.9999999993112567`, 15.}, {2.999999996216445, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{2.9999999993112567`, 15.}, {1.9999999973007903`, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{2.9999999993112567`, 15.}, {0.999999998524487, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{2.9999999993112567`, 15.}, {5.000000002580492, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{2.9999999993112567`, 15.}, {3.9999999963898176`, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{4.00000000307972, 15.}, {8.000000003227825, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{4.00000000307972, 15.}, {6.999999998802252, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{4.00000000307972, 15.}, {9.000000005280128, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{4.00000000307972, 15.}, {5.999999999921073, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{4.00000000307972, 15.}, {2.999999996216445, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{4.00000000307972, 15.}, {1.9999999973007903`, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{4.00000000307972, 15.}, {0.999999998524487, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{4.00000000307972, 15.}, {5.000000002580492, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{4.00000000307972, 15.}, {3.9999999963898176`, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{4.999999998846164, 15.}, {8.000000003227825, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{4.999999998846164, 15.}, {6.999999998802252, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{4.999999998846164, 15.}, {9.000000005280128, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{4.999999998846164, 15.}, {5.999999999921073, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{4.999999998846164, 15.}, {2.999999996216445, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{4.999999998846164, 15.}, {1.9999999973007903`, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{4.999999998846164, 15.}, {0.999999998524487, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{4.999999998846164, 15.}, {5.000000002580492, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{4.999999998846164, 15.}, {3.9999999963898176`, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{6.000000008279244, 15.}, {8.000000003227825, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{6.000000008279244, 15.}, {6.999999998802252, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{6.000000008279244, 15.}, {9.000000005280128, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{6.000000008279244, 15.}, {5.999999999921073, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{6.000000008279244, 15.}, {2.999999996216445, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{6.000000008279244, 15.}, {1.9999999973007903`, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{6.000000008279244, 15.}, {0.999999998524487, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{6.000000008279244, 15.}, {5.000000002580492, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{6.000000008279244, 15.}, {3.9999999963898176`, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{6.999999999891713, 15.}, {8.000000003227825, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{6.999999999891713, 15.}, {6.999999998802252, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{6.999999999891713, 15.}, {9.000000005280128, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{6.999999999891713, 15.}, {5.999999999921073, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{6.999999999891713, 15.}, {2.999999996216445, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{6.999999999891713, 15.}, {1.9999999973007903`, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{6.999999999891713, 15.}, {0.999999998524487, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{6.999999999891713, 15.}, {5.000000002580492, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{6.999999999891713, 15.}, {3.9999999963898176`, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{8.000000000404157, 15.}, {8.000000003227825, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{8.000000000404157, 15.}, {6.999999998802252, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{8.000000000404157, 15.}, {9.000000005280128, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{8.000000000404157, 15.}, {5.999999999921073, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{8.000000000404157, 15.}, {2.999999996216445, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{8.000000000404157, 15.}, {1.9999999973007903`, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{8.000000000404157, 15.}, {0.999999998524487, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{8.000000000404157, 15.}, {5.000000002580492, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{8.000000000404157, 15.}, {3.9999999963898176`, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{9.00000000421494, 15.}, {8.000000003227825, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{9.00000000421494, 15.}, {6.999999998802252, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{9.00000000421494, 15.}, {9.000000005280128, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{9.00000000421494, 15.}, {5.999999999921073, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{9.00000000421494, 15.}, {2.999999996216445, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{9.00000000421494, 15.}, {1.9999999973007903`, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{9.00000000421494, 15.}, {0.999999998524487, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{9.00000000421494, 15.}, {5.000000002580492, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{9.00000000421494, 15.}, {3.9999999963898176`, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{10.00000000326665, 15.}, {8.000000003227825, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{10.00000000326665, 15.}, {6.999999998802252, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{10.00000000326665, 15.}, {9.000000005280128, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{10.00000000326665, 15.}, {5.999999999921073, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{10.00000000326665, 15.}, {2.999999996216445, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{10.00000000326665, 15.}, {1.9999999973007903`, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{10.00000000326665, 15.}, {0.999999998524487, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{10.00000000326665, 15.}, {5.000000002580492, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{10.00000000326665, 15.}, {3.9999999963898176`, 14.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{3.999999999263565, 3.}, {3.9999999993422932`, 2.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{8.000000003227825, 14.}, {6.999999998878593, 13.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{8.000000003227825, 14.}, {9.000000006164868, 13.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[BezierCurveBox[CompressedData["
1:eJxNlH1MVWUcx683dOZliXnf6J57z7mX+35gC8oiZ+y7dsW5FhJuZbE1bWPj
5Ra4FeZbuZstpI3puLgpjZdaMYrWDZg1cCvTARLOujpSJLwoDCQDblwQkaRz
fo9/PL8953z32dnznM/5Pecc+9vlBUVajUZTqBxqpnRZlLMEDVU6LowLxFef
qYwvTchYnWkjzihY0/DuJRnRepF4TWFkdWFEhuy2E+/Je8/7y3EZKb87iJGu
TpAROuUkbkpsb0xsl3Ek5CYOtRTOnXfIWPeZl3gi8Kk2+b4fUoef+NKAWn5U
700npumNfmx8MYNY6N2rDD9+MjDODajlx/4HMnHwnFEZfuya9hHX5txRhg87
p9n9z3ar5UPwAfMdy665nV3jQ7OBPW/ymd26M7t9SE9aR0w6A160Pp5EPEc+
XnQd+m9lZUV85ONFXSBBTDoBL4ZK7xKXkY8XtTPjxGHy8aA7GiNmPh7k6/8i
Zj4evN45RKwjHw/C968Rs/64UTPCmPXHDXfWdc7HjTcTjLeSj3LddYOY9UeZ
f2GY83EhHB3hfFx4dsco5+NCxeYxzseFodMznI8TXQ3/cj5OpFaxfljJx4n4
a/OcjxPQzXM+TiR/Ncf5pOFVZ5zzScOGY/9wPml4+cokMduvNByJXCVm++VA
ie4yMdsvB176s5/rjwPJ+j7Ox4Ffz/VwPg4Ux3o4HzselvdxPnZ8XPEb52PH
4uhlzseO3qYxrj8Svrk+xfVHQnPeLOcjoXUlwflIOH93kfORMGtYJvYejnoO
R0VkHHxI/ME+tUTkPKGh97NPXU4QMXuIsYkWsMGYzfj0KbWsCAqMJ+kDsWJh
A+MX1Me5LeAHM+PqKrUEfP4042uhDGUI6HqDMfOxYG2YMfOxoOom72PB5i2r
iM3k8xQ6OrWcTyp648cbg8sixsvqnlyPVCxFMj9sj4twT+eMHLhjxqqWifo/
borYI51cHq4zY/BK++LFHhEntPXvbNpqRuj52nD91yJ+DL+SefSeCZpoVXnu
RyIGB7/bdrHNhB1f1h7rzxfxd193JKnIhIpvO255LCLule4LPieZUDQ1eeCt
ERuWzsaUNOKG4fv89qANG99vUdKILPeMVveYDdLaSSWNKLG0nihutkKq/EJJ
Aw7ODy/3b7Mi5edBJQ0IdlYHshYELNw6qqQeW3a1Fze0CRgYbVNSj6nYzpL1
ZQJOducpqUdlXnnuJ5kCCipKldQj1qT+b4RH/2c9/gfZ2nwT
          "]], 0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{6.999999998802252, 14.}, {6.999999998878593, 13.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{6.999999998802252, 14.}, {5.999999999390496, 13.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{9.000000005280128, 14.}, {9.000000006164868, 13.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{5.999999999921073, 14.}, {5.999999999390496, 13.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], 
         ArrowBox[{{2.999999996216445, 14.}, {3.4567190452304146`, 13.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[BezierCurveBox[CompressedData["
1:eJwl0n0s1HEcB/Bf95iHsKvkoUb87plbuQwz59121C16wEquTDZay+44hiwP
5aStpVbK2HG5Jf1TmerGuOZpqXF/GP4hMhEqtUZ0aul3X+99vvvu9cfnu+++
n+/+TH1SFouiKAWznDtVGb/JJJYiCQHPT0M8piz8ubEgx8TaMeLQJF6Tzi5H
se8JYp62jattk2PmWhLxheMFkp67cggOnCZGiLOBMZ1G/GhVY17VMOedTye+
3qpd6Q+SQz+VSbygrma5O2SwWy4S24edkWEwIoeYtJtlUIpyifcO5jElg7su
nzhe7YwMKZ6FxDm93kzJ4OJaTHxftcSUFIr0K8TdXc5I0etWQjwXWfMpskaK
AcGW3a0ZbtYMKewni4jJdYYlCFg+N1TLpqCzTc/lmyWgnx9WJHtQcHmgn9IZ
JCj8ekkSHUihIbncaouTwKtlvDMhikKgY0duhq8E6xPG2eqzFJqq/F3PLIsh
vV1k+VZBQeBoNTb3ivGk65mj5AWFq8kvP8Y+FEOXLV4Mm6cwVRvjH3ZZDL+O
PEo9sg1b7yNi5hVkEPiwQKV6aavMIlgmG42WTBYSN8OtrwwifPk7F7HaxkJ7
X8x0WrwIM6Xrt/hsNkIt4tEiPxEq08crPqSy0de4Uuv2Q4jRpjLv/HY2dK+b
g70HhBhRrSQMeXKgXDpYXlcvRKlKSc/ncuAZ9bj1jl6I8UaVqWecA07Lb9O/
OCEsI2P26kQu9qm66+27hfAIeP9r2saFffvRpw2LNPbc8N/1VsTDTq7pXdYb
Gt28YUnMTR6+h3VsKOposJonlOpZHjLumVRrBhrzKUfCJw/xkR2sqe06RSMr
SBDKquCD89n2p0xJw+gS7d/Zz0fExEYBfGjAtY8ZFx9b/5nGf4r4WIM=
          "]], 0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], 
         ArrowBox[BezierCurveBox[CompressedData["
1:eJwt1Q00lPkeB/AxhhlmmGG8G2EwhplJ3Varcj3fq6HGlbaymouk9OK6bKEs
tyXcViQvuUI60iaF3sQuiqJVeSnqdtlke89L0stgkNeWZ33P7znP+Zzz/M/5
nv9zzv9vuX3Pxp1UCoUSNvfMvymOjl++fPlEUMiIkae2jHTHsqihyX4RNp1c
QlqyUf3Ud20iCMckpNX9ytX8ykXgGYhIb/PaJ2zIFEE8ZUsa4vkFIvgVW5M+
rZQVKmUilOhZkk487zfSyBdBV2ZGul96mMqasEe+qzHptvvzscdVuj5pcnmh
PVpPcUjzmsLnxh69dBZpd+l87PHFlU469JbB3NiD9w2V9H9dBubGDisdZmbn
XVc7HzvIX46T7nFKf+OUboeYoGHSrKpAZlWgHXbdfkGarHNfiGe1S1NLqQrC
XSLKWV8oRJ1m7OJzmgoixPunM8/ChbjfvmFg1FBBLHN1GI6SCsFmlNfm2SuI
M2Mdh0wNhThUlVuc7qogroVn+d4bsMXibsb5x1sVRFTl7sikOltoRqo2RCYq
iO5a7weeGbYwTjis2F6mIHqP/OO7RdttsS6qJt3LfWhhfwTwPdN7nR0zRNRQ
T0zLCwWYlG2Rni0fIsRlcmfVCAHEYeYi1ochwq6RefSeVICPTPGeNYuHiYvr
KgavGgqwWvAfjs++YaJG5ulX9c4G9nXWbKf6YcKz+kl31w0bFLVx/vVBe4TY
neMbYnzMBpd911hHBY0QzP52jegdNoinLYrQyFcu9LHGi1NPdutMKonY0ODu
gEJrzBZkFiFglMCGnEqTCGv8rrLaJvfuKKF3wEdOcbPG/lbFe71lY8TngZJm
tpE1Ho6fmLxWNEZ8LEijyQat8DbFxSvJaJwYy6GxLt60QkP88/6YY+MEu1Pr
hVOWFXyexjRla38mVspLYz/ttIKn+8mMwY6Jhf/FR2D6xGmnLZPE/hZn5w2F
fHDdAx6V900S1nf6V/aE87ErrMXKO3yKeFzf1vyjlA8f2qrj/Jkp4ui1j72O
hnz0aVYKeEemCbcKjyzlgCX0E5Z2wWiGoJW9artVZ4nXu6pKM8/PELdPV+YV
ZFjim7q/nWQ6zRJHchqGD2+3RF/qG90JbQr+3B8LrORcujAjp4C+qr3l74UW
kNFeqQiKKAhJlYS3h1uAG3xQP+IDBcob7371lloge1Vy36uvVVD0SK3+uYEF
/hc3tW9/ogqUWTOtXY/M0bz0SYO4TQUK6YXQqe/NEe1t2Uo3osKpVi/Ixswc
b/r+n6keRMWD0RWXfX5dhPtx1aMP5KrIPzEfMwTmWnIvn1VFQmKO2yUXM1i+
v7Q+YkgVBWtXl4284UE31v8Cj6Dh/WBhU2gKDxIPieBSGg0hoRcLjBx4+H6T
RYPVMxp4rcHi8Q5TfMxzjImXqIGi1hnJOGCKLJOwDY1xajAwG4r0tDTFjq67
a98/VEOA7g1xY5MJvppml1oNqi/0MYbX1acTD0BHqoNnZqWLMQLNu6T/zqWj
ftq4k9VjhH+6U4/wP9GxQkU1uDjFCMECv5bmNQwonemyWAcjBNS/pob9xMDI
FUF0dqchPHVOLGdPM7Dcd9vouwOGWMKL23FlswbqVlU3xPMNwXx57Oi6nzWQ
5C3s/rbFAOdMQvdmjWou9NHHPdlyrTQfJqq5DirXXPSR8lmollHDRHhacR6/
Rw/PBVJ5nikLd9Vntv6Wooc7HYfVSw+yUH3QcXOHgx7cqEr2rR4WpJ+94ni/
ceF/JXnfSw8thO6VdV7+gQvGU7ev6BVaWPLW2j/ViguPZNF6RxNtZG59pVvR
qos0nTuH5EnshT46kItKbQuUbJy50uShR+jA26Ny9tlfODCcoddn9HJQd242
sTuUg9kE3zFmGgd9ZVUW0hIONrnUK5IdOXjo8/tjk7nvluwI9de6ycYPZaEl
AVY6yL0et0WTy8bb4pAsdpAOnh78pYcRog0DWedxyVkdUH/mDDMatUDLvlhR
06cD9c2ZP2ou0oKQvk1/3XJdODfvvU7xZ2FxOE9tIF4XHrNaKfrnmDB49Dzh
6F1diCd2D62d1sQLu5LUr+lcvK6JG8kP0ERydDT/nSsXe/66MYPZpgG9m+vd
z8Zw0ZH0+nb+Gg0kTkrGd17ggnXcIXttOwMPJVxHhy4ueMErZvS2MUCRzx3v
X7j48/5i4A9oZBfq
          "]], 0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], 
         ArrowBox[{{5.000000002580492, 14.}, {4.456719044866276, 13.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{3.9999999963898176`, 14.}, {4.456719044866276, 13.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{3.9999999963898176`, 14.}, {3.4567190452304146`, 13.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], 
         ArrowBox[{{3.9999999993422932`, 2.}, {3.9999999992983533`, 1.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{6.999999998878593, 13.}, {3.9999999984350723`, 12.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[BezierCurveBox[CompressedData["
1:eJxN03lIFGEcxvH1SCnXygqddXd1dl13ZyLMI83MlYcOWBENMszUPFMCJbNC
xdI0jEBNLSWjwxIitQgVs9K1wBUsrwqJEknzwk0wqNQK8Wjnff1jfrzD8IFh
5jsvM6rkzKOp1hKJBJZDOEs659bW1uQCLbMTE+bC9rz3crSZ+uL0Zh5Rc3du
/ayWo+l6dFhuH4+TvUE1SZFy/Ehs7G9u5LFYkGgc3ChHevDr0ZliHmpHqY3/
K1d4sdVFrnE8xs/rz9TEu2KP1Otl2G4e3q0LywvLMhRISgvyVjns6PdpCq+S
Qbry5MvjXg4lxoXiOpUMX63KTR8rOazF8MrhaQYy6+7e6UwObn8M2f5NDBi2
rj4/nIO5LLKyvZDBSCwXd5fnEOUemn7qBIOYtmiz3pbD2We8fcA+BrW7fENT
R3Xw3buY4sUyqOt6XuTUpsO9zqdF4ZsZpF0YrzxQqkOLPjyxyobB3KG27H8J
Ovh5jVn2xwWDA8Jo8dt6nHgh9IFlabG1bIJY8TbLsrQo6Z0kPnxIGC0SjFPE
GV3OlqXFzaRp4uqQ2aqQWU+oO6k7jcJ4Yks/9XRg+VRguSdiyqkdXiRalifY
gklRjwbzDpOiHg1MTtRK0qNBRYW4R4NjV8U9GjDz4h4PfB6eEfV44EbArKjH
AwbpHLGU9Hig58hfYpIzoEZQwxLxPOlRI6B2RbQ/anT4CN8Zs96jRk+yNTHt
UeO4jy0x7VHh3P0NxLRHhW31dsS0RwV9hD0x7VGh9Q013R8WER+o6f6w2D9C
TXtY5HyzF/WwsFo37WExMkzN5Q/p8ofcYTNInZsjjDsuGanfCbdTuOPgI2oX
cgM3xFyjTiPjhounqf2yfy2ZHd0QH0a93GyQ5XYoYedNbRIen6FEljP1lfrY
+W61Eg9X6fsHp7g0XR5ToOo79SJ5PwUMn6gbhMtTFTB1UUfd3q7c5K2ApIWa
/u8K/AfFhqNm
          "]], 0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[BezierCurveBox[CompressedData["
1:eJxN1H9MlHUcB/CT48cNte7guHvoueN+cNwPPeyXEPTH9V7DrBUpWE1jLcev
Tb1ULH8sMpHJUiphnpqKeWtrV5bJSY0RsgnVQlywuByo0Z0KglekopWEEN3z
+fjH89n39uy13fPs/Xw+3+drKd1QXBGnUChKYj/pqugYn52dFaGgWoBd+ezz
j2+ZmBpz4YXjf5CzixOPre91YeVctqokmFASdCHw+u/k0hffcnY2uvBkIEqG
W7rBBU3kOtn/13Ox5YI7mb3zs5I731tdqHeMkUcL3oub968T7idGyT9ROdGZ
d418R7rd78TUwhGyobsqtpw4rx4mF1A5UTR2hbyuS+ft0jlR1XyZvN8T9Xmi
Djy2JkLuOC2VAwe1YfJI3t7hvL0OfHxqiDy3dXVsOfDQxCC5l/LYMXlmgEyv
47fjU+OALI8d6cnsJZTHjlV1bC/lsaO0YVCWJwu5zouyPFkYWParLE8WkBiW
5clC79KoLI8NoW/GZXlsaLl6k2ykPDas778ty2PDfzV/y/LY4J24K8uTiVPW
KVmeTPysnZblycTZ7hnyPMqTCXu+tIsM9+dlhaJaSeZ5WaE7FE/m/lhR3phA
5jxWXC9LJHMeKwIpSWTOY8Gxo2zOY0HfHBWZ81iQ9zSb81gQ2MTm/pjRsZHN
/TGjbqVKlseMGZdKlscM+7UkWR4zFPVs5/aQY3vIhHqBvW2rVCb80Mj5z0qP
M5gQvM3vp6cHZOClBu7HkcNSGfFL7Yd+77QItfdAyoMwwjvkfrdlQsTgDU/4
7agB4tErTf0RETcsB6eHDhgQ6fpysudHEUUJTW/kLDGgvfD9/U0BEYmHCx/d
dVfEyadqNjyzI/Y9/vbV0p4TIto+qt9zbrmIV/tPB+MrRFx6+YurDlHE9Oat
3lxz7Dv2iXWfWNKhzTHR9eu+5cYLIwKU9bt9PREBnaGNW3KaBQQWFSy7d0RA
kb+68dsaAZPW4rbcFQIqF1etK18l4F5lS1+1SkDcvqKk3HwBJ6fK951r18Pa
ZihfZBagDa9RZq7VozsQ2ln4gACXpstSp9Pj1mtvrvYpBdz0rf3z1hkdasLS
uSPc708a3K1zyNL0fZ40PL85jpwvjXtYi8uikrxnt1RajB5nX6zNvlCbrUWZ
KZ7M80rFinfYPK9UtHayafyGVDSMs3leKbg0y66kSsGJxATyYuk4nJ+CjPns
meCz6dvaNViQyv5O2i5eDUICu5bONw3SMtieMn3zjrAa/1jZvB/V2ORgfy79
vUKNDxayXzmUakx+RA08zObzWY3/AZnpVxQ=
          "]], 0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], 
         ArrowBox[BezierCurveBox[CompressedData["
1:eJxNlFtIFFEYx5fIS2mtGWyrO+vuWfcyaxmZRkpaf0tNKaQUidwHZVMoM11l
NUnLSirxwQy10Ac3NTMQbMFSITMvRQYaaUV0o5slIuTd1NBt9kwP58838/F7
OGd+851hiDk7IX2NRCKJEy5nt8+FCHcNJDQBSG0LovwmOH96ecyIZN/tlAMT
XOuyhoyoMwZQdjfZXUx2IwzfdJTN8Va+p8KIZRDK2OZcYIQsjqNsm4sTyohz
SzLKl5pNs/0aYX3CJsq/oq6t8VziwSV6UB6k4fGy2IXyrHO5jUebSUKZe54j
FI8Xv/46HA6CKBoeXmSR8uleWWavjEfp+nnKVXvHK/eOGxDcOEO565EzBkgn
piiPhpb/CC03QPl9krJHe6pQBpSUiDxEffQYvCgyfR2bHitFIos+engXiBxN
ffRYlytyJvXRYyxjkvHR4Z55kvHRIf74JOOjw4d41kcHV5710aJTz/po4blH
ZCX10UKSzvpoUXWH9dFiYIn18Udd2hTj44/NP9n5+COgcJqyJ/XxR0XvLGXx
vDQYKpyjLJ6XBoUR88x8NLjlusD4aKB6t8D4aCC7/4fxISgqX2R8CI7mLTE+
BJUnlhkfgjNlK8x81LBmrzLzUaN7q4PxUSP2iYPxUcM7QPy+RB81/DJF5s+P
GM6PqJBxReSCs86o8CdP5AHndpwKzyJE3kI38MPnN+Lza2ucUWLjw1qvxysE
79c3l6REKhGN7P1zCwSrp640dP3mcDm/qLppgsClI2TBXs+h71jfuuGPBBPT
Dy6EJ3NwH4Ut/zlBu69reIqcQ6JiMelmK4E5iN/u80mBxpWxwB03CGZ2KZIy
mhRYLPMyRGUTpPFf7AlWBRL7cyJHYgk63K1CV6C0cUP1yx41indKhe6LxPKY
ZssBNfi8g0L3RYZb2JSlXoXWV1xB5ysfJLuppIeH/SCNvu5296QPrNy+llyZ
H46M1CWFefigO6bm6ahFCUvBIXNupxxBVwNNDV85ZO6uDjxqkeP1h79ZLekc
YqVFHW93ynE7aq0wL+7//0eOf2A7DNg=
          "]], 0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[BezierCurveBox[CompressedData["
1:eJxNkn0s1HEcx8+xTOY83I8ro/K73/38fq2pLKI79mYh2enBH3FTHkbmoY4t
apZiSGjSTljXPBSKhmqch/NUrYnSGopqVBxiwppkKjquP3rv9d1nr3323T77
7GMXLj8eyeVwOA7at15Ds36sra0JwNnITgztz2lJfi2AwfPeYLcpFsOjFYUL
BQLMFgb6XehlEX7RqygsQICmxOqXD6tZnDOLU/cZCRAa1j4ymcGCp9yi79Rs
hbmggjTrYBaONn5ni05Z4WSIQ5PfbhajCv0/i78tUZeQeyl5lQHB9ayXKiwx
lv9gqKqHQf/pTZnldpb42Zb39E0+gxKJ2HZYQ2Dh5rMejZxB/KAsyamegO+N
8nspUgY+DpH5LakEuPVMsJJlYHdYFhsRRMB6PnDKzYABhzlg6OxKQHHM0Tdy
xB4T3QYRDjsIxL5rSDNvtEcf25om5RGoSPmc75lrD7VUFqrQJyD2aUxaDrFH
wMCEdj989L1aDw0948kNX/Qt1UKDpHRu052ghYZqm869Dq6HRseK7n/cEyst
NFybdV7gPq1wnxaBPqHzNvV6RLgypNlwjUveuEueCDJXnRurQrWIUPboy3/z
UIiaTWBXf/Gxy1US611GoWsfVbU8z8dq+sRScyKF+znLifMf+UDtCzklpbB9
bq54rJOP7w0Tb6/SFJgQQ9N+JR+WSgk7qUehc8RjuF3OR01IX7TkkxBT0SWL
lWI+6rjFRbkdQpTq20bkrFmAyrj9eKBU269pp2PVFtis+dBKpAuhmPHPHrex
wN7shgpzbyEQ76QyyTGHL1nXlWcixDdxQu001xxH6rt5196TuCXlys9nmcFz
j951oxoSPpVfV1QCM1CVMg/DyyRmMg/dORpliiWTQVFmIAlvacx4oYqHxpgz
knRnEnfLnFtgy0OEms7U20qCk1or9Fea/LtnEn8B60pFcA==
          "]], 0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[BezierCurveBox[CompressedData["
1:eJxTTMoPSmViYGCQAWIQ/WCJi8a6y4IODGCg5fBo8tqNQt2CDts/PBQXea7p
8F++IfCGqaDDTtet5pdPajpYee5h/39ZwIH5f2W87QpNhwn8SVfaUgUcJskY
9Ac1aTqwPXuUd/8Kv0P2vOvHhCI0HdSeX0ksPsrn0NNSwFanqelQpzSr8eQc
Xodv5375Tvmm4SAww+jcwygeh+W1ZXND92s43HSf577nP5fDwgmPvxxs1nC4
Z6MwTyiFy2FrU1//5FQNh851fPd8nnE6THgnUD7dVcPhxpxM9uw2TgejK1mr
zyprOJxhN5TKdeF0mG48R8eMQcMh5X2KWLACp8MRnqW/LtxSd1gYzPpHRorT
YXt8q+i8zeoOTSZCp08ZcjoU6NjWzu1Sd+Ca1N0ck87p8K7ojOH5eHUHk5xC
1Uu7OB2MwUDdganl3vdaKS4Hyd0Vfz+zqTuUzXrruKmEy6E+YgmPzV01h571
85jzT3I5JHJvS+DepubgfvijzRYJbocDl9f+TJyo5rDk6rO3jUncDvM3dl+3
z1dzWPasVuzGMm6HX0v8gUjNwevbtm3bnnI7XAEpN1JzmMIy6ZysPI+D9plO
PlYJNYcGQf443mAeaHypOQAAqjW4dQ==
          "]], 0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{3.4567190452304146`, 13.}, {3.9999999984350723`, 12.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{3.9999999984350723`, 12.}, {3.5405528400753496`, 11.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{3.5405528400753496`, 11.}, {2.999999998196728, 10.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[BezierCurveBox[CompressedData["
1:eJxTTMoPSmViYGBQBWIQ3SDIH8cbzOPAAAZqDh+O7eIwqudxuGJc9vHXc1UH
998L7P6s53HQCWKbl3dW1aFh3cH/2U95HNijN7BGb1B1mPNAxqdRntchya9E
48AEVYe5Ezcp28TxOtiDNQDVH2xqm7OQ12HBF8/5XzyB5hX0lix6yevQtDz6
82ElVYdPcy+99TXjc3ju0s7E81PFocEr6NO8dj6Hs2dAQMUhMmJTIcNdPodD
JWnPOuerODxfOSP6rim/Q2hR3+NjRSoO2vasG0wn8Tu0HHU50uym4iAv8SOP
8xO/g39eZ8cBKRWH1FkWPmu0BBy25cQY1L5XdpjsZTFNME7AYeeBvbt3HlF2
mCNTPdVksoBDZNZarbJZyg71AoxeoqcEHKZmatduKlB2aA5qMJ38SNBhR3Z3
97blSg6lBld6XgoLORz+XBj0p1HJwVqO4UehvZCDoqD7mvBoJYeb0izlOqlC
DqcOc808Yazk4K35gFOyVcjhIPdeCX9uJYepblM2mM8XcuB4Gav9+qGiw5Zi
heyOzUIOc6PfXpizXdFhxYYWS+5DQg4NydmcKT2KDsV/D0gfOCXksJnhxhWH
BEUH4airgsvPCjkYg4Giw+XdEL7k7oq/n9kUHf6KXwPz6yKW8NjcVXCYnAfh
J3JvS+DepuAwcT+Ef/Dy2p+JExUcfnJdB/Pnbey+bp+v4HAmAML/tcQfiBQc
OCZC+FdAyo0UHDachvC1z3TysUooOBxguAHmQ9KPggMAedHz3Q==
          "]], 0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], 
         ArrowBox[{{2.999999998196728, 10.}, {3.700832632763195, 9.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], 
         ArrowBox[{{3.700832632763195, 9.}, {4.700832632836125, 8.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], 
         ArrowBox[{{4.700832632836125, 8.}, {6.000000000389491, 7.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{6.000000000389491, 7.}, {7.000000000248434, 6.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], 
         ArrowBox[{{7.000000000248434, 6.}, {7.000000000269409, 5.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], 
         ArrowBox[{{7.000000000269409, 5.}, {6.000000000301782, 4.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{6.000000000301782, 4.}, {4.999999999961801, 3.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[BezierCurveBox[CompressedData["
1:eJxTTMoPSmViYGCQAWIQ7aDPCiQlHBjAQMAhVAzCDz5/4+jr+fwO53+xgPkb
PSQrdpnyOyy/A+FL5BwUyznI53B/N4TfanlxIYMzn0PFDAj/zwaQBl6HkiII
v+6Seu0ldV6Hc54QPtu8vLP83TwOXXIQ/gxhWS6DJ9wOyz4wg/nGYMDtwFDQ
Nz/nj7iDyEUtVbkGLociH726TR/FHeoO1u75eonT4X/r49kX74s75LHo/Nyp
zemwTGbdj5PHxB0ezDS9ndXF4ZAi0Ddl9jJxh9uNs5I43rM72CU257vViztE
74nqnxTJ7mDA39d5KkDcIcGzLJHzFJuDtdS6R+rS4g7vNN7eyHFgc0hoelwV
d0/M4X/U/q979rA6vNy9KmBTjpiDmq3vwpSbLA5Tj7xm4mYWczh7/ByrGBuL
Q8qcZRMzFoo6fPjlrHzRidkhxPn2n1Puog5919b8nNrP5JC6s9PF6JuIw6oo
zs6UN4wOM/9tzJi3RsTBpT3yok0ko8M7oZBM/mwRh+iYuZfkrjE4pH3Ld2s1
FHF4f/NKD1cygwPDSlD8iEDji8EBAFSyoKw=
          "]], 0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], 
         ArrowBox[{{4.999999999961801, 3.}, {5.0000000003294645`, 2.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{5.0000000003294645`, 2.}, {3.9999999992983533`, 1.}}, 
          0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[BezierCurveBox[CompressedData["
1:eJxTTMoPSmViYGCQAWIQzbCSFUiIODBAgMOaSgh/+byN3dft/9vHu0L4SRON
PpRk/7MX44Hw9W406d5o+mt/8SwLmM9TvMiZse2P/YQuCP9XIkjDb/tQJyh/
iT8I2ct9ZYaot7k7S17sp/3bRRC+obqVSMKJ7/YHvCH8NDD4Zv9I5sDrQ3+F
HV583bw27c8X+7nO39dxfxd2+HqxhG3qtM/2n/ev8Lz1Wtih59eKgo8mn+wf
TbyyW++OsMOq/IA31dc/2GftrGLlPCHssCTp2qeMP+/su81mq2WuF3Zgqf+k
bxb0xt6d00zef5KwQ6XJ1/74DS/t5xh6v99VIOzA0HxP6KnYc/uu9bemrfES
dpiRtW7HsdYn9sbpP/NmSgk7PL8cZ3Kk6qG90Yol5Z1vhRz8YtY5qTjetW8u
urOh5rCQw6pPev8T3l231zi2QKp4jpDD4yz7eXZ/L9nLLf64JadCyOFj5377
qttn7LM4z9dnhgs53GVU4NhZf8Se86dFdaalkANztYN28bmd9r8L9ZfnyAk5
9H9mWPjefYW9Q8km5mI2IVh8MQAAd5m6uA==
          "]], 0.08031358885017421]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], 
         ArrowBox[{{3.9999999992983533`, 1.}, {4.506298120276426, 0.}}, 
          0.08031358885017421]}}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[71, 255], 0.2784313725490196], 
            NCache[
             Rational[182, 255], 0.7137254901960784], 
            NCache[
             Rational[109, 255], 0.42745098039215684`]], EdgeForm[None], 
           PolygonBox[{{-0.15686266535097626`, 14.947712500438563`}, {0., 
            14.843137334649024`}, {0.15686266535097626`, 
            14.947712500438563`}, {0.15686266535097626`, 
            15.156862665350976`}, {-0.15686266535097626`, 
            15.156862665350976`}, {-0.15686266535097626`, 
            14.947712500438563`}}]},
          TagBox[
           GridBox[{{"\"Axiom 1\""}, {
              RowBox[{
                SubscriptBox["\[ForAll]", 
                 RowBox[{"{", "p", "}"}]], 
                RowBox[{
                  RowBox[{"and", "[", 
                    RowBox[{"p", ",", "con"}], "]"}], "\[Equal]", "con"}]}]}},
             GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          Column[{"Axiom 1", 
            
            ForAll[{$CellContext`p}, $CellContext`and[$CellContext`p, \
$CellContext`con] == $CellContext`con]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[71, 255], 0.2784313725490196], 
            NCache[
             Rational[182, 255], 0.7137254901960784], 
            NCache[
             Rational[109, 255], 0.42745098039215684`]], EdgeForm[None], 
           PolygonBox[{{0.8431373331209021, 14.947712500438563`}, {
            0.9999999984718784, 14.843137334649024`}, {1.1568626638228547`, 
            14.947712500438563`}, {1.1568626638228547`, 
            15.156862665350976`}, {0.8431373331209021, 15.156862665350976`}, {
            0.8431373331209021, 14.947712500438563`}}]},
          TagBox[
           GridBox[{{"\"Axiom 2\""}, {
              RowBox[{
                SubscriptBox["\[ForAll]", 
                 RowBox[{"{", "p", "}"}]], 
                RowBox[{
                  RowBox[{"and", "[", 
                    RowBox[{"p", ",", "tau"}], "]"}], "\[Equal]", "p"}]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          Column[{"Axiom 2", 
            
            ForAll[{$CellContext`p}, $CellContext`and[$CellContext`p, \
$CellContext`tau] == $CellContext`p]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[71, 255], 0.2784313725490196], 
            NCache[
             Rational[182, 255], 0.7137254901960784], 
            NCache[
             Rational[109, 255], 0.42745098039215684`]], EdgeForm[None], 
           PolygonBox[{{1.8431373333774363`, 14.947712500438563`}, {
            1.9999999987284127`, 14.843137334649024`}, {2.156862664079389, 
            14.947712500438563`}, {2.156862664079389, 15.156862665350976`}, {
            1.8431373333774363`, 15.156862665350976`}, {1.8431373333774363`, 
            14.947712500438563`}}]},
          TagBox[
           GridBox[{{"\"Axiom 3\""}, {
              RowBox[{
                SubscriptBox["\[ForAll]", 
                 RowBox[{"{", "p", "}"}]], 
                RowBox[{
                  RowBox[{"and", "[", 
                    RowBox[{"p", ",", 
                    RowBox[{"not", "[", "p", "]"}]}], "]"}], "\[Equal]", 
                  "con"}]}]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
            DefaultBaseStyle -> "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          Column[{"Axiom 3", 
            ForAll[{$CellContext`p}, $CellContext`and[$CellContext`p, 
               $CellContext`not[$CellContext`p]] == $CellContext`con]}], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[71, 255], 0.2784313725490196], 
            NCache[
             Rational[182, 255], 0.7137254901960784], 
            NCache[
             Rational[109, 255], 0.42745098039215684`]], EdgeForm[None], 
           PolygonBox[{{2.8431373339602803`, 14.947712500438563`}, {
            2.9999999993112567`, 14.843137334649024`}, {3.156862664662233, 
            14.947712500438563`}, {3.156862664662233, 15.156862665350976`}, {
            2.8431373339602803`, 15.156862665350976`}, {2.8431373339602803`, 
            14.947712500438563`}}]},
          TagBox[
           GridBox[{{"\"Axiom 4\""}, {
              RowBox[{
                SubscriptBox["\[ForAll]", 
                 RowBox[{"{", "p", "}"}]], 
                RowBox[{
                  RowBox[{"not", "[", "p", "]"}], "\[Equal]", 
                  RowBox[{"!", "p"}]}]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          Column[{"Axiom 4", 
            
            ForAll[{$CellContext`p}, $CellContext`not[$CellContext`p] == 
             Not[$CellContext`p]]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[71, 255], 0.2784313725490196], 
            NCache[
             Rational[182, 255], 0.7137254901960784], 
            NCache[
             Rational[109, 255], 0.42745098039215684`]], EdgeForm[None], 
           PolygonBox[{{3.843137337728743, 14.947712500438563`}, {
            4.00000000307972, 14.843137334649024`}, {4.156862668430696, 
            14.947712500438563`}, {4.156862668430696, 15.156862665350976`}, {
            3.843137337728743, 15.156862665350976`}, {3.843137337728743, 
            14.947712500438563`}}]},
          TagBox[
           GridBox[{{"\"Axiom 5\""}, {
              RowBox[{
                SubscriptBox["\[ForAll]", 
                 RowBox[{"{", "p", "}"}]], 
                RowBox[{
                  RowBox[{"or", "[", 
                    RowBox[{"p", ",", 
                    RowBox[{"not", "[", "p", "]"}]}], "]"}], "\[Equal]", 
                  "tau"}]}]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
            DefaultBaseStyle -> "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          Column[{"Axiom 5", 
            ForAll[{$CellContext`p}, $CellContext`or[$CellContext`p, 
               $CellContext`not[$CellContext`p]] == $CellContext`tau]}], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[71, 255], 0.2784313725490196], 
            NCache[
             Rational[182, 255], 0.7137254901960784], 
            NCache[
             Rational[109, 255], 0.42745098039215684`]], EdgeForm[None], 
           PolygonBox[{{4.8431373334951875`, 14.947712500438563`}, {
            4.999999998846164, 14.843137334649024`}, {5.15686266419714, 
            14.947712500438563`}, {5.15686266419714, 15.156862665350976`}, {
            4.8431373334951875`, 15.156862665350976`}, {4.8431373334951875`, 
            14.947712500438563`}}]},
          TagBox[
           GridBox[{{"\"Axiom 6\""}, {
              RowBox[{
                SubscriptBox["\[ForAll]", 
                 RowBox[{"{", 
                   RowBox[{"p", ",", "q"}], "}"}]], 
                RowBox[{
                  RowBox[{"and", "[", 
                    RowBox[{"p", ",", "q"}], "]"}], "\[Equal]", 
                  RowBox[{"and", "[", 
                    RowBox[{"q", ",", "p"}], "]"}]}]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          Column[{"Axiom 6", 
            
            ForAll[{$CellContext`p, $CellContext`q}, \
$CellContext`and[$CellContext`p, $CellContext`q] == \
$CellContext`and[$CellContext`q, $CellContext`p]]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[71, 255], 0.2784313725490196], 
            NCache[
             Rational[182, 255], 0.7137254901960784], 
            NCache[
             Rational[109, 255], 0.42745098039215684`]], EdgeForm[None], 
           PolygonBox[{{5.843137342928268, 14.947712500438563`}, {
            6.000000008279244, 14.843137334649024`}, {6.15686267363022, 
            14.947712500438563`}, {6.15686267363022, 15.156862665350976`}, {
            5.843137342928268, 15.156862665350976`}, {5.843137342928268, 
            14.947712500438563`}}]},
          TagBox[
           GridBox[{{"\"Axiom 7\""}, {
              RowBox[{
                SubscriptBox["\[ForAll]", 
                 RowBox[{"{", 
                   RowBox[{"p", ",", "q"}], "}"}]], 
                RowBox[{
                  RowBox[{"or", "[", 
                    RowBox[{"p", ",", "q"}], "]"}], "\[Equal]", 
                  RowBox[{"or", "[", 
                    RowBox[{"q", ",", "p"}], "]"}]}]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          Column[{"Axiom 7", 
            
            ForAll[{$CellContext`p, $CellContext`q}, \
$CellContext`or[$CellContext`p, $CellContext`q] == \
$CellContext`or[$CellContext`q, $CellContext`p]]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[71, 255], 0.2784313725490196], 
            NCache[
             Rational[182, 255], 0.7137254901960784], 
            NCache[
             Rational[109, 255], 0.42745098039215684`]], EdgeForm[None], 
           PolygonBox[{{6.843137334540737, 14.947712500438563`}, {
            6.999999999891713, 14.843137334649024`}, {7.15686266524269, 
            14.947712500438563`}, {7.15686266524269, 15.156862665350976`}, {
            6.843137334540737, 15.156862665350976`}, {6.843137334540737, 
            14.947712500438563`}}]},
          TagBox[
           GridBox[{{"\"Axiom 8\""}, {
              RowBox[{
                SubscriptBox["\[ForAll]", 
                 RowBox[{"{", 
                   RowBox[{"p", ",", "q", ",", "r"}], "}"}]], 
                RowBox[{
                  RowBox[{"and", "[", 
                    RowBox[{"p", ",", 
                    RowBox[{"or", "[", 
                    RowBox[{"q", ",", "r"}], "]"}]}], "]"}], "\[Equal]", 
                  RowBox[{"or", "[", 
                    RowBox[{
                    RowBox[{"and", "[", 
                    RowBox[{"p", ",", "q"}], "]"}], ",", 
                    RowBox[{"and", "[", 
                    RowBox[{"q", ",", "r"}], "]"}]}], "]"}]}]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          Column[{"Axiom 8", 
            
            ForAll[{$CellContext`p, $CellContext`q, $CellContext`r}, \
$CellContext`and[$CellContext`p, 
               $CellContext`or[$CellContext`q, $CellContext`r]] == \
$CellContext`or[
               $CellContext`and[$CellContext`p, $CellContext`q], 
               $CellContext`and[$CellContext`q, $CellContext`r]]]}], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[71, 255], 0.2784313725490196], 
            NCache[
             Rational[182, 255], 0.7137254901960784], 
            NCache[
             Rational[109, 255], 0.42745098039215684`]], EdgeForm[None], 
           PolygonBox[{{7.84313733505318, 14.947712500438563`}, {
            8.000000000404157, 14.843137334649024`}, {8.156862665755133, 
            14.947712500438563`}, {8.156862665755133, 15.156862665350976`}, {
            7.84313733505318, 15.156862665350976`}, {7.84313733505318, 
            14.947712500438563`}}]},
          TagBox[
           GridBox[{{"\"Axiom 9\""}, {
              RowBox[{
                SubscriptBox["\[ForAll]", 
                 RowBox[{"{", 
                   RowBox[{"p", ",", "q", ",", "r"}], "}"}]], 
                RowBox[{
                  RowBox[{"and", "[", 
                    RowBox[{
                    RowBox[{"and", "[", 
                    RowBox[{"p", ",", "q"}], "]"}], ",", "r"}], "]"}], 
                  "\[Equal]", 
                  RowBox[{"and", "[", 
                    RowBox[{"p", ",", 
                    RowBox[{"and", "[", 
                    RowBox[{"q", ",", "r"}], "]"}]}], "]"}]}]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          Column[{"Axiom 9", 
            
            ForAll[{$CellContext`p, $CellContext`q, $CellContext`r}, \
$CellContext`and[
               $CellContext`and[$CellContext`p, $CellContext`q], \
$CellContext`r] == $CellContext`and[$CellContext`p, 
               $CellContext`and[$CellContext`q, $CellContext`r]]]}], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[71, 255], 0.2784313725490196], 
            NCache[
             Rational[182, 255], 0.7137254901960784], 
            NCache[
             Rational[109, 255], 0.42745098039215684`]], EdgeForm[None], 
           PolygonBox[{{8.843137338863963, 14.947712500438563`}, {
            9.00000000421494, 14.843137334649024`}, {9.156862669565916, 
            14.947712500438563`}, {9.156862669565916, 15.156862665350976`}, {
            8.843137338863963, 15.156862665350976`}, {8.843137338863963, 
            14.947712500438563`}}]},
          TagBox[
           GridBox[{{"\"Axiom 10\""}, {
              RowBox[{
                SubscriptBox["\[ForAll]", 
                 RowBox[{"{", 
                   RowBox[{"p", ",", "q", ",", "r"}], "}"}]], 
                RowBox[{
                  RowBox[{"or", "[", 
                    RowBox[{"p", ",", 
                    RowBox[{"and", "[", 
                    RowBox[{"q", ",", "r"}], "]"}]}], "]"}], "\[Equal]", 
                  RowBox[{"and", "[", 
                    RowBox[{
                    RowBox[{"or", "[", 
                    RowBox[{"p", ",", "q"}], "]"}], ",", 
                    RowBox[{"or", "[", 
                    RowBox[{"p", ",", "r"}], "]"}]}], "]"}]}]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          Column[{"Axiom 10", 
            
            ForAll[{$CellContext`p, $CellContext`q, $CellContext`r}, \
$CellContext`or[$CellContext`p, 
               $CellContext`and[$CellContext`q, $CellContext`r]] == \
$CellContext`and[
               $CellContext`or[$CellContext`p, $CellContext`q], 
               $CellContext`or[$CellContext`p, $CellContext`r]]]}], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[71, 255], 0.2784313725490196], 
            NCache[
             Rational[182, 255], 0.7137254901960784], 
            NCache[
             Rational[109, 255], 0.42745098039215684`]], EdgeForm[None], 
           PolygonBox[{{9.843137337915673, 14.947712500438563`}, {
            10.00000000326665, 14.843137334649024`}, {10.156862668617626`, 
            14.947712500438563`}, {10.156862668617626`, 
            15.156862665350976`}, {9.843137337915673, 15.156862665350976`}, {
            9.843137337915673, 14.947712500438563`}}]},
          TagBox[
           GridBox[{{"\"Axiom 11\""}, {
              RowBox[{
                SubscriptBox["\[ForAll]", 
                 RowBox[{"{", 
                   RowBox[{"p", ",", "q", ",", "r"}], "}"}]], 
                RowBox[{
                  RowBox[{"or", "[", 
                    RowBox[{
                    RowBox[{"or", "[", 
                    RowBox[{"p", ",", "q"}], "]"}], ",", "r"}], "]"}], 
                  "\[Equal]", 
                  RowBox[{"or", "[", 
                    RowBox[{"p", ",", 
                    RowBox[{"or", "[", 
                    RowBox[{"q", ",", "r"}], "]"}]}], "]"}]}]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          Column[{"Axiom 11", 
            
            ForAll[{$CellContext`p, $CellContext`q, $CellContext`r}, \
$CellContext`or[
               $CellContext`or[$CellContext`p, $CellContext`q], \
$CellContext`r] == $CellContext`or[$CellContext`p, 
               $CellContext`or[$CellContext`q, $CellContext`r]]]}], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[146, 255], 0.5725490196078431], 
            NCache[
             Rational[10, 17], 0.5882352941176471], 0], EdgeForm[None], 
           PolygonBox[{{3.999999999263565, 2.8137250015623874`}, {
            4.186274997701178, 3.}, {3.999999999263565, 
            3.1862749984376126`}, {3.8137250008259524`, 3.}, {
            3.999999999263565, 2.8137250015623874`}}]},
          TagBox[
           GridBox[{{"\"Hypothesis 1\""}, {
              RowBox[{
                RowBox[{"not", "[", 
                  RowBox[{"and", "[", 
                    RowBox[{"p", ",", "q"}], "]"}], "]"}], "\[Equal]", 
                RowBox[{"or", "[", 
                  RowBox[{
                    RowBox[{"not", "[", "p", "]"}], ",", 
                    RowBox[{"not", "[", "q", "]"}]}], "]"}]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          Column[{"Hypothesis 1", $CellContext`not[
              $CellContext`and[$CellContext`p, $CellContext`q]] == \
$CellContext`or[
              $CellContext`not[$CellContext`p], 
              $CellContext`not[$CellContext`q]]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[1, 
            NCache[
             Rational[2, 5], 0.4], 1], EdgeForm[None], 
           PolygonBox[{{7.770844261613662, 13.923614833954645`}, {
            8.000000003227825, 13.770844258385837`}, {8.229155744841988, 
            13.923614833954645`}, {8.229155744841988, 14.229155741614163`}, {
            7.770844261613662, 14.229155741614163`}, {7.770844261613662, 
            13.923614833954645`}}]},
          TagBox[
           GridBox[{{"\"Equationalized Axiom 1\""}, {
              RowBox[{"x1", "\[Equal]", 
                RowBox[{"and", "[", 
                  RowBox[{"x1", ",", "tau"}], "]"}]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          
          Column[{"Equationalized Axiom 1", $CellContext`x1 == \
$CellContext`and[$CellContext`x1, $CellContext`tau]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[1, 
            NCache[
             Rational[2, 5], 0.4], 1], EdgeForm[None], 
           PolygonBox[{{6.8012367153724735`, 13.93374564258544}, {
            6.999999998802252, 13.801236716570221`}, {7.198763282232031, 
            13.93374564258544}, {7.198763282232031, 14.198763283429779`}, {
            6.8012367153724735`, 14.198763283429779`}, {6.8012367153724735`, 
            13.93374564258544}}]},
          TagBox[
           GridBox[{{"\"Equationalized Axiom 2\""}, {
              RowBox[{
                RowBox[{"and", "[", 
                  RowBox[{"x1", ",", "x2"}], "]"}], "\[Equal]", 
                RowBox[{"and", "[", 
                  RowBox[{"x2", ",", "x1"}], "]"}]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          
          Column[{"Equationalized Axiom 2", $CellContext`and[$CellContext`x1, \
$CellContext`x2] == $CellContext`and[$CellContext`x2, $CellContext`x1]}], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[1, 
            NCache[
             Rational[2, 5], 0.4], 1], EdgeForm[None], 
           PolygonBox[{{8.853169097118009, 13.9510564159486}, {
            9.000000005280128, 13.85316909183788}, {9.146830913442248, 
            13.9510564159486}, {9.146830913442248, 14.14683090816212}, {
            8.853169097118009, 14.14683090816212}, {8.853169097118009, 
            13.9510564159486}}]},
          TagBox[
           GridBox[{{"\"Equationalized Axiom 3\""}, {
              RowBox[{
                RowBox[{"and", "[", 
                  RowBox[{"x1", ",", 
                    RowBox[{"or", "[", 
                    RowBox[{"x2", ",", "x3"}], "]"}]}], "]"}], "\[Equal]", 
                RowBox[{"or", "[", 
                  RowBox[{
                    RowBox[{"and", "[", 
                    RowBox[{"x1", ",", "x2"}], "]"}], ",", 
                    RowBox[{"and", "[", 
                    RowBox[{"x2", ",", "x3"}], "]"}]}], "]"}]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          Column[{"Equationalized Axiom 3", $CellContext`and[$CellContext`x1, 
              $CellContext`or[$CellContext`x2, $CellContext`x3]] == \
$CellContext`or[
              $CellContext`and[$CellContext`x1, $CellContext`x2], 
              $CellContext`and[$CellContext`x2, $CellContext`x3]]}], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[1, 
            NCache[
             Rational[2, 5], 0.4], 1], EdgeForm[None], 
           PolygonBox[{{5.851779148967361, 13.950593102177008`}, {
            5.999999999921073, 13.851779149046289`}, {6.148220850874785, 
            13.950593102177008`}, {6.148220850874785, 14.148220850953711`}, {
            5.851779148967361, 14.148220850953711`}, {5.851779148967361, 
            13.950593102177008`}}]},
          TagBox[
           GridBox[{{"\"Equationalized Axiom 4\""}, {
              RowBox[{
                RowBox[{"and", "[", 
                  RowBox[{"x1", ",", "con"}], "]"}], "\[Equal]", "con"}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          
          Column[{"Equationalized Axiom 4", $CellContext`and[$CellContext`x1, \
$CellContext`con] == $CellContext`con}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[1, 
            NCache[
             Rational[2, 5], 0.4], 1], EdgeForm[None], 
           PolygonBox[{{2.8644344547866325`, 13.954811534202882`}, {
            2.999999996216445, 13.864434458570187`}, {3.135565537646258, 
            13.954811534202882`}, {3.135565537646258, 14.135565541429813`}, {
            2.8644344547866325`, 14.135565541429813`}, {2.8644344547866325`, 
            13.954811534202882`}}]},
          TagBox[
           GridBox[{{"\"Equationalized Axiom 5\""}, {
              RowBox[{
                RowBox[{"and", "[", 
                  RowBox[{"x1", ",", 
                    RowBox[{"not", "[", "x1", "]"}]}], "]"}], "\[Equal]", 
                "con"}]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
            DefaultBaseStyle -> "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          Column[{"Equationalized Axiom 5", $CellContext`and[$CellContext`x1, 
              $CellContext`not[$CellContext`x1]] == $CellContext`con}], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[1, 
            NCache[
             Rational[2, 5], 0.4], 1], EdgeForm[None], 
           PolygonBox[{{1.8331332513636118`, 13.944377810452943`}, {
            1.9999999973007903`, 13.833133254062822`}, {2.1668667432379687`, 
            13.944377810452943`}, {2.1668667432379687`, 
            14.166866745937178`}, {1.8331332513636118`, 
            14.166866745937178`}, {1.8331332513636118`, 
            13.944377810452943`}}]},
          TagBox[
           GridBox[{{"\"Equationalized Axiom 6\""}, {
              RowBox[{
                RowBox[{"and", "[", 
                  RowBox[{
                    RowBox[{"or", "[", 
                    RowBox[{"x1", ",", "x2"}], "]"}], ",", 
                    RowBox[{"or", "[", 
                    RowBox[{"x1", ",", "x3"}], "]"}]}], "]"}], "\[Equal]", 
                RowBox[{"or", "[", 
                  RowBox[{"x1", ",", 
                    RowBox[{"and", "[", 
                    RowBox[{"x2", ",", "x3"}], "]"}]}], "]"}]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          Column[{"Equationalized Axiom 6", $CellContext`and[
              $CellContext`or[$CellContext`x1, $CellContext`x2], 
              $CellContext`or[$CellContext`x1, $CellContext`x3]] == \
$CellContext`or[$CellContext`x1, 
              $CellContext`and[$CellContext`x2, $CellContext`x3]]}], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[1, 
            NCache[
             Rational[2, 5], 0.4], 1], EdgeForm[None], 
           PolygonBox[{{0.7690832483406387, 13.923027831721773`}, {
            0.999999998524487, 13.769083249816152`}, {1.2309167487083352`, 
            13.923027831721773`}, {1.2309167487083352`, 
            14.230916750183848`}, {0.7690832483406387, 14.230916750183848`}, {
            0.7690832483406387, 13.923027831721773`}}]},
          TagBox[
           GridBox[{{"\"Equationalized Axiom 7\""}, {
              RowBox[{
                RowBox[{"or", "[", 
                  RowBox[{"x1", ",", "x2"}], "]"}], "\[Equal]", 
                RowBox[{"or", "[", 
                  RowBox[{"x2", ",", "x1"}], "]"}]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          
          Column[{"Equationalized Axiom 7", $CellContext`or[$CellContext`x1, \
$CellContext`x2] == $CellContext`or[$CellContext`x2, $CellContext`x1]}], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[1, 
            NCache[
             Rational[2, 5], 0.4], 1], EdgeForm[None], 
           PolygonBox[{{4.845143511555868, 13.948381224503493`}, {
            5.000000002580492, 13.845143508975376`}, {5.154856493605116, 
            13.948381224503493`}, {5.154856493605116, 14.154856491024624`}, {
            4.845143511555868, 14.154856491024624`}, {4.845143511555868, 
            13.948381224503493`}}]},
          TagBox[
           GridBox[{{"\"Equationalized Axiom 8\""}, {
              RowBox[{
                RowBox[{"or", "[", 
                  RowBox[{"x1", ",", 
                    RowBox[{"not", "[", "x1", "]"}]}], "]"}], "\[Equal]", 
                "tau"}]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
            DefaultBaseStyle -> "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          Column[{"Equationalized Axiom 8", $CellContext`or[$CellContext`x1, 
              $CellContext`not[$CellContext`x1]] == $CellContext`tau}], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[1, 
            NCache[
             Rational[2, 5], 0.4], 1], EdgeForm[None], 
           PolygonBox[{{3.8198354420220415`, 13.939945212352386`}, {
            3.9999999963898176`, 13.819835445632224`}, {4.180164550757594, 
            13.939945212352386`}, {4.180164550757594, 14.180164554367776`}, {
            3.8198354420220415`, 14.180164554367776`}, {3.8198354420220415`, 
            13.939945212352386`}}]},
          TagBox[
           GridBox[{{"\"Equationalized Axiom 9\""}, {
              RowBox[{
                RowBox[{"not", "[", "x1", "]"}], "\[Equal]", 
                RowBox[{"!", "x1"}]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          
          Column[{"Equationalized Axiom 9", $CellContext`not[$CellContext`x1] == 
            Not[$CellContext`x1]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[178, 255], 0.6980392156862745], 
            NCache[
             Rational[2, 5], 0.4], 1], EdgeForm[None], 
           PolygonBox[{{3.9999999993422932`, 1.882912858124929}, {
            4.117087141217364, 2.}, {3.9999999993422932`, 
            2.117087141875071}, {3.8829128574672223`, 2.}, {
            3.9999999993422932`, 1.882912858124929}}]},
          TagBox[
           GridBox[{{"\"Equationalized Hypothesis 1\""}, {
              RowBox[{
                RowBox[{"or", "[", 
                  RowBox[{
                    RowBox[{"not", "[", "p", "]"}], ",", 
                    RowBox[{"not", "[", "q", "]"}]}], "]"}], "\[Equal]", 
                RowBox[{"not", "[", 
                  RowBox[{"and", "[", 
                    RowBox[{"p", ",", "q"}], "]"}], "]"}]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          Column[{"Equationalized Hypothesis 1", $CellContext`or[
              $CellContext`not[$CellContext`p], 
              $CellContext`not[$CellContext`q]] == $CellContext`not[
              $CellContext`and[$CellContext`p, $CellContext`q]]}], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[47, 51], 0.9215686274509803], 
            NCache[
             Rational[98, 255], 0.3843137254901961], 
            NCache[
             Rational[53, 255], 0.20784313725490197`]], EdgeForm[None], 
           PolygonBox[{{6.999999998878593, 13.273976761449925`}, {
            6.727304186754176, 12.80165512254463}, {7.27269581100301, 
            12.80165512254463}, {6.999999998878593, 13.273976761449925`}}]},
          TagBox[
           GridBox[{{"\"Critical Pair Lemma 1\""}, {
              RowBox[{
                RowBox[{"and", "[", 
                  RowBox[{"tau", ",", "x1"}], "]"}], "\[Equal]", "x1"}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          
          Column[{"Critical Pair Lemma 1", $CellContext`and[$CellContext`tau, \
$CellContext`x1] == $CellContext`x1}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[47, 51], 0.9215686274509803], 
            NCache[
             Rational[98, 255], 0.3843137254901961], 
            NCache[
             Rational[53, 255], 0.20784313725490197`]], EdgeForm[None], 
           PolygonBox[{{9.000000006164868, 13.206708007484018`}, {
            8.79425844007304, 12.850354189908348`}, {9.205741572256695, 
            12.850354189908348`}, {9.000000006164868, 13.206708007484018`}}]},
          TagBox[
           GridBox[{{"\"Critical Pair Lemma 2\""}, {
              RowBox[{
                RowBox[{"and", "[", 
                  RowBox[{"x1", ",", 
                    RowBox[{"or", "[", 
                    RowBox[{"tau", ",", "x2"}], "]"}]}], "]"}], "\[Equal]", 
                RowBox[{"or", "[", 
                  RowBox[{"x1", ",", 
                    RowBox[{"and", "[", 
                    RowBox[{"tau", ",", "x2"}], "]"}]}], "]"}]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          Column[{"Critical Pair Lemma 2", $CellContext`and[$CellContext`x1, 
              $CellContext`or[$CellContext`tau, $CellContext`x2]] == \
$CellContext`or[$CellContext`x1, 
              $CellContext`and[$CellContext`tau, $CellContext`x2]]}], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[47, 51], 0.9215686274509803], 
            NCache[
             Rational[98, 255], 0.3843137254901961], 
            NCache[
             Rational[53, 255], 0.20784313725490197`]], EdgeForm[None], 
           PolygonBox[{{5.999999999390496, 13.222218821711248`}, {
            5.778820138240281, 12.839125169859889`}, {6.221179860540712, 
            12.839125169859889`}, {5.999999999390496, 13.222218821711248`}}]},
          TagBox[
           GridBox[{{"\"Critical Pair Lemma 3\""}, {
              RowBox[{"con", "\[Equal]", 
                RowBox[{"and", "[", 
                  RowBox[{"con", ",", "x1"}], "]"}]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          
          Column[{"Critical Pair Lemma 3", $CellContext`con == \
$CellContext`and[$CellContext`con, $CellContext`x1]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[15, 17], 0.8823529411764706], 
            NCache[
             Rational[52, 85], 0.611764705882353], 
            NCache[
             Rational[12, 85], 0.1411764705882353]], EdgeForm[None], 
           DiskBox[{4.456719044866276, 13.}, 0.235751167707751]},
          TagBox[
           GridBox[{{"\"Substitution Lemma 1\""}, {
              RowBox[{
                RowBox[{"or", "[", 
                  RowBox[{"x1", ",", 
                    RowBox[{"!", "x1"}]}], "]"}], "\[Equal]", "tau"}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          Column[{"Substitution Lemma 1", $CellContext`or[$CellContext`x1, 
              Not[$CellContext`x1]] == $CellContext`tau}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[15, 17], 0.8823529411764706], 
            NCache[
             Rational[52, 85], 0.611764705882353], 
            NCache[
             Rational[12, 85], 0.1411764705882353]], EdgeForm[None], 
           DiskBox[{3.4567190452304146, 13.}, 0.18561900793641767]},
          TagBox[
           GridBox[{{"\"Substitution Lemma 2\""}, {
              RowBox[{
                RowBox[{"and", "[", 
                  RowBox[{"x1", ",", 
                    RowBox[{"!", "x1"}]}], "]"}], "\[Equal]", "con"}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          Column[{"Substitution Lemma 2", $CellContext`and[$CellContext`x1, 
              Not[$CellContext`x1]] == $CellContext`con}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[47, 51], 0.9215686274509803], 
            NCache[
             Rational[98, 255], 0.3843137254901961], 
            NCache[
             Rational[53, 255], 0.20784313725490197`]], EdgeForm[None], 
           PolygonBox[{{3.9999999984350723`, 12.251234676254898`}, {
            3.749939943295446, 11.818119205400475`}, {4.250060053574698, 
            11.818119205400475`}, {3.9999999984350723`, 
            12.251234676254898`}}]},
          TagBox[
           GridBox[{{"\"Critical Pair Lemma 4\""}, {
              RowBox[{"con", "\[Equal]", 
                RowBox[{"!", "tau"}]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          
          Column[{"Critical Pair Lemma 4", $CellContext`con == 
            Not[$CellContext`tau]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[47, 51], 0.9215686274509803], 
            NCache[
             Rational[98, 255], 0.3843137254901961], 
            NCache[
             Rational[53, 255], 0.20784313725490197`]], EdgeForm[None], 
           PolygonBox[{{3.5405528400753496`, 11.340973711376092`}, {
            3.201173315167086, 10.753152827121236`}, {3.8799323649836133`, 
            10.753152827121236`}, {3.5405528400753496`, 
            11.340973711376092`}}]},
          TagBox[
           GridBox[{{"\"Critical Pair Lemma 5\""}, {
              RowBox[{"tau", "\[Equal]", 
                RowBox[{"or", "[", 
                  RowBox[{"tau", ",", "con"}], "]"}]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          
          Column[{"Critical Pair Lemma 5", $CellContext`tau == \
$CellContext`or[$CellContext`tau, $CellContext`con]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[47, 51], 0.9215686274509803], 
            NCache[
             Rational[98, 255], 0.3843137254901961], 
            NCache[
             Rational[53, 255], 0.20784313725490197`]], EdgeForm[None], 
           PolygonBox[{{2.999999998196728, 10.225696191125598`}, {
            2.775359025704499, 9.836607735874956}, {3.2246409706889567`, 
            9.836607735874956}, {2.999999998196728, 10.225696191125598`}}]},
          TagBox[
           GridBox[{{"\"Critical Pair Lemma 6\""}, {
              RowBox[{
                RowBox[{"or", "[", 
                  RowBox[{"tau", ",", 
                    RowBox[{"and", "[", 
                    RowBox[{"con", ",", "x1"}], "]"}]}], "]"}], "\[Equal]", 
                RowBox[{"and", "[", 
                  RowBox[{"tau", ",", 
                    RowBox[{"or", "[", 
                    RowBox[{"tau", ",", "x1"}], "]"}]}], "]"}]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          Column[{"Critical Pair Lemma 6", $CellContext`or[$CellContext`tau, 
              $CellContext`and[$CellContext`con, $CellContext`x1]] == \
$CellContext`and[$CellContext`tau, 
              $CellContext`or[$CellContext`tau, $CellContext`x1]]}], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[15, 17], 0.8823529411764706], 
            NCache[
             Rational[52, 85], 0.611764705882353], 
            NCache[
             Rational[12, 85], 0.1411764705882353]], EdgeForm[None], 
           DiskBox[{3.700832632763195, 9.}, 0.24453512221453513]},
          TagBox[
           GridBox[{{"\"Substitution Lemma 3\""}, {
              RowBox[{
                RowBox[{"or", "[", 
                  RowBox[{"tau", ",", "con"}], "]"}], "\[Equal]", 
                RowBox[{"and", "[", 
                  RowBox[{"tau", ",", 
                    RowBox[{"or", "[", 
                    RowBox[{"tau", ",", "x1"}], "]"}]}], "]"}]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          
          Column[{"Substitution Lemma 3", $CellContext`or[$CellContext`tau, \
$CellContext`con] == $CellContext`and[$CellContext`tau, 
              $CellContext`or[$CellContext`tau, $CellContext`x1]]}], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[15, 17], 0.8823529411764706], 
            NCache[
             Rational[52, 85], 0.611764705882353], 
            NCache[
             Rational[12, 85], 0.1411764705882353]], EdgeForm[None], 
           DiskBox[{4.700832632836125, 8.}, 0.3305982155233072]},
          TagBox[
           GridBox[{{"\"Substitution Lemma 4\""}, {
              RowBox[{"tau", "\[Equal]", 
                RowBox[{"and", "[", 
                  RowBox[{"tau", ",", 
                    RowBox[{"or", "[", 
                    RowBox[{"tau", ",", "x1"}], "]"}]}], "]"}]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          
          Column[{"Substitution Lemma 4", $CellContext`tau == \
$CellContext`and[$CellContext`tau, 
              $CellContext`or[$CellContext`tau, $CellContext`x1]]}], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[15, 17], 0.8823529411764706], 
            NCache[
             Rational[52, 85], 0.611764705882353], 
            NCache[
             Rational[12, 85], 0.1411764705882353]], EdgeForm[None], 
           DiskBox[{6.000000000389491, 7.}, 0.32921997346894727]},
          TagBox[
           GridBox[{{"\"Substitution Lemma 5\""}, {
              RowBox[{"tau", "\[Equal]", 
                RowBox[{"or", "[", 
                  RowBox[{"tau", ",", "x1"}], "]"}]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          
          Column[{"Substitution Lemma 5", $CellContext`tau == \
$CellContext`or[$CellContext`tau, $CellContext`x1]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[15, 17], 0.8823529411764706], 
            NCache[
             Rational[52, 85], 0.611764705882353], 
            NCache[
             Rational[12, 85], 0.1411764705882353]], EdgeForm[None], 
           DiskBox[{7.000000000248434, 6.}, 0.3333333305374898]},
          TagBox[
           GridBox[{{"\"Substitution Lemma 6\""}, {
              RowBox[{
                RowBox[{"and", "[", 
                  RowBox[{"x1", ",", "tau"}], "]"}], "\[Equal]", 
                RowBox[{"or", "[", 
                  RowBox[{"x1", ",", 
                    RowBox[{"and", "[", 
                    RowBox[{"tau", ",", "x2"}], "]"}]}], "]"}]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          
          Column[{"Substitution Lemma 6", $CellContext`and[$CellContext`x1, \
$CellContext`tau] == $CellContext`or[$CellContext`x1, 
              $CellContext`and[$CellContext`tau, $CellContext`x2]]}], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[15, 17], 0.8823529411764706], 
            NCache[
             Rational[52, 85], 0.611764705882353], 
            NCache[
             Rational[12, 85], 0.1411764705882353]], EdgeForm[None], 
           DiskBox[{7.000000000269409, 5.}, 0.3238683033220094]},
          TagBox[
           GridBox[{{"\"Substitution Lemma 7\""}, {
              RowBox[{"x1", "\[Equal]", 
                RowBox[{"or", "[", 
                  RowBox[{"x1", ",", 
                    RowBox[{"and", "[", 
                    RowBox[{"tau", ",", "x2"}], "]"}]}], "]"}]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          
          Column[{"Substitution Lemma 7", $CellContext`x1 == \
$CellContext`or[$CellContext`x1, 
              $CellContext`and[$CellContext`tau, $CellContext`x2]]}], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[15, 17], 0.8823529411764706], 
            NCache[
             Rational[52, 85], 0.611764705882353], 
            NCache[
             Rational[12, 85], 0.1411764705882353]], EdgeForm[None], 
           DiskBox[{6.000000000301782, 4.}, 0.3135520239760865]},
          TagBox[
           GridBox[{{"\"Substitution Lemma 8\""}, {
              RowBox[{"x1", "\[Equal]", 
                RowBox[{"or", "[", 
                  RowBox[{"x1", ",", "x2"}], "]"}]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          
          Column[{"Substitution Lemma 8", $CellContext`x1 == \
$CellContext`or[$CellContext`x1, $CellContext`x2]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[15, 17], 0.8823529411764706], 
            NCache[
             Rational[52, 85], 0.611764705882353], 
            NCache[
             Rational[12, 85], 0.1411764705882353]], EdgeForm[None], 
           DiskBox[{4.999999999961801, 3.}, 0.22829107188022207]},
          TagBox[
           GridBox[{{"\"Substitution Lemma 9\""}, {
              RowBox[{"x1", "\[Equal]", 
                RowBox[{"or", "[", 
                  RowBox[{"x2", ",", "x1"}], "]"}]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          
          Column[{"Substitution Lemma 9", $CellContext`x1 == \
$CellContext`or[$CellContext`x2, $CellContext`x1]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[15, 17], 0.8823529411764706], 
            NCache[
             Rational[52, 85], 0.611764705882353], 
            NCache[
             Rational[12, 85], 0.1411764705882353]], EdgeForm[None], 
           DiskBox[{5.0000000003294645, 2.}, 0.2920411321447671]},
          TagBox[
           GridBox[{{"\"Substitution Lemma 10\""}, {
              RowBox[{"x1", "\[Equal]", "x2"}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          
          Column[{"Substitution Lemma 10", $CellContext`x1 == \
$CellContext`x2}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[15, 17], 0.8823529411764706], 
            NCache[
             Rational[52, 85], 0.611764705882353], 
            NCache[
             Rational[12, 85], 0.1411764705882353]], EdgeForm[None], 
           DiskBox[{3.9999999992983533, 1.}, 0.10476190388321109]},
          TagBox[
           GridBox[{{"\"Substitution Lemma 11\""}, {
              RowBox[{"q", "\[Equal]", 
                RowBox[{"not", "[", 
                  RowBox[{"and", "[", 
                    RowBox[{"p", ",", "q"}], "]"}], "]"}]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          Column[{"Substitution Lemma 11", $CellContext`q == $CellContext`not[
              $CellContext`and[$CellContext`p, $CellContext`q]]}], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[13, 15], 0.8666666666666667], 
            NCache[
             Rational[1, 15], 0.06666666666666667], 0], EdgeForm[None], 
           RectangleBox[{4.359239288176553, -0.1470588320998729}, \
{4.653356952376299, 0.1470588320998729}]},
          TagBox[
           
           GridBox[{{"\"Conclusion 1\""}, {"True"}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          Column[{"Conclusion 1", True}], "Tooltip"]& ]}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{
  3.8799619362713056`*^9, {3.8799621013985906`*^9, 3.879962119534481*^9}},
 CellLabel->"Out[74]=",ExpressionUUID->"0bd7ee4c-5e20-4619-9436-0803faecadd6"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"proofBoolean", "[", "]"}]], "Input",
 CellChangeTimes->{{3.879961891757298*^9, 
  3.8799618984593844`*^9}},ExpressionUUID->"24838556-7a7e-4114-87d2-\
e39ca6fe152b"],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
  "Prove", " ", "that", " ", "the", " ", "set", " ", "of", " ", "points", " ",
    "of", " ", "discontinuity", " ", "of", " ", "a", " ", "monotonic", " ", 
   "function", " ", "is", " ", "finite", " ", "or", " ", "denumerable"}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  "*)"}]], "Input",
 CellChangeTimes->{{3.87996393976571*^9, 
  3.879963978558714*^9}},ExpressionUUID->"36ef55da-ccba-4cfa-aca3-\
e872977c5d65"]
},
WindowSize->{557, 606},
WindowMargins->{{Automatic, 86}, {Automatic, 55}},
TaggingRules->Association["TryRealOnly" -> False],
FrontEndVersion->"12.3 for Microsoft Windows (64-bit) (July 9, 2021)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"69e61293-a478-49f1-bbaa-e379ffbfaeb7"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 260, 4, 50, "Input",ExpressionUUID->"86292cdd-96fb-442f-b31e-612439db25bb"],
Cell[CellGroupData[{
Cell[843, 28, 2365, 69, 230, "Input",ExpressionUUID->"12b053ed-1618-4367-ba48-2a9fb7039008"],
Cell[3211, 99, 358, 9, 35, "Output",ExpressionUUID->"c7af72a4-a126-4b71-96a5-93d5c67191a7"],
Cell[3572, 110, 198, 3, 33, "Output",ExpressionUUID->"04256927-37c8-41cc-ace9-c5e3b85ccb06"],
Cell[3773, 115, 578, 16, 36, "Output",ExpressionUUID->"63a0d4dc-5db3-458c-aa0b-e5dd3f94654f"],
Cell[4354, 133, 281, 6, 33, "Output",ExpressionUUID->"63c10008-7aa1-4b43-91e9-b7ae7acef2f0"],
Cell[4638, 141, 283, 6, 33, "Output",ExpressionUUID->"ba694bbc-fa66-45d7-bd42-ba18ff5e6639"],
Cell[4924, 149, 283, 6, 33, "Output",ExpressionUUID->"02f462e1-d128-4cd3-84b8-e149f69e97d5"],
Cell[5210, 157, 794, 23, 36, "Output",ExpressionUUID->"1597f642-064a-430a-9f39-5245bb8b68a2"],
Cell[6007, 182, 497, 13, 33, "Output",ExpressionUUID->"8d301608-54d0-472a-8c57-19ac412bff7e"],
Cell[6507, 197, 4720, 95, 66, "Output",ExpressionUUID->"4e76e8d3-1a70-4e7f-bca8-0781013357ac"]
}, Open  ]],
Cell[CellGroupData[{
Cell[11264, 297, 2234, 68, 190, "Input",ExpressionUUID->"04bb74e9-e8a3-497a-ae73-efd806c27f8e"],
Cell[13501, 367, 406, 10, 35, "Output",ExpressionUUID->"27ef4e92-8c49-48c8-a6fd-8b98f35f6a76"],
Cell[13910, 379, 491, 13, 36, "Output",ExpressionUUID->"c691a0df-5fa0-4995-855c-9e538350d5cf"],
Cell[14404, 394, 627, 17, 36, "Output",ExpressionUUID->"2a174ed4-be21-4302-bc93-f47bbe0cba4e"],
Cell[15034, 413, 329, 7, 33, "Output",ExpressionUUID->"f63b1f59-d115-4108-aab6-8e4a12e57a1f"],
Cell[15366, 422, 329, 7, 33, "Output",ExpressionUUID->"250f18a6-a18b-4dad-b669-0be510cc966c"],
Cell[15698, 431, 329, 7, 33, "Output",ExpressionUUID->"204aedc8-7ea9-4466-9caa-f6a92624f41b"],
Cell[16030, 440, 1106, 34, 36, "Output",ExpressionUUID->"0be9f3e4-6645-4a05-a330-049d1ca6c96a"],
Cell[17139, 476, 547, 14, 33, "Output",ExpressionUUID->"a12ee356-1f58-47b2-bfcd-909a48c511ae"],
Cell[17689, 492, 22066, 465, 66, "Output",ExpressionUUID->"fd33337e-4745-4194-a114-efd54480ebe8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[39792, 962, 277, 4, 29, "Input",ExpressionUUID->"1ec0efb9-55d6-41a0-bf81-9581b0d74116"],
Cell[40072, 968, 181355, 3479, 827, "Output",ExpressionUUID->"eeae0081-c781-4011-b165-abe37b7c47a2"]
}, Open  ]],
Cell[221442, 4450, 2044, 65, 190, "Input",ExpressionUUID->"42f12de3-c1a9-4e2c-9c80-949274107d03"],
Cell[CellGroupData[{
Cell[223511, 4519, 3688, 99, 334, "Input",ExpressionUUID->"e8717f3d-e445-4a82-91ae-a22c88f7b1e1"],
Cell[227202, 4620, 812, 18, 37, "Output",ExpressionUUID->"a5b86576-327d-4f23-88de-a50956c0bf0e"],
Cell[228017, 4640, 721, 15, 51, "Output",ExpressionUUID->"6c300813-b0ba-40fb-ba36-efae455508d8"],
Cell[228741, 4657, 800, 18, 57, "Output",ExpressionUUID->"5b8231ef-a921-4953-961e-eca2f0b6e1e2"],
Cell[229544, 4677, 721, 15, 53, "Output",ExpressionUUID->"09a51c81-9fab-49e7-bf5a-71a96f077b53"],
Cell[230268, 4694, 802, 18, 57, "Output",ExpressionUUID->"cb88fd21-35ee-49d4-ab8e-daeb3ab404ef"],
Cell[231073, 4714, 728, 15, 36, "Output",ExpressionUUID->"aee05851-99ae-4917-ab54-1085e3b89efe"],
Cell[231804, 4731, 723, 15, 36, "Output",ExpressionUUID->"9ba6af6f-9981-48e5-97a2-17594a33bee0"],
Cell[232530, 4748, 1723, 49, 57, "Output",ExpressionUUID->"60f27b27-7fa8-4f7b-833a-886e4d428498"],
Cell[234256, 4799, 5078, 101, 66, "Output",ExpressionUUID->"2e47c13e-6495-4ce9-9e84-21b28fd0a704"]
}, Open  ]],
Cell[CellGroupData[{
Cell[239371, 4905, 255, 4, 29, "Input",ExpressionUUID->"72629a3d-cefb-4ead-b3bd-3f958ffe59b4"],
Cell[239629, 4911, 9011, 215, 573, "Output",ExpressionUUID->"4d89035c-0077-447b-a4c6-31881da05551"]
}, Open  ]],
Cell[CellGroupData[{
Cell[248677, 5131, 274, 4, 29, "Input",ExpressionUUID->"a5a61046-3c69-4755-9a74-c93b8286c220"],
Cell[248954, 5137, 58924, 1407, 3269, "Output",ExpressionUUID->"115c9f4c-6564-40dc-8929-57b8923feb83"]
}, Open  ]],
Cell[307893, 6547, 503, 14, 29, "Input",ExpressionUUID->"79dc2dc0-8ba6-4eac-a840-c6e23ea81e32"],
Cell[CellGroupData[{
Cell[308421, 6565, 882, 21, 50, "Input",ExpressionUUID->"7eca51c3-f1d1-4d22-8096-0a61fe361765"],
Cell[309306, 6588, 431, 11, 35, "Output",ExpressionUUID->"a9550782-af0f-48ea-ab00-4b35e067bf0a"]
}, Open  ]],
Cell[309752, 6602, 158, 3, 29, "Input",ExpressionUUID->"18adb6d7-8b34-4c01-a7e0-e98245eda034"],
Cell[CellGroupData[{
Cell[309935, 6609, 207, 3, 29, "Input",ExpressionUUID->"91ccacfd-6a25-4722-a9c4-0b5570ab8499"],
Cell[310145, 6614, 155, 2, 33, "Output",ExpressionUUID->"a310b251-70fb-4bc0-bba2-0d483074463d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[310337, 6621, 170, 3, 29, "Input",ExpressionUUID->"836bbd22-194c-4fe0-ac27-4b349a267872"],
Cell[310510, 6626, 12300, 298, 176, "Output",ExpressionUUID->"b3f98709-2b8d-4d10-beba-b28fcd8892ae"]
}, Open  ]],
Cell[322825, 6927, 301, 6, 90, "Input",ExpressionUUID->"01e4e320-12a2-4d3c-bf3a-b25f0878ff29"],
Cell[CellGroupData[{
Cell[323151, 6937, 468, 11, 50, "Input",ExpressionUUID->"40548065-98a1-4d13-a629-515126bad77d"],
Cell[323622, 6950, 376, 10, 49, "Output",ExpressionUUID->"021103bd-07f8-4232-abac-4a66a5b70e74"]
}, Open  ]],
Cell[324013, 6963, 5392, 152, 270, "Input",ExpressionUUID->"b335ecdc-dd0e-448a-a420-d9325fa6b047"],
Cell[329408, 7117, 149, 3, 50, "Input",ExpressionUUID->"10f66a7e-f2f5-4424-84cc-0d06c2e93563"],
Cell[CellGroupData[{
Cell[329582, 7124, 715, 12, 29, "Input",ExpressionUUID->"96e5e2c4-6145-4d9c-be2f-e4bf850e0cf3"],
Cell[330300, 7138, 3407, 110, 58, "Output",ExpressionUUID->"8f3a3685-879a-479d-a86a-7044ad48bcc5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[333744, 7253, 602, 15, 29, "Input",ExpressionUUID->"2a956c21-21a9-407e-b174-d75def413adf"],
Cell[334349, 7270, 31941, 676, 66, "Output",ExpressionUUID->"1fcd9784-a81e-4333-934e-ec5f2f7954a7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[366327, 7951, 230, 3, 29, "Input",ExpressionUUID->"6b79393f-452b-41a3-901e-6ce3dcc452ce"],
Cell[366560, 7956, 102571, 2377, 5901, "Output",ExpressionUUID->"ead9b21f-812d-4c7c-a65c-78dec5ec57cb"]
}, Open  ]],
Cell[CellGroupData[{
Cell[469168, 10338, 338, 5, 29, "Input",ExpressionUUID->"cee99544-6512-4b42-b7c7-986a79744ba6"],
Cell[469509, 10345, 165898, 3880, 449, "Output",ExpressionUUID->"0bd7ee4c-5e20-4619-9436-0803faecadd6"]
}, Open  ]],
Cell[635422, 14228, 188, 4, 29, "Input",ExpressionUUID->"24838556-7a7e-4114-87d2-e39ca6fe152b"],
Cell[635613, 14234, 488, 10, 110, "Input",ExpressionUUID->"36ef55da-ccba-4cfa-aca3-e872977c5d65"]
}
]
*)

